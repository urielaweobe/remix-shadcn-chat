import {
  require_jsx_runtime
} from "/build/_shared/chunk-B43JI2TA.js";
import {
  Headers as Headers2,
  browser_default,
  browser_exports,
  init_browser
} from "/build/_shared/chunk-PH7FC7E6.js";
import {
  require_jsx_dev_runtime
} from "/build/_shared/chunk-XGOTYLZ5.js";
import {
  createHotContext
} from "/build/_shared/chunk-VWG75Z3I.js";
import "/build/_shared/chunk-UWV35TSL.js";
import {
  require_react
} from "/build/_shared/chunk-7M6SC7J5.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "/build/_shared/chunk-PNG5AS42.js";

// empty-module:@remix-run/node
var require_node = __commonJS({
  "empty-module:@remix-run/node"(exports, module) {
    module.exports = {};
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js
var require_PostgrestError = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestError = class extends Error {
      constructor(context) {
        super(context.message);
        this.name = "PostgrestError";
        this.details = context.details;
        this.hint = context.hint;
        this.code = context.code;
      }
    };
    exports.default = PostgrestError;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js
var require_PostgrestBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var node_fetch_1 = __importDefault((init_browser(), __toCommonJS(browser_exports)));
    var PostgrestError_1 = __importDefault(require_PostgrestError());
    var PostgrestBuilder2 = class {
      constructor(builder) {
        this.shouldThrowOnError = false;
        this.method = builder.method;
        this.url = builder.url;
        this.headers = builder.headers;
        this.schema = builder.schema;
        this.body = builder.body;
        this.shouldThrowOnError = builder.shouldThrowOnError;
        this.signal = builder.signal;
        this.isMaybeSingle = builder.isMaybeSingle;
        if (builder.fetch) {
          this.fetch = builder.fetch;
        } else if (typeof fetch === "undefined") {
          this.fetch = node_fetch_1.default;
        } else {
          this.fetch = fetch;
        }
      }
      /**
       * If there's an error with the query, throwOnError will reject the promise by
       * throwing the error instead of returning it as part of a successful response.
       *
       * {@link https://github.com/supabase/supabase-js/issues/92}
       */
      throwOnError() {
        this.shouldThrowOnError = true;
        return this;
      }
      /**
       * Set an HTTP header for the request.
       */
      setHeader(name, value) {
        this.headers = Object.assign({}, this.headers);
        this.headers[name] = value;
        return this;
      }
      then(onfulfilled, onrejected) {
        if (this.schema === void 0) {
        } else if (["GET", "HEAD"].includes(this.method)) {
          this.headers["Accept-Profile"] = this.schema;
        } else {
          this.headers["Content-Profile"] = this.schema;
        }
        if (this.method !== "GET" && this.method !== "HEAD") {
          this.headers["Content-Type"] = "application/json";
        }
        const _fetch = this.fetch;
        let res = _fetch(this.url.toString(), {
          method: this.method,
          headers: this.headers,
          body: JSON.stringify(this.body),
          signal: this.signal
        }).then(async (res2) => {
          var _a, _b, _c5;
          let error = null;
          let data = null;
          let count = null;
          let status = res2.status;
          let statusText = res2.statusText;
          if (res2.ok) {
            if (this.method !== "HEAD") {
              const body = await res2.text();
              if (body === "") {
              } else if (this.headers["Accept"] === "text/csv") {
                data = body;
              } else if (this.headers["Accept"] && this.headers["Accept"].includes("application/vnd.pgrst.plan+text")) {
                data = body;
              } else {
                data = JSON.parse(body);
              }
            }
            const countHeader = (_a = this.headers["Prefer"]) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);
            const contentRange = (_b = res2.headers.get("content-range")) === null || _b === void 0 ? void 0 : _b.split("/");
            if (countHeader && contentRange && contentRange.length > 1) {
              count = parseInt(contentRange[1]);
            }
            if (this.isMaybeSingle && this.method === "GET" && Array.isArray(data)) {
              if (data.length > 1) {
                error = {
                  // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
                  code: "PGRST116",
                  details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,
                  hint: null,
                  message: "JSON object requested, multiple (or no) rows returned"
                };
                data = null;
                count = null;
                status = 406;
                statusText = "Not Acceptable";
              } else if (data.length === 1) {
                data = data[0];
              } else {
                data = null;
              }
            }
          } else {
            const body = await res2.text();
            try {
              error = JSON.parse(body);
              if (Array.isArray(error) && res2.status === 404) {
                data = [];
                error = null;
                status = 200;
                statusText = "OK";
              }
            } catch (_d) {
              if (res2.status === 404 && body === "") {
                status = 204;
                statusText = "No Content";
              } else {
                error = {
                  message: body
                };
              }
            }
            if (error && this.isMaybeSingle && ((_c5 = error === null || error === void 0 ? void 0 : error.details) === null || _c5 === void 0 ? void 0 : _c5.includes("0 rows"))) {
              error = null;
              status = 200;
              statusText = "OK";
            }
            if (error && this.shouldThrowOnError) {
              throw new PostgrestError_1.default(error);
            }
          }
          const postgrestResponse = {
            error,
            data,
            count,
            status,
            statusText
          };
          return postgrestResponse;
        });
        if (!this.shouldThrowOnError) {
          res = res.catch((fetchError) => {
            var _a, _b, _c5;
            return {
              error: {
                message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : "FetchError"}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
                details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ""}`,
                hint: "",
                code: `${(_c5 = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c5 !== void 0 ? _c5 : ""}`
              },
              data: null,
              count: null,
              status: 0,
              statusText: ""
            };
          });
        }
        return res.then(onfulfilled, onrejected);
      }
    };
    exports.default = PostgrestBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js
var require_PostgrestTransformBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
    var PostgrestTransformBuilder2 = class extends PostgrestBuilder_1.default {
      /**
       * Perform a SELECT on the query result.
       *
       * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
       * return modified rows. By calling this method, modified rows are returned in
       * `data`.
       *
       * @param columns - The columns to retrieve, separated by commas
       */
      select(columns) {
        let quoted = false;
        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
          if (/\s/.test(c) && !quoted) {
            return "";
          }
          if (c === '"') {
            quoted = !quoted;
          }
          return c;
        }).join("");
        this.url.searchParams.set("select", cleanedColumns);
        if (this.headers["Prefer"]) {
          this.headers["Prefer"] += ",";
        }
        this.headers["Prefer"] += "return=representation";
        return this;
      }
      /**
       * Order the query result by `column`.
       *
       * You can call this method multiple times to order by multiple columns.
       *
       * You can order referenced tables, but it only affects the ordering of the
       * parent table if you use `!inner` in the query.
       *
       * @param column - The column to order by
       * @param options - Named parameters
       * @param options.ascending - If `true`, the result will be in ascending order
       * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
       * `null`s appear last.
       * @param options.referencedTable - Set this to order a referenced table by
       * its columns
       * @param options.foreignTable - Deprecated, use `options.referencedTable`
       * instead
       */
      order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable } = {}) {
        const key = referencedTable ? `${referencedTable}.order` : "order";
        const existingOrder = this.url.searchParams.get(key);
        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
        return this;
      }
      /**
       * Limit the query result by `count`.
       *
       * @param count - The maximum number of rows to return
       * @param options - Named parameters
       * @param options.referencedTable - Set this to limit rows of referenced
       * tables instead of the parent table
       * @param options.foreignTable - Deprecated, use `options.referencedTable`
       * instead
       */
      limit(count, { foreignTable, referencedTable = foreignTable } = {}) {
        const key = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
        this.url.searchParams.set(key, `${count}`);
        return this;
      }
      /**
       * Limit the query result by starting at an offset `from` and ending at the offset `to`.
       * Only records within this range are returned.
       * This respects the query order and if there is no order clause the range could behave unexpectedly.
       * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
       * and fourth rows of the query.
       *
       * @param from - The starting index from which to limit the result
       * @param to - The last index to which to limit the result
       * @param options - Named parameters
       * @param options.referencedTable - Set this to limit rows of referenced
       * tables instead of the parent table
       * @param options.foreignTable - Deprecated, use `options.referencedTable`
       * instead
       */
      range(from, to, { foreignTable, referencedTable = foreignTable } = {}) {
        const keyOffset = typeof referencedTable === "undefined" ? "offset" : `${referencedTable}.offset`;
        const keyLimit = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
        this.url.searchParams.set(keyOffset, `${from}`);
        this.url.searchParams.set(keyLimit, `${to - from + 1}`);
        return this;
      }
      /**
       * Set the AbortSignal for the fetch request.
       *
       * @param signal - The AbortSignal to use for the fetch request
       */
      abortSignal(signal) {
        this.signal = signal;
        return this;
      }
      /**
       * Return `data` as a single object instead of an array of objects.
       *
       * Query result must be one row (e.g. using `.limit(1)`), otherwise this
       * returns an error.
       */
      single() {
        this.headers["Accept"] = "application/vnd.pgrst.object+json";
        return this;
      }
      /**
       * Return `data` as a single object instead of an array of objects.
       *
       * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
       * this returns an error.
       */
      maybeSingle() {
        if (this.method === "GET") {
          this.headers["Accept"] = "application/json";
        } else {
          this.headers["Accept"] = "application/vnd.pgrst.object+json";
        }
        this.isMaybeSingle = true;
        return this;
      }
      /**
       * Return `data` as a string in CSV format.
       */
      csv() {
        this.headers["Accept"] = "text/csv";
        return this;
      }
      /**
       * Return `data` as an object in [GeoJSON](https://geojson.org) format.
       */
      geojson() {
        this.headers["Accept"] = "application/geo+json";
        return this;
      }
      /**
       * Return `data` as the EXPLAIN plan for the query.
       *
       * You need to enable the
       * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
       * setting before using this method.
       *
       * @param options - Named parameters
       *
       * @param options.analyze - If `true`, the query will be executed and the
       * actual run time will be returned
       *
       * @param options.verbose - If `true`, the query identifier will be returned
       * and `data` will include the output columns of the query
       *
       * @param options.settings - If `true`, include information on configuration
       * parameters that affect query planning
       *
       * @param options.buffers - If `true`, include information on buffer usage
       *
       * @param options.wal - If `true`, include information on WAL record generation
       *
       * @param options.format - The format of the output, can be `"text"` (default)
       * or `"json"`
       */
      explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = "text" } = {}) {
        var _a;
        const options = [
          analyze ? "analyze" : null,
          verbose ? "verbose" : null,
          settings ? "settings" : null,
          buffers ? "buffers" : null,
          wal ? "wal" : null
        ].filter(Boolean).join("|");
        const forMediatype = (_a = this.headers["Accept"]) !== null && _a !== void 0 ? _a : "application/json";
        this.headers["Accept"] = `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`;
        if (format === "json")
          return this;
        else
          return this;
      }
      /**
       * Rollback the query.
       *
       * `data` will still be returned, but the query is not committed.
       */
      rollback() {
        var _a;
        if (((_a = this.headers["Prefer"]) !== null && _a !== void 0 ? _a : "").trim().length > 0) {
          this.headers["Prefer"] += ",tx=rollback";
        } else {
          this.headers["Prefer"] = "tx=rollback";
        }
        return this;
      }
      /**
       * Override the type of the returned `data`.
       *
       * @typeParam NewResult - The new result type to override with
       */
      returns() {
        return this;
      }
    };
    exports.default = PostgrestTransformBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js
var require_PostgrestFilterBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
    var PostgrestFilterBuilder2 = class extends PostgrestTransformBuilder_1.default {
      /**
       * Match only rows where `column` is equal to `value`.
       *
       * To check if the value of `column` is NULL, you should use `.is()` instead.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      eq(column, value) {
        this.url.searchParams.append(column, `eq.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is not equal to `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      neq(column, value) {
        this.url.searchParams.append(column, `neq.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is greater than `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      gt(column, value) {
        this.url.searchParams.append(column, `gt.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is greater than or equal to `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      gte(column, value) {
        this.url.searchParams.append(column, `gte.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is less than `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      lt(column, value) {
        this.url.searchParams.append(column, `lt.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is less than or equal to `value`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      lte(column, value) {
        this.url.searchParams.append(column, `lte.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` matches `pattern` case-sensitively.
       *
       * @param column - The column to filter on
       * @param pattern - The pattern to match with
       */
      like(column, pattern) {
        this.url.searchParams.append(column, `like.${pattern}`);
        return this;
      }
      /**
       * Match only rows where `column` matches all of `patterns` case-sensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      likeAllOf(column, patterns) {
        this.url.searchParams.append(column, `like(all).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` matches any of `patterns` case-sensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      likeAnyOf(column, patterns) {
        this.url.searchParams.append(column, `like(any).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` matches `pattern` case-insensitively.
       *
       * @param column - The column to filter on
       * @param pattern - The pattern to match with
       */
      ilike(column, pattern) {
        this.url.searchParams.append(column, `ilike.${pattern}`);
        return this;
      }
      /**
       * Match only rows where `column` matches all of `patterns` case-insensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      ilikeAllOf(column, patterns) {
        this.url.searchParams.append(column, `ilike(all).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` matches any of `patterns` case-insensitively.
       *
       * @param column - The column to filter on
       * @param patterns - The patterns to match with
       */
      ilikeAnyOf(column, patterns) {
        this.url.searchParams.append(column, `ilike(any).{${patterns.join(",")}}`);
        return this;
      }
      /**
       * Match only rows where `column` IS `value`.
       *
       * For non-boolean columns, this is only relevant for checking if the value of
       * `column` is NULL by setting `value` to `null`.
       *
       * For boolean columns, you can also set `value` to `true` or `false` and it
       * will behave the same way as `.eq()`.
       *
       * @param column - The column to filter on
       * @param value - The value to filter with
       */
      is(column, value) {
        this.url.searchParams.append(column, `is.${value}`);
        return this;
      }
      /**
       * Match only rows where `column` is included in the `values` array.
       *
       * @param column - The column to filter on
       * @param values - The values array to filter with
       */
      in(column, values) {
        const cleanedValues = Array.from(new Set(values)).map((s) => {
          if (typeof s === "string" && new RegExp("[,()]").test(s))
            return `"${s}"`;
          else
            return `${s}`;
        }).join(",");
        this.url.searchParams.append(column, `in.(${cleanedValues})`);
        return this;
      }
      /**
       * Only relevant for jsonb, array, and range columns. Match only rows where
       * `column` contains every element appearing in `value`.
       *
       * @param column - The jsonb, array, or range column to filter on
       * @param value - The jsonb, array, or range value to filter with
       */
      contains(column, value) {
        if (typeof value === "string") {
          this.url.searchParams.append(column, `cs.${value}`);
        } else if (Array.isArray(value)) {
          this.url.searchParams.append(column, `cs.{${value.join(",")}}`);
        } else {
          this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
        }
        return this;
      }
      /**
       * Only relevant for jsonb, array, and range columns. Match only rows where
       * every element appearing in `column` is contained by `value`.
       *
       * @param column - The jsonb, array, or range column to filter on
       * @param value - The jsonb, array, or range value to filter with
       */
      containedBy(column, value) {
        if (typeof value === "string") {
          this.url.searchParams.append(column, `cd.${value}`);
        } else if (Array.isArray(value)) {
          this.url.searchParams.append(column, `cd.{${value.join(",")}}`);
        } else {
          this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
        }
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is greater than any element in `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeGt(column, range) {
        this.url.searchParams.append(column, `sr.${range}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is either contained in `range` or greater than any element in
       * `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeGte(column, range) {
        this.url.searchParams.append(column, `nxl.${range}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is less than any element in `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeLt(column, range) {
        this.url.searchParams.append(column, `sl.${range}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where every element in
       * `column` is either contained in `range` or less than any element in
       * `range`.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeLte(column, range) {
        this.url.searchParams.append(column, `nxr.${range}`);
        return this;
      }
      /**
       * Only relevant for range columns. Match only rows where `column` is
       * mutually exclusive to `range` and there can be no element between the two
       * ranges.
       *
       * @param column - The range column to filter on
       * @param range - The range to filter with
       */
      rangeAdjacent(column, range) {
        this.url.searchParams.append(column, `adj.${range}`);
        return this;
      }
      /**
       * Only relevant for array and range columns. Match only rows where
       * `column` and `value` have an element in common.
       *
       * @param column - The array or range column to filter on
       * @param value - The array or range value to filter with
       */
      overlaps(column, value) {
        if (typeof value === "string") {
          this.url.searchParams.append(column, `ov.${value}`);
        } else {
          this.url.searchParams.append(column, `ov.{${value.join(",")}}`);
        }
        return this;
      }
      /**
       * Only relevant for text and tsvector columns. Match only rows where
       * `column` matches the query string in `query`.
       *
       * @param column - The text or tsvector column to filter on
       * @param query - The query text to match with
       * @param options - Named parameters
       * @param options.config - The text search configuration to use
       * @param options.type - Change how the `query` text is interpreted
       */
      textSearch(column, query, { config, type } = {}) {
        let typePart = "";
        if (type === "plain") {
          typePart = "pl";
        } else if (type === "phrase") {
          typePart = "ph";
        } else if (type === "websearch") {
          typePart = "w";
        }
        const configPart = config === void 0 ? "" : `(${config})`;
        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
        return this;
      }
      /**
       * Match only rows where each column in `query` keys is equal to its
       * associated value. Shorthand for multiple `.eq()`s.
       *
       * @param query - The object to filter with, with column names as keys mapped
       * to their filter values
       */
      match(query) {
        Object.entries(query).forEach(([column, value]) => {
          this.url.searchParams.append(column, `eq.${value}`);
        });
        return this;
      }
      /**
       * Match only rows which doesn't satisfy the filter.
       *
       * Unlike most filters, `opearator` and `value` are used as-is and need to
       * follow [PostgREST
       * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
       * to make sure they are properly sanitized.
       *
       * @param column - The column to filter on
       * @param operator - The operator to be negated to filter with, following
       * PostgREST syntax
       * @param value - The value to filter with, following PostgREST syntax
       */
      not(column, operator, value) {
        this.url.searchParams.append(column, `not.${operator}.${value}`);
        return this;
      }
      /**
       * Match only rows which satisfy at least one of the filters.
       *
       * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
       * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
       * to make sure it's properly sanitized.
       *
       * It's currently not possible to do an `.or()` filter across multiple tables.
       *
       * @param filters - The filters to use, following PostgREST syntax
       * @param options - Named parameters
       * @param options.referencedTable - Set this to filter on referenced tables
       * instead of the parent table
       * @param options.foreignTable - Deprecated, use `referencedTable` instead
       */
      or(filters, { foreignTable, referencedTable = foreignTable } = {}) {
        const key = referencedTable ? `${referencedTable}.or` : "or";
        this.url.searchParams.append(key, `(${filters})`);
        return this;
      }
      /**
       * Match only rows which satisfy the filter. This is an escape hatch - you
       * should use the specific filter methods wherever possible.
       *
       * Unlike most filters, `opearator` and `value` are used as-is and need to
       * follow [PostgREST
       * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
       * to make sure they are properly sanitized.
       *
       * @param column - The column to filter on
       * @param operator - The operator to filter with, following PostgREST syntax
       * @param value - The value to filter with, following PostgREST syntax
       */
      filter(column, operator, value) {
        this.url.searchParams.append(column, `${operator}.${value}`);
        return this;
      }
    };
    exports.default = PostgrestFilterBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js
var require_PostgrestQueryBuilder = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
    var PostgrestQueryBuilder2 = class {
      constructor(url, { headers = {}, schema, fetch: fetch2 }) {
        this.url = url;
        this.headers = headers;
        this.schema = schema;
        this.fetch = fetch2;
      }
      /**
       * Perform a SELECT query on the table or view.
       *
       * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
       *
       * @param options - Named parameters
       *
       * @param options.head - When set to `true`, `data` will not be returned.
       * Useful if you only need the count.
       *
       * @param options.count - Count algorithm to use to count rows in the table or view.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      select(columns, { head: head2 = false, count } = {}) {
        const method = head2 ? "HEAD" : "GET";
        let quoted = false;
        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
          if (/\s/.test(c) && !quoted) {
            return "";
          }
          if (c === '"') {
            quoted = !quoted;
          }
          return c;
        }).join("");
        this.url.searchParams.set("select", cleanedColumns);
        if (count) {
          this.headers["Prefer"] = `count=${count}`;
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform an INSERT into the table or view.
       *
       * By default, inserted rows are not returned. To return it, chain the call
       * with `.select()`.
       *
       * @param values - The values to insert. Pass an object to insert a single row
       * or an array to insert multiple rows.
       *
       * @param options - Named parameters
       *
       * @param options.count - Count algorithm to use to count inserted rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       *
       * @param options.defaultToNull - Make missing fields default to `null`.
       * Otherwise, use the default value for the column. Only applies for bulk
       * inserts.
       */
      insert(values, { count, defaultToNull = true } = {}) {
        const method = "POST";
        const prefersHeaders = [];
        if (this.headers["Prefer"]) {
          prefersHeaders.push(this.headers["Prefer"]);
        }
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        if (!defaultToNull) {
          prefersHeaders.push("missing=default");
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        if (Array.isArray(values)) {
          const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
          if (columns.length > 0) {
            const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
            this.url.searchParams.set("columns", uniqueColumns.join(","));
          }
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body: values,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform an UPSERT on the table or view. Depending on the column(s) passed
       * to `onConflict`, `.upsert()` allows you to perform the equivalent of
       * `.insert()` if a row with the corresponding `onConflict` columns doesn't
       * exist, or if it does exist, perform an alternative action depending on
       * `ignoreDuplicates`.
       *
       * By default, upserted rows are not returned. To return it, chain the call
       * with `.select()`.
       *
       * @param values - The values to upsert with. Pass an object to upsert a
       * single row or an array to upsert multiple rows.
       *
       * @param options - Named parameters
       *
       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
       * duplicate rows are determined. Two rows are duplicates if all the
       * `onConflict` columns are equal.
       *
       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
       * `false`, duplicate rows are merged with existing rows.
       *
       * @param options.count - Count algorithm to use to count upserted rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       *
       * @param options.defaultToNull - Make missing fields default to `null`.
       * Otherwise, use the default value for the column. This only applies when
       * inserting new rows, not when merging with existing rows under
       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
       */
      upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true } = {}) {
        const method = "POST";
        const prefersHeaders = [`resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`];
        if (onConflict !== void 0)
          this.url.searchParams.set("on_conflict", onConflict);
        if (this.headers["Prefer"]) {
          prefersHeaders.push(this.headers["Prefer"]);
        }
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        if (!defaultToNull) {
          prefersHeaders.push("missing=default");
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        if (Array.isArray(values)) {
          const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
          if (columns.length > 0) {
            const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
            this.url.searchParams.set("columns", uniqueColumns.join(","));
          }
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body: values,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform an UPDATE on the table or view.
       *
       * By default, updated rows are not returned. To return it, chain the call
       * with `.select()` after filters.
       *
       * @param values - The values to update with
       *
       * @param options - Named parameters
       *
       * @param options.count - Count algorithm to use to count updated rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      update(values, { count } = {}) {
        const method = "PATCH";
        const prefersHeaders = [];
        if (this.headers["Prefer"]) {
          prefersHeaders.push(this.headers["Prefer"]);
        }
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          body: values,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
      /**
       * Perform a DELETE on the table or view.
       *
       * By default, deleted rows are not returned. To return it, chain the call
       * with `.select()` after filters.
       *
       * @param options - Named parameters
       *
       * @param options.count - Count algorithm to use to count deleted rows.
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      delete({ count } = {}) {
        const method = "DELETE";
        const prefersHeaders = [];
        if (count) {
          prefersHeaders.push(`count=${count}`);
        }
        if (this.headers["Prefer"]) {
          prefersHeaders.unshift(this.headers["Prefer"]);
        }
        this.headers["Prefer"] = prefersHeaders.join(",");
        return new PostgrestFilterBuilder_1.default({
          method,
          url: this.url,
          headers: this.headers,
          schema: this.schema,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
    };
    exports.default = PostgrestQueryBuilder2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/version.js
var require_version = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "0.0.0-automated";
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_HEADERS = void 0;
    var version_1 = require_version();
    exports.DEFAULT_HEADERS = { "X-Client-Info": `postgrest-js/${version_1.version}` };
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js
var require_PostgrestClient = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
    var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
    var constants_1 = require_constants();
    var PostgrestClient2 = class {
      // TODO: Add back shouldThrowOnError once we figure out the typings
      /**
       * Creates a PostgREST client.
       *
       * @param url - URL of the PostgREST endpoint
       * @param options - Named parameters
       * @param options.headers - Custom headers
       * @param options.schema - Postgres schema to switch to
       * @param options.fetch - Custom fetch
       */
      constructor(url, { headers = {}, schema, fetch: fetch2 } = {}) {
        this.url = url;
        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);
        this.schemaName = schema;
        this.fetch = fetch2;
      }
      /**
       * Perform a query on a table or a view.
       *
       * @param relation - The table or view name to query
       */
      from(relation) {
        const url = new URL(`${this.url}/${relation}`);
        return new PostgrestQueryBuilder_1.default(url, {
          headers: Object.assign({}, this.headers),
          schema: this.schemaName,
          fetch: this.fetch
        });
      }
      /**
       * Select a schema to query or perform an function (rpc) call.
       *
       * The schema needs to be on the list of exposed schemas inside Supabase.
       *
       * @param schema - The schema to query
       */
      schema(schema) {
        return new PostgrestClient2(this.url, {
          headers: this.headers,
          schema,
          fetch: this.fetch
        });
      }
      /**
       * Perform a function call.
       *
       * @param fn - The function name to call
       * @param args - The arguments to pass to the function call
       * @param options - Named parameters
       * @param options.head - When set to `true`, `data` will not be returned.
       * Useful if you only need the count.
       * @param options.get - When set to `true`, the function will be called with
       * read-only access mode.
       * @param options.count - Count algorithm to use to count rows returned by the
       * function. Only applicable for [set-returning
       * functions](https://www.postgresql.org/docs/current/functions-srf.html).
       *
       * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
       * hood.
       *
       * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
       * statistics under the hood.
       *
       * `"estimated"`: Uses exact count for low numbers and planned count for high
       * numbers.
       */
      rpc(fn, args = {}, { head: head2 = false, get: get2 = false, count } = {}) {
        let method;
        const url = new URL(`${this.url}/rpc/${fn}`);
        let body;
        if (head2 || get2) {
          method = head2 ? "HEAD" : "GET";
          Object.entries(args).filter(([_, value]) => value !== void 0).map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(",")}}` : `${value}`]).forEach(([name, value]) => {
            url.searchParams.append(name, value);
          });
        } else {
          method = "POST";
          body = args;
        }
        const headers = Object.assign({}, this.headers);
        if (count) {
          headers["Prefer"] = `count=${count}`;
        }
        return new PostgrestFilterBuilder_1.default({
          method,
          url,
          headers,
          schema: this.schemaName,
          body,
          fetch: this.fetch,
          allowEmpty: false
        });
      }
    };
    exports.default = PostgrestClient2;
  }
});

// node_modules/@supabase/postgrest-js/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@supabase/postgrest-js/dist/cjs/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;
    var PostgrestClient_1 = __importDefault(require_PostgrestClient());
    exports.PostgrestClient = PostgrestClient_1.default;
    var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
    exports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;
    var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
    exports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;
    var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
    exports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;
    var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
    exports.PostgrestBuilder = PostgrestBuilder_1.default;
    var PostgrestError_1 = __importDefault(require_PostgrestError());
    exports.PostgrestError = PostgrestError_1.default;
    exports.default = {
      PostgrestClient: PostgrestClient_1.default,
      PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,
      PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,
      PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,
      PostgrestBuilder: PostgrestBuilder_1.default,
      PostgrestError: PostgrestError_1.default
    };
  }
});

// node_modules/@mistralai/mistralai/lib/url.js
var require_url = __commonJS({
  "node_modules/@mistralai/mistralai/lib/url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pathToFunc = pathToFunc;
    var hasOwn = Object.prototype.hasOwnProperty;
    function pathToFunc(pathPattern, options) {
      const paramRE = /\{([a-zA-Z0-9_]+?)\}/g;
      return function buildURLPath(params = {}) {
        return pathPattern.replace(paramRE, function(_, placeholder) {
          if (!hasOwn.call(params, placeholder)) {
            throw new Error(`Parameter '${placeholder}' is required`);
          }
          const value = params[placeholder];
          if (typeof value !== "string" && typeof value !== "number") {
            throw new Error(`Parameter '${placeholder}' must be a string or number`);
          }
          return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(`${value}`) : `${value}`;
        });
      };
    }
  }
});

// node_modules/@mistralai/mistralai/lib/config.js
var require_config = __commonJS({
  "node_modules/@mistralai/mistralai/lib/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDK_METADATA = exports.ServerList = exports.ServerEu = void 0;
    exports.serverURLFromOptions = serverURLFromOptions;
    var url_js_1 = require_url();
    exports.ServerEu = "eu";
    exports.ServerList = {
      [exports.ServerEu]: "https://api.mistral.ai"
    };
    function serverURLFromOptions(options) {
      var _a;
      let serverURL = options.serverURL;
      const params = {};
      if (!serverURL) {
        const server = (_a = options.server) !== null && _a !== void 0 ? _a : exports.ServerEu;
        serverURL = exports.ServerList[server] || "";
      }
      const u = (0, url_js_1.pathToFunc)(serverURL)(params);
      return new URL(u);
    }
    exports.SDK_METADATA = {
      language: "typescript",
      openapiDocVersion: "0.0.2",
      sdkVersion: "1.3.5",
      genVersion: "2.470.1",
      userAgent: "speakeasy-sdk/typescript 1.3.5 2.470.1 0.0.2 @mistralai/mistralai"
    };
  }
});

// node_modules/@mistralai/mistralai/lib/files.js
var require_files = __commonJS({
  "node_modules/@mistralai/mistralai/lib/files.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readableStreamToArrayBuffer = readableStreamToArrayBuffer;
    async function readableStreamToArrayBuffer(readable) {
      const reader = readable.getReader();
      const chunks = [];
      let totalLength = 0;
      let done = false;
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        if (doneReading) {
          done = true;
        } else {
          chunks.push(value);
          totalLength += value.length;
        }
      }
      const concatenatedChunks = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of chunks) {
        concatenatedChunks.set(chunk, offset);
        offset += chunk.length;
      }
      return concatenatedChunks.buffer;
    }
  }
});

// node_modules/@mistralai/mistralai/hooks/custom_user_agent.js
var require_custom_user_agent = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/custom_user_agent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomUserAgentHook = void 0;
    var config_1 = require_config();
    var CustomUserAgentHook = class {
      beforeRequest(_, request) {
        const version5 = config_1.SDK_METADATA.sdkVersion;
        const ua = `mistral-client-typescript/${version5}`;
        request.headers.set("user-agent", ua);
        if (!request.headers.get("user-agent")) {
          request.headers.set("x-mistral-user-agent", ua);
        }
        return request;
      }
    };
    exports.CustomUserAgentHook = CustomUserAgentHook;
  }
});

// node_modules/@mistralai/mistralai/hooks/deprecation_warning.js
var require_deprecation_warning = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/deprecation_warning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeprecationWarningHook = void 0;
    var HEADER_MODEL_DEPRECATION_TIMESTAMP = "x-model-deprecation-timestamp";
    var DeprecationWarningHook = class {
      afterSuccess(_, response) {
        if (response.headers.has(HEADER_MODEL_DEPRECATION_TIMESTAMP)) {
          response.clone().json().then((body) => {
            const model = body.model;
            console.warn(`WARNING: The model ${model} is deprecated and will be removed on ${response.headers.get(HEADER_MODEL_DEPRECATION_TIMESTAMP)}. Please refer to https://docs.mistral.ai/getting-started/models/#api-versioning for more information.`);
          });
        }
        return response;
      }
    };
    exports.DeprecationWarningHook = DeprecationWarningHook;
  }
});

// node_modules/@mistralai/mistralai/hooks/registration.js
var require_registration = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/registration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initHooks = initHooks;
    var custom_user_agent_1 = require_custom_user_agent();
    var deprecation_warning_1 = require_deprecation_warning();
    function initHooks(hooks) {
      const customUserAgentHook = new custom_user_agent_1.CustomUserAgentHook();
      hooks.registerBeforeRequestHook(customUserAgentHook);
      const deprecationWarningHook = new deprecation_warning_1.DeprecationWarningHook();
      hooks.registerAfterSuccessHook(deprecationWarningHook);
    }
  }
});

// node_modules/@mistralai/mistralai/hooks/hooks.js
var require_hooks = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/hooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDKHooks = void 0;
    var registration_js_1 = require_registration();
    var SDKHooks = class {
      constructor() {
        this.sdkInitHooks = [];
        this.beforeCreateRequestHooks = [];
        this.beforeRequestHooks = [];
        this.afterSuccessHooks = [];
        this.afterErrorHooks = [];
        (0, registration_js_1.initHooks)(this);
      }
      registerSDKInitHook(hook) {
        this.sdkInitHooks.push(hook);
      }
      registerBeforeCreateRequestHook(hook) {
        this.beforeCreateRequestHooks.push(hook);
      }
      registerBeforeRequestHook(hook) {
        this.beforeRequestHooks.push(hook);
      }
      registerAfterSuccessHook(hook) {
        this.afterSuccessHooks.push(hook);
      }
      registerAfterErrorHook(hook) {
        this.afterErrorHooks.push(hook);
      }
      sdkInit(opts) {
        return this.sdkInitHooks.reduce((opts2, hook) => hook.sdkInit(opts2), opts);
      }
      beforeCreateRequest(hookCtx, input) {
        let inp = input;
        for (const hook of this.beforeCreateRequestHooks) {
          inp = hook.beforeCreateRequest(hookCtx, inp);
        }
        return inp;
      }
      async beforeRequest(hookCtx, request) {
        let req = request;
        for (const hook of this.beforeRequestHooks) {
          req = await hook.beforeRequest(hookCtx, req);
        }
        return req;
      }
      async afterSuccess(hookCtx, response) {
        let res = response;
        for (const hook of this.afterSuccessHooks) {
          res = await hook.afterSuccess(hookCtx, res);
        }
        return res;
      }
      async afterError(hookCtx, response, error) {
        let res = response;
        let err = error;
        for (const hook of this.afterErrorHooks) {
          const result = await hook.afterError(hookCtx, res, err);
          res = result.response;
          err = result.error;
        }
        return { response: res, error: err };
      }
    };
    exports.SDKHooks = SDKHooks;
  }
});

// node_modules/@mistralai/mistralai/models/errors/httpclienterrors.js
var require_httpclienterrors = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/httpclienterrors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionError = exports.RequestTimeoutError = exports.RequestAbortedError = exports.InvalidRequestError = exports.UnexpectedClientError = exports.HTTPClientError = void 0;
    var HTTPClientError = class extends Error {
      constructor(message, opts) {
        let msg = message;
        if (opts === null || opts === void 0 ? void 0 : opts.cause) {
          msg += `: ${opts.cause}`;
        }
        super(msg, opts);
        this.name = "HTTPClientError";
        if (typeof this.cause === "undefined") {
          this.cause = opts === null || opts === void 0 ? void 0 : opts.cause;
        }
      }
    };
    exports.HTTPClientError = HTTPClientError;
    var UnexpectedClientError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "UnexpectedClientError";
      }
    };
    exports.UnexpectedClientError = UnexpectedClientError;
    var InvalidRequestError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "InvalidRequestError";
      }
    };
    exports.InvalidRequestError = InvalidRequestError;
    var RequestAbortedError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "RequestAbortedError";
      }
    };
    exports.RequestAbortedError = RequestAbortedError;
    var RequestTimeoutError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "RequestTimeoutError";
      }
    };
    exports.RequestTimeoutError = RequestTimeoutError;
    var ConnectionError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "ConnectionError";
      }
    };
    exports.ConnectionError = ConnectionError;
  }
});

// node_modules/@mistralai/mistralai/types/fp.js
var require_fp = __commonJS({
  "node_modules/@mistralai/mistralai/types/fp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OK = OK;
    exports.ERR = ERR;
    exports.unwrap = unwrap;
    exports.unwrapAsync = unwrapAsync;
    function OK(value) {
      return { ok: true, value };
    }
    function ERR(error) {
      return { ok: false, error };
    }
    function unwrap(r2) {
      if (!r2.ok) {
        throw r2.error;
      }
      return r2.value;
    }
    async function unwrapAsync(pr) {
      const r2 = await pr;
      if (!r2.ok) {
        throw r2.error;
      }
      return r2.value;
    }
  }
});

// node_modules/zod/lib/helpers/util.js
var require_util = __commonJS({
  "node_modules/zod/lib/helpers/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
    var util;
    (function(util2) {
      util2.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
          filtered[k] = obj[k];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (exports.util = util = {}));
    var objectUtil;
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (exports.objectUtil = objectUtil = {}));
    exports.ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    var getParsedType = (data) => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return exports.ZodParsedType.undefined;
        case "string":
          return exports.ZodParsedType.string;
        case "number":
          return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
          return exports.ZodParsedType.boolean;
        case "function":
          return exports.ZodParsedType.function;
        case "bigint":
          return exports.ZodParsedType.bigint;
        case "symbol":
          return exports.ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return exports.ZodParsedType.array;
          }
          if (data === null) {
            return exports.ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return exports.ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return exports.ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return exports.ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return exports.ZodParsedType.date;
          }
          return exports.ZodParsedType.object;
        default:
          return exports.ZodParsedType.unknown;
      }
    };
    exports.getParsedType = getParsedType;
  }
});

// node_modules/zod/lib/ZodError.js
var require_ZodError = __commonJS({
  "node_modules/zod/lib/ZodError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
    var util_1 = require_util();
    exports.ZodIssueCode = util_1.util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    var quotelessJson = (obj) => {
      const json2 = JSON.stringify(obj, null, 2);
      return json2.replace(/"([^"]+)":/g, "$1:");
    };
    exports.quotelessJson = quotelessJson;
    var ZodError = class extends Error {
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    exports.ZodError = ZodError;
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
  }
});

// node_modules/zod/lib/locales/en.js
var require_en = __commonJS({
  "node_modules/zod/lib/locales/en.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodError_1.ZodIssueCode.invalid_type:
          if (issue.received === util_1.ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodError_1.ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
          break;
        case ZodError_1.ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodError_1.ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodError_1.ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodError_1.ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodError_1.ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util_1.util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodError_1.ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodError_1.ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodError_1.ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util_1.util.assertNever(issue);
      }
      return { message };
    };
    exports.default = errorMap;
  }
});

// node_modules/zod/lib/errors.js
var require_errors = __commonJS({
  "node_modules/zod/lib/errors.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
    var en_1 = __importDefault(require_en());
    exports.defaultErrorMap = en_1.default;
    var overrideErrorMap = en_1.default;
    function setErrorMap(map) {
      overrideErrorMap = map;
    }
    exports.setErrorMap = setErrorMap;
    function getErrorMap() {
      return overrideErrorMap;
    }
    exports.getErrorMap = getErrorMap;
  }
});

// node_modules/zod/lib/helpers/parseUtil.js
var require_parseUtil = __commonJS({
  "node_modules/zod/lib/helpers/parseUtil.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
    var errors_1 = require_errors();
    var en_1 = __importDefault(require_en());
    var makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m) => !!m).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    exports.makeIssue = makeIssue;
    exports.EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
      const overrideMap = (0, errors_1.getErrorMap)();
      const issue = (0, exports.makeIssue)({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          // contextual error map is first priority
          ctx.schemaErrorMap,
          // then schema-bound map if available
          overrideMap,
          // then global override map
          overrideMap === en_1.default ? void 0 : en_1.default
          // then global default map
        ].filter((x) => !!x)
      });
      ctx.common.issues.push(issue);
    }
    exports.addIssueToContext = addIssueToContext;
    var ParseStatus = class {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return exports.INVALID;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return exports.INVALID;
          if (value.status === "aborted")
            return exports.INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    exports.ParseStatus = ParseStatus;
    exports.INVALID = Object.freeze({
      status: "aborted"
    });
    var DIRTY = (value) => ({ status: "dirty", value });
    exports.DIRTY = DIRTY;
    var OK = (value) => ({ status: "valid", value });
    exports.OK = OK;
    var isAborted = (x) => x.status === "aborted";
    exports.isAborted = isAborted;
    var isDirty = (x) => x.status === "dirty";
    exports.isDirty = isDirty;
    var isValid = (x) => x.status === "valid";
    exports.isValid = isValid;
    var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
    exports.isAsync = isAsync;
  }
});

// node_modules/zod/lib/helpers/typeAliases.js
var require_typeAliases = __commonJS({
  "node_modules/zod/lib/helpers/typeAliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/zod/lib/helpers/errorUtil.js
var require_errorUtil = __commonJS({
  "node_modules/zod/lib/helpers/errorUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorUtil = void 0;
    var errorUtil;
    (function(errorUtil2) {
      errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
    })(errorUtil || (exports.errorUtil = errorUtil = {}));
  }
});

// node_modules/zod/lib/types.js
var require_types = __commonJS({
  "node_modules/zod/lib/types.js"(exports) {
    "use strict";
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _ZodEnum_cache;
    var _ZodNativeEnum_cache;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.datetimeRegex = exports.ZodType = void 0;
    exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.discriminatedUnion = exports.date = void 0;
    var errors_1 = require_errors();
    var errorUtil_1 = require_errorUtil();
    var parseUtil_1 = require_parseUtil();
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var ParseInputLazyPath = class {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    var handleResult = (ctx, result) => {
      if ((0, parseUtil_1.isValid)(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError_1.ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams(params) {
      if (!params)
        return {};
      const { errorMap, invalid_type_error, required_error, description } = params;
      if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap)
        return { errorMap, description };
      const customMap = (iss, ctx) => {
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    var ZodType = class {
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return (0, util_1.getParsedType)(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: (0, util_1.getParsedType)(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new parseUtil_1.ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if ((0, parseUtil_1.isAsync)(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        const ctx = {
          common: {
            issues: [],
            async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      "~validate"(data) {
        var _a, _b;
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return (0, parseUtil_1.isValid)(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0, parseUtil_1.isValid)(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodError_1.ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: (data) => this["~validate"](data)
        };
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    exports.ZodType = ZodType;
    exports.Schema = ZodType;
    exports.ZodSchema = ZodType;
    var cuidRegex = /^c[^\s-]{8,}$/i;
    var cuid2Regex = /^[0-9a-z]+$/;
    var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    var nanoidRegex = /^[a-z0-9_-]{21}$/i;
    var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    var emojiRegex;
    var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    var dateRegex = new RegExp(`^${dateRegexSource}$`);
    function timeRegexSource(args) {
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
    }
    function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
    }
    function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    exports.datetimeRegex = datetimeRegex;
    function isValidIP(ip, version5) {
      if ((version5 === "v4" || !version5) && ipv4Regex.test(ip)) {
        return true;
      }
      if ((version5 === "v6" || !version5) && ipv6Regex.test(ip)) {
        return true;
      }
      return false;
    }
    function isValidJWT(jwt, alg) {
      if (!jwtRegex.test(jwt))
        return false;
      try {
        const [header] = jwt.split(".");
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null)
          return false;
        if (!decoded.typ || !decoded.alg)
          return false;
        if (alg && decoded.alg !== alg)
          return false;
        return true;
      } catch (_a) {
        return false;
      }
    }
    function isValidCidr(ip, version5) {
      if ((version5 === "v4" || !version5) && ipv4CidrRegex.test(ip)) {
        return true;
      }
      if ((version5 === "v6" || !version5) && ipv6CidrRegex.test(ip)) {
        return true;
      }
      return false;
    }
    var ZodString = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.string,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "email",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "emoji",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "uuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "nanoid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid2",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ulid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "regex",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "duration",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ip",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "jwt",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cidr",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodError_1.ZodIssueCode.invalid_string,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      base64url(message) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message) {
        return this.min(1, errorUtil_1.errorUtil.errToObj(message));
      }
      trim() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    exports.ZodString = ZodString;
    ZodString.create = (params) => {
      var _a;
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    var ZodNumber = class extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.number,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util_1.util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
      }
      get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          } else if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    };
    exports.ZodNumber = ZodNumber;
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    var ZodBigInt = class extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch (_a) {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    exports.ZodBigInt = ZodBigInt;
    ZodBigInt.create = (params) => {
      var _a;
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    var ZodBoolean = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodBoolean = ZodBoolean;
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    var ZodDate = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.date,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_date
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    };
    exports.ZodDate = ZodDate;
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    var ZodSymbol = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodSymbol = ZodSymbol;
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    var ZodUndefined = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodUndefined = ZodUndefined;
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    var ZodNull = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.null,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodNull = ZodNull;
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    var ZodAny = class extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodAny = ZodAny;
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    var ZodUnknown = class extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodUnknown = ZodUnknown;
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    var ZodNever = class extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.never,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
    };
    exports.ZodNever = ZodNever;
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    var ZodVoid = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.void,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodVoid = ZodVoid;
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    var ZodArray = class extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          })).then((result2) => {
            return parseUtil_1.ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return parseUtil_1.ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports.ZodArray = ZodArray;
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray) {
        return new ZodArray({
          ...schema._def,
          type: deepPartialify(schema.element)
        });
      } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      } else {
        return schema;
      }
    }
    var ZodObject = class extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util_1.util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") {
          } else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil_1.errorUtil.errToObj;
        return new ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c5, _d;
              const defaultError = (_c5 = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c5 !== void 0 ? _c5 : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index2) {
        return new ZodObject({
          ...this._def,
          catchall: index2
        });
      }
      pick(mask) {
        const shape = {};
        util_1.util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util_1.util.objectKeys(this.shape));
      }
    };
    exports.ZodObject = ZodObject;
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    var ZodUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    exports.ZodUnion = ZodUnion;
    ZodUnion.create = (types, params) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    var getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util_1.util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    };
    var ZodDiscriminatedUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    };
    exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
    function mergeValues(a, b) {
      const aType = (0, util_1.getParsedType)(a);
      const bType = (0, util_1.getParsedType)(b);
      if (a === b) {
        return { valid: true, data: a };
      } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
        const bKeys = util_1.util.objectKeys(b);
        const sharedKeys = util_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a[key], b[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
        if (a.length !== b.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index2 = 0; index2 < a.length; index2++) {
          const itemA = a[index2];
          const itemB = b[index2];
          const sharedValue = mergeValues(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
        return { valid: true, data: a };
      } else {
        return { valid: false };
      }
    }
    var ZodIntersection = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
            return parseUtil_1.INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_intersection_types
            });
            return parseUtil_1.INVALID;
          }
          if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    exports.ZodIntersection = ZodIntersection;
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    var ZodTuple = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return parseUtil_1.INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x) => !!x);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return parseUtil_1.ParseStatus.mergeArray(status, results);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new ZodTuple({
          ...this._def,
          rest
        });
      }
    };
    exports.ZodTuple = ZodTuple;
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    var ZodRecord = class extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    };
    exports.ZodRecord = ZodRecord;
    var ZodMap = class extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.map) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.map,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index2) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return parseUtil_1.INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    exports.ZodMap = ZodMap;
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    var ZodSet = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.set) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.set,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return parseUtil_1.INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message) {
        return new ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports.ZodSet = ZodSet;
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    var ZodFunction = class extends ZodType {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.function) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.function,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        function makeArgsIssue(args, error) {
          return (0, parseUtil_1.makeIssue)({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return (0, parseUtil_1.makeIssue)({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me = this;
          return (0, parseUtil_1.OK)(async function(...args) {
            const error = new ZodError_1.ZodError([]);
            const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
              error.addIssue(makeArgsIssue(args, e));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
              error.addIssue(makeReturnsIssue(result, e));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me = this;
          return (0, parseUtil_1.OK)(function(...args) {
            const parsedArgs = me._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    };
    exports.ZodFunction = ZodFunction;
    var ZodLazy = class extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    exports.ZodLazy = ZodLazy;
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    var ZodLiteral = class extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    exports.ZodLiteral = ZodLiteral;
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    function createZodEnum(values, params) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
      });
    }
    var ZodEnum = class extends ZodType {
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    exports.ZodEnum = ZodEnum;
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    var ZodNativeEnum = class extends ZodType {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    exports.ZodNativeEnum = ZodNativeEnum;
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    var ZodPromise = class extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.promise,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return (0, parseUtil_1.OK)(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    exports.ZodPromise = ZodPromise;
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    var ZodEffects = class extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            (0, parseUtil_1.addIssueToContext)(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return parseUtil_1.INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return parseUtil_1.INVALID;
              if (result.status === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              if (status.value === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return parseUtil_1.INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return parseUtil_1.INVALID;
            if (result.status === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            if (status.value === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return parseUtil_1.INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return parseUtil_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!(0, parseUtil_1.isValid)(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!(0, parseUtil_1.isValid)(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util_1.util.assertNever(effect);
      }
    };
    exports.ZodEffects = ZodEffects;
    exports.ZodTransformer = ZodEffects;
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    var ZodOptional = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.undefined) {
          return (0, parseUtil_1.OK)(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodOptional = ZodOptional;
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    var ZodNullable = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.null) {
          return (0, parseUtil_1.OK)(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodNullable = ZodNullable;
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    var ZodDefault = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === util_1.ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    exports.ZodDefault = ZodDefault;
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    var ZodCatch = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if ((0, parseUtil_1.isAsync)(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError_1.ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    exports.ZodCatch = ZodCatch;
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    var ZodNaN = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.nan,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    exports.ZodNaN = ZodNaN;
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    exports.BRAND = Symbol("zod_brand");
    var ZodBranded = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    exports.ZodBranded = ZodBranded;
    var ZodPipeline = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return (0, parseUtil_1.DIRTY)(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return parseUtil_1.INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b) {
        return new ZodPipeline({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    };
    exports.ZodPipeline = ZodPipeline;
    var ZodReadonly = class extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if ((0, parseUtil_1.isValid)(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return (0, parseUtil_1.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodReadonly = ZodReadonly;
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    function custom(check, params = {}, fatal) {
      if (check)
        return ZodAny.create().superRefine((data, ctx) => {
          var _a, _b;
          if (!check(data)) {
            const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
            const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            const p2 = typeof p === "string" ? { message: p } : p;
            ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
          }
        });
      return ZodAny.create();
    }
    exports.custom = custom;
    exports.late = {
      object: ZodObject.lazycreate
    };
    var ZodFirstPartyTypeKind;
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind = {}));
    var instanceOfType = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params);
    exports.instanceof = instanceOfType;
    var stringType = ZodString.create;
    exports.string = stringType;
    var numberType = ZodNumber.create;
    exports.number = numberType;
    var nanType = ZodNaN.create;
    exports.nan = nanType;
    var bigIntType = ZodBigInt.create;
    exports.bigint = bigIntType;
    var booleanType = ZodBoolean.create;
    exports.boolean = booleanType;
    var dateType = ZodDate.create;
    exports.date = dateType;
    var symbolType = ZodSymbol.create;
    exports.symbol = symbolType;
    var undefinedType = ZodUndefined.create;
    exports.undefined = undefinedType;
    var nullType = ZodNull.create;
    exports.null = nullType;
    var anyType = ZodAny.create;
    exports.any = anyType;
    var unknownType = ZodUnknown.create;
    exports.unknown = unknownType;
    var neverType = ZodNever.create;
    exports.never = neverType;
    var voidType = ZodVoid.create;
    exports.void = voidType;
    var arrayType = ZodArray.create;
    exports.array = arrayType;
    var objectType = ZodObject.create;
    exports.object = objectType;
    var strictObjectType = ZodObject.strictCreate;
    exports.strictObject = strictObjectType;
    var unionType = ZodUnion.create;
    exports.union = unionType;
    var discriminatedUnionType = ZodDiscriminatedUnion.create;
    exports.discriminatedUnion = discriminatedUnionType;
    var intersectionType = ZodIntersection.create;
    exports.intersection = intersectionType;
    var tupleType = ZodTuple.create;
    exports.tuple = tupleType;
    var recordType = ZodRecord.create;
    exports.record = recordType;
    var mapType = ZodMap.create;
    exports.map = mapType;
    var setType = ZodSet.create;
    exports.set = setType;
    var functionType = ZodFunction.create;
    exports.function = functionType;
    var lazyType = ZodLazy.create;
    exports.lazy = lazyType;
    var literalType = ZodLiteral.create;
    exports.literal = literalType;
    var enumType = ZodEnum.create;
    exports.enum = enumType;
    var nativeEnumType = ZodNativeEnum.create;
    exports.nativeEnum = nativeEnumType;
    var promiseType = ZodPromise.create;
    exports.promise = promiseType;
    var effectsType = ZodEffects.create;
    exports.effect = effectsType;
    exports.transformer = effectsType;
    var optionalType = ZodOptional.create;
    exports.optional = optionalType;
    var nullableType = ZodNullable.create;
    exports.nullable = nullableType;
    var preprocessType = ZodEffects.createWithPreprocess;
    exports.preprocess = preprocessType;
    var pipelineType = ZodPipeline.create;
    exports.pipeline = pipelineType;
    var ostring = () => stringType().optional();
    exports.ostring = ostring;
    var onumber = () => numberType().optional();
    exports.onumber = onumber;
    var oboolean = () => booleanType().optional();
    exports.oboolean = oboolean;
    exports.coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    };
    exports.NEVER = parseUtil_1.INVALID;
  }
});

// node_modules/zod/lib/external.js
var require_external = __commonJS({
  "node_modules/zod/lib/external.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors(), exports);
    __exportStar(require_parseUtil(), exports);
    __exportStar(require_typeAliases(), exports);
    __exportStar(require_util(), exports);
    __exportStar(require_types(), exports);
    __exportStar(require_ZodError(), exports);
  }
});

// node_modules/zod/lib/index.js
var require_lib = __commonJS({
  "node_modules/zod/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.z = void 0;
    var z = __importStar(require_external());
    exports.z = z;
    __exportStar(require_external(), exports);
    exports.default = z;
  }
});

// node_modules/@mistralai/mistralai/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/@mistralai/mistralai/lib/base64.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zodInbound = exports.zodOutbound = void 0;
    exports.bytesToBase64 = bytesToBase64;
    exports.bytesFromBase64 = bytesFromBase64;
    exports.stringToBytes = stringToBytes;
    exports.stringFromBytes = stringFromBytes;
    exports.stringToBase64 = stringToBase64;
    exports.stringFromBase64 = stringFromBase64;
    var z = __importStar(require_lib());
    function bytesToBase64(u8arr) {
      return btoa(String.fromCodePoint(...u8arr));
    }
    function bytesFromBase64(encoded) {
      return Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0));
    }
    function stringToBytes(str) {
      return new TextEncoder().encode(str);
    }
    function stringFromBytes(u8arr) {
      return new TextDecoder().decode(u8arr);
    }
    function stringToBase64(str) {
      return bytesToBase64(stringToBytes(str));
    }
    function stringFromBase64(b64str) {
      return stringFromBytes(bytesFromBase64(b64str));
    }
    exports.zodOutbound = z.instanceof(Uint8Array).or(z.string().transform(stringToBytes));
    exports.zodInbound = z.instanceof(Uint8Array).or(z.string().transform(bytesFromBase64));
  }
});

// node_modules/@mistralai/mistralai/lib/is-plain-object.js
var require_is_plain_object = __commonJS({
  "node_modules/@mistralai/mistralai/lib/is-plain-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPlainObject = isPlainObject;
    function isPlainObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
    }
  }
});

// node_modules/@mistralai/mistralai/lib/encodings.js
var require_encodings = __commonJS({
  "node_modules/@mistralai/mistralai/lib/encodings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeDeepObjectQuery = exports.encodePipeDelimitedQuery = exports.encodeSpaceDelimitedQuery = exports.encodeFormQuery = exports.encodeJSONQuery = exports.encodeSimple = exports.encodePipeDelimited = exports.encodeSpaceDelimited = exports.encodeForm = exports.EncodingError = void 0;
    exports.encodeMatrix = encodeMatrix;
    exports.encodeLabel = encodeLabel;
    exports.encodeBodyForm = encodeBodyForm;
    exports.encodeDeepObject = encodeDeepObject;
    exports.encodeDeepObjectObject = encodeDeepObjectObject;
    exports.encodeJSON = encodeJSON;
    exports.queryJoin = queryJoin;
    exports.queryEncoder = queryEncoder;
    var base64_js_1 = require_base64();
    var is_plain_object_js_1 = require_is_plain_object();
    var EncodingError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EncodingError";
      }
    };
    exports.EncodingError = EncodingError;
    function encodeMatrix(key, value, options) {
      let out = "";
      const pairs = (options === null || options === void 0 ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      const encodeString = (v) => {
        return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        let tmp = "";
        let encValue = "";
        if (pv === void 0) {
          return;
        } else if (Array.isArray(pv)) {
          encValue = mapDefined(pv, (v) => `${encodeValue(v)}`).join(",");
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          encValue = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
            return `,${encodeString(k)},${encodeValue(v)}`;
          }).join("");
          encValue = encValue.slice(1);
        } else {
          encValue = `${encodeValue(pv)}`;
        }
        const keyPrefix = encodeString(pk);
        tmp = `${keyPrefix}=${encValue}`;
        if (tmp === `${keyPrefix}=`) {
          tmp = tmp.slice(0, -1);
        }
        if (!tmp) {
          return;
        }
        out += `;${tmp}`;
      });
      return out;
    }
    function encodeLabel(key, value, options) {
      let out = "";
      const pairs = (options === null || options === void 0 ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      const encodeString = (v) => {
        return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        let encValue = "";
        if (pv === void 0) {
          return;
        } else if (Array.isArray(pv)) {
          encValue = mapDefined(pv, (v) => `${encodeValue(v)}`).join(".");
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          encValue = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
            return `.${encodeString(k)}.${encodeValue(v)}`;
          }).join("");
          encValue = encValue.slice(1);
        } else {
          const k = (options === null || options === void 0 ? void 0 : options.explode) && (0, is_plain_object_js_1.isPlainObject)(value) ? `${encodeString(pk)}=` : "";
          encValue = `${k}${encodeValue(pv)}`;
        }
        out += `.${encValue}`;
      });
      return out;
    }
    function formEncoder(sep) {
      return (key, value, options) => {
        let out = "";
        const pairs = (options === null || options === void 0 ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
        const encodeString = (v) => {
          return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
        };
        const encodeValue = (v) => encodeString(serializeValue(v));
        const encodedSep = encodeString(sep);
        pairs.forEach(([pk, pv]) => {
          let tmp = "";
          let encValue = "";
          if (pv === void 0) {
            return;
          } else if (Array.isArray(pv)) {
            encValue = mapDefined(pv, (v) => `${encodeValue(v)}`).join(encodedSep);
          } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
            encValue = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
              return `${encodeString(k)}${encodedSep}${encodeValue(v)}`;
            }).join(encodedSep);
          } else {
            encValue = `${encodeValue(pv)}`;
          }
          tmp = `${encodeString(pk)}=${encValue}`;
          if (!tmp || tmp === "=") {
            return;
          }
          out += `&${tmp}`;
        });
        return out.slice(1);
      };
    }
    exports.encodeForm = formEncoder(",");
    exports.encodeSpaceDelimited = formEncoder(" ");
    exports.encodePipeDelimited = formEncoder("|");
    function encodeBodyForm(key, value, options) {
      let out = "";
      const pairs = (options === null || options === void 0 ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      const encodeString = (v) => {
        return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        let tmp = "";
        let encValue = "";
        if (pv === void 0) {
          return;
        } else if (Array.isArray(pv)) {
          encValue = JSON.stringify(pv, jsonReplacer);
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          encValue = JSON.stringify(pv, jsonReplacer);
        } else {
          encValue = `${encodeValue(pv)}`;
        }
        tmp = `${encodeString(pk)}=${encValue}`;
        if (!tmp || tmp === "=") {
          return;
        }
        out += `&${tmp}`;
      });
      return out.slice(1);
    }
    function encodeDeepObject(key, value, options) {
      if (value == null) {
        return "";
      }
      if (!(0, is_plain_object_js_1.isPlainObject)(value)) {
        throw new EncodingError(`Value of parameter '${key}' which uses deepObject encoding must be an object`);
      }
      return encodeDeepObjectObject(key, value, options);
    }
    function encodeDeepObjectObject(key, value, options) {
      if (value == null) {
        return "";
      }
      let out = "";
      const encodeString = (v) => {
        return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      if (!(0, is_plain_object_js_1.isPlainObject)(value)) {
        throw new EncodingError(`Expected parameter '${key}' to be an object.`);
      }
      Object.entries(value).forEach(([ck, cv]) => {
        if (cv === void 0) {
          return;
        }
        const pk = `${key}[${ck}]`;
        if ((0, is_plain_object_js_1.isPlainObject)(cv)) {
          const objOut = encodeDeepObjectObject(pk, cv, options);
          out += `&${objOut}`;
          return;
        }
        const pairs = Array.isArray(cv) ? cv : [cv];
        let encoded = "";
        encoded = mapDefined(pairs, (v) => {
          return `${encodeString(pk)}=${encodeString(serializeValue(v))}`;
        }).join("&");
        out += `&${encoded}`;
      });
      return out.slice(1);
    }
    function encodeJSON(key, value, options) {
      if (typeof value === "undefined") {
        return "";
      }
      const encodeString = (v) => {
        return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encVal = encodeString(JSON.stringify(value, jsonReplacer));
      return (options === null || options === void 0 ? void 0 : options.explode) ? encVal : `${encodeString(key)}=${encVal}`;
    }
    var encodeSimple = (key, value, options) => {
      let out = "";
      const pairs = (options === null || options === void 0 ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      const encodeString = (v) => {
        return (options === null || options === void 0 ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        let tmp = "";
        if (pv === void 0) {
          return;
        } else if (Array.isArray(pv)) {
          tmp = mapDefined(pv, (v) => `${encodeValue(v)}`).join(",");
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          tmp = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
            return `,${encodeString(k)},${encodeValue(v)}`;
          }).join("");
          tmp = tmp.slice(1);
        } else {
          const k = (options === null || options === void 0 ? void 0 : options.explode) && (0, is_plain_object_js_1.isPlainObject)(value) ? `${pk}=` : "";
          tmp = `${k}${encodeValue(pv)}`;
        }
        if (!tmp) {
          return;
        }
        out += `,${tmp}`;
      });
      return out.slice(1);
    };
    exports.encodeSimple = encodeSimple;
    function explode(key, value) {
      if (Array.isArray(value)) {
        return value.map((v) => [key, v]);
      } else if ((0, is_plain_object_js_1.isPlainObject)(value)) {
        const o = value !== null && value !== void 0 ? value : {};
        return Object.entries(o).map(([k, v]) => [k, v]);
      } else {
        return [[key, value]];
      }
    }
    function serializeValue(value) {
      if (value === null) {
        return "null";
      } else if (typeof value === "undefined") {
        return "";
      } else if (value instanceof Date) {
        return value.toISOString();
      } else if (value instanceof Uint8Array) {
        return (0, base64_js_1.bytesToBase64)(value);
      } else if (typeof value === "object") {
        return JSON.stringify(value, jsonReplacer);
      }
      return `${value}`;
    }
    function jsonReplacer(_, value) {
      if (value instanceof Uint8Array) {
        return (0, base64_js_1.bytesToBase64)(value);
      } else {
        return value;
      }
    }
    function mapDefined(inp, mapper) {
      return inp.reduce((acc, v) => {
        if (v === void 0) {
          return acc;
        }
        const m = mapper(v);
        if (m === void 0) {
          return acc;
        }
        acc.push(m);
        return acc;
      }, []);
    }
    function mapDefinedEntries(inp, mapper) {
      const acc = [];
      for (const [k, v] of inp) {
        if (v === void 0) {
          continue;
        }
        const m = mapper([k, v]);
        if (m === void 0) {
          continue;
        }
        acc.push(m);
      }
      return acc;
    }
    function queryJoin(...args) {
      return args.filter(Boolean).join("&");
    }
    function queryEncoder(f) {
      const bulkEncode = function(values, options) {
        var _a, _b;
        const opts = {
          ...options,
          explode: (_a = options === null || options === void 0 ? void 0 : options.explode) !== null && _a !== void 0 ? _a : true,
          charEncoding: (_b = options === null || options === void 0 ? void 0 : options.charEncoding) !== null && _b !== void 0 ? _b : "percent"
        };
        const encoded = Object.entries(values).map(([key, value]) => {
          return f(key, value, opts);
        });
        return queryJoin(...encoded);
      };
      return bulkEncode;
    }
    exports.encodeJSONQuery = queryEncoder(encodeJSON);
    exports.encodeFormQuery = queryEncoder(exports.encodeForm);
    exports.encodeSpaceDelimitedQuery = queryEncoder(exports.encodeSpaceDelimited);
    exports.encodePipeDelimitedQuery = queryEncoder(exports.encodePipeDelimited);
    exports.encodeDeepObjectQuery = queryEncoder(encodeDeepObject);
  }
});

// node_modules/@mistralai/mistralai/lib/dlv.js
var require_dlv = __commonJS({
  "node_modules/@mistralai/mistralai/lib/dlv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dlv = dlv;
    function dlv(obj, key, def, p, undef) {
      key = Array.isArray(key) ? key : key.split(".");
      for (p = 0; p < key.length; p++) {
        const k = key[p];
        obj = k != null && obj ? obj[k] : undef;
      }
      return obj === undef ? def : obj;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/env.js
var require_env = __commonJS({
  "node_modules/@mistralai/mistralai/lib/env.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.envSchema = void 0;
    exports.env = env;
    exports.resetEnv = resetEnv;
    var dlv_js_1 = require_dlv();
    var z = __importStar(require_lib());
    exports.envSchema = z.object({
      MISTRAL_API_KEY: z.string().optional(),
      MISTRAL_DEBUG: z.coerce.boolean().optional()
    });
    var envMemo = void 0;
    function env() {
      var _a, _b;
      if (envMemo) {
        return envMemo;
      }
      envMemo = exports.envSchema.parse((_b = (_a = (0, dlv_js_1.dlv)(globalThis, "process.env")) !== null && _a !== void 0 ? _a : (0, dlv_js_1.dlv)(globalThis, "Deno.env")) !== null && _b !== void 0 ? _b : {});
      return envMemo;
    }
    function resetEnv() {
      envMemo = void 0;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/http.js
var require_http = __commonJS({
  "node_modules/@mistralai/mistralai/lib/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTTPClient = void 0;
    exports.matchContentType = matchContentType;
    exports.matchStatusCode = matchStatusCode;
    exports.matchResponse = matchResponse;
    exports.isConnectionError = isConnectionError;
    exports.isTimeoutError = isTimeoutError;
    exports.isAbortError = isAbortError;
    var DEFAULT_FETCHER = (input, init) => {
      if (init == null) {
        return fetch(input);
      } else {
        return fetch(input, init);
      }
    };
    var HTTPClient = class {
      constructor(options = {}) {
        this.options = options;
        this.requestHooks = [];
        this.requestErrorHooks = [];
        this.responseHooks = [];
        this.fetcher = options.fetcher || DEFAULT_FETCHER;
      }
      async request(request) {
        let req = request;
        for (const hook of this.requestHooks) {
          const nextRequest = await hook(req);
          if (nextRequest) {
            req = nextRequest;
          }
        }
        try {
          const res = await this.fetcher(req);
          for (const hook of this.responseHooks) {
            await hook(res, req);
          }
          return res;
        } catch (err) {
          for (const hook of this.requestErrorHooks) {
            await hook(err, req);
          }
          throw err;
        }
      }
      addHook(...args) {
        if (args[0] === "beforeRequest") {
          this.requestHooks.push(args[1]);
        } else if (args[0] === "requestError") {
          this.requestErrorHooks.push(args[1]);
        } else if (args[0] === "response") {
          this.responseHooks.push(args[1]);
        } else {
          throw new Error(`Invalid hook type: ${args[0]}`);
        }
        return this;
      }
      removeHook(...args) {
        let target;
        if (args[0] === "beforeRequest") {
          target = this.requestHooks;
        } else if (args[0] === "requestError") {
          target = this.requestErrorHooks;
        } else if (args[0] === "response") {
          target = this.responseHooks;
        } else {
          throw new Error(`Invalid hook type: ${args[0]}`);
        }
        const index2 = target.findIndex((v) => v === args[1]);
        if (index2 >= 0) {
          target.splice(index2, 1);
        }
        return this;
      }
      clone() {
        const child = new HTTPClient(this.options);
        child.requestHooks = this.requestHooks.slice();
        child.requestErrorHooks = this.requestErrorHooks.slice();
        child.responseHooks = this.responseHooks.slice();
        return child;
      }
    };
    exports.HTTPClient = HTTPClient;
    var mediaParamSeparator = /\s*;\s*/g;
    function matchContentType(response, pattern) {
      var _a;
      if (pattern === "*") {
        return true;
      }
      let contentType = ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.trim()) || "application/octet-stream";
      contentType = contentType.toLowerCase();
      const wantParts = pattern.toLowerCase().trim().split(mediaParamSeparator);
      const [wantType = "", ...wantParams] = wantParts;
      if (wantType.split("/").length !== 2) {
        return false;
      }
      const gotParts = contentType.split(mediaParamSeparator);
      const [gotType = "", ...gotParams] = gotParts;
      const [type = "", subtype = ""] = gotType.split("/");
      if (!type || !subtype) {
        return false;
      }
      if (wantType !== "*/*" && gotType !== wantType && `${type}/*` !== wantType && `*/${subtype}` !== wantType) {
        return false;
      }
      if (gotParams.length < wantParams.length) {
        return false;
      }
      const params = new Set(gotParams);
      for (const wantParam of wantParams) {
        if (!params.has(wantParam)) {
          return false;
        }
      }
      return true;
    }
    var codeRangeRE = new RegExp("^[0-9]xx$", "i");
    function matchStatusCode(response, codes) {
      const actual = `${response.status}`;
      const expectedCodes = Array.isArray(codes) ? codes : [codes];
      if (!expectedCodes.length) {
        return false;
      }
      return expectedCodes.some((ec) => {
        const code = `${ec}`;
        if (code === "default") {
          return true;
        }
        if (!codeRangeRE.test(`${code}`)) {
          return code === actual;
        }
        const expectFamily = code.charAt(0);
        if (!expectFamily) {
          throw new Error("Invalid status code range");
        }
        const actualFamily = actual.charAt(0);
        if (!actualFamily) {
          throw new Error(`Invalid response status code: ${actual}`);
        }
        return actualFamily === expectFamily;
      });
    }
    function matchResponse(response, code, contentTypePattern) {
      return matchStatusCode(response, code) && matchContentType(response, contentTypePattern);
    }
    function isConnectionError(err) {
      if (typeof err !== "object" || err == null) {
        return false;
      }
      const isBrowserErr = err instanceof TypeError && err.message.toLowerCase().startsWith("failed to fetch");
      const isNodeErr = err instanceof TypeError && err.message.toLowerCase().startsWith("fetch failed");
      const isBunErr = "name" in err && err.name === "ConnectionError";
      const isGenericErr = "code" in err && typeof err.code === "string" && err.code.toLowerCase() === "econnreset";
      return isBrowserErr || isNodeErr || isGenericErr || isBunErr;
    }
    function isTimeoutError(err) {
      if (typeof err !== "object" || err == null) {
        return false;
      }
      const isNative = "name" in err && err.name === "TimeoutError";
      const isLegacyNative = "code" in err && err.code === 23;
      const isGenericErr = "code" in err && typeof err.code === "string" && err.code.toLowerCase() === "econnaborted";
      return isNative || isLegacyNative || isGenericErr;
    }
    function isAbortError(err) {
      if (typeof err !== "object" || err == null) {
        return false;
      }
      const isNative = "name" in err && err.name === "AbortError";
      const isLegacyNative = "code" in err && err.code === 20;
      const isGenericErr = "code" in err && typeof err.code === "string" && err.code.toLowerCase() === "econnaborted";
      return isNative || isLegacyNative || isGenericErr;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/retries.js
var require_retries = __commonJS({
  "node_modules/@mistralai/mistralai/lib/retries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemporaryError = exports.PermanentError = void 0;
    exports.retry = retry;
    var http_js_1 = require_http();
    var defaultBackoff = {
      initialInterval: 500,
      maxInterval: 6e4,
      exponent: 1.5,
      maxElapsedTime: 36e5
    };
    var PermanentError = class extends Error {
      constructor(message, options) {
        let msg = message;
        if (options === null || options === void 0 ? void 0 : options.cause) {
          msg += `: ${options.cause}`;
        }
        super(msg, options);
        this.name = "PermanentError";
        if (typeof this.cause === "undefined") {
          this.cause = options === null || options === void 0 ? void 0 : options.cause;
        }
        Object.setPrototypeOf(this, PermanentError.prototype);
      }
    };
    exports.PermanentError = PermanentError;
    var TemporaryError = class extends Error {
      constructor(message, response) {
        super(message);
        this.response = response;
        this.name = "TemporaryError";
        Object.setPrototypeOf(this, TemporaryError.prototype);
      }
    };
    exports.TemporaryError = TemporaryError;
    async function retry(fetchFn, options) {
      var _a;
      switch (options.config.strategy) {
        case "backoff":
          return retryBackoff(wrapFetcher(fetchFn, {
            statusCodes: options.statusCodes,
            retryConnectionErrors: !!options.config.retryConnectionErrors
          }), (_a = options.config.backoff) !== null && _a !== void 0 ? _a : defaultBackoff);
        default:
          return await fetchFn();
      }
    }
    function wrapFetcher(fn, options) {
      return async () => {
        try {
          const res = await fn();
          if (isRetryableResponse(res, options.statusCodes)) {
            throw new TemporaryError("Response failed with retryable status code", res);
          }
          return res;
        } catch (err) {
          if (err instanceof TemporaryError) {
            throw err;
          }
          if (options.retryConnectionErrors && ((0, http_js_1.isTimeoutError)(err) || (0, http_js_1.isConnectionError)(err))) {
            throw err;
          }
          throw new PermanentError("Permanent error", { cause: err });
        }
      };
    }
    var codeRangeRE = new RegExp("^[0-9]xx$", "i");
    function isRetryableResponse(res, statusCodes) {
      const actual = `${res.status}`;
      return statusCodes.some((code) => {
        if (!codeRangeRE.test(code)) {
          return code === actual;
        }
        const expectFamily = code.charAt(0);
        if (!expectFamily) {
          throw new Error("Invalid status code range");
        }
        const actualFamily = actual.charAt(0);
        if (!actualFamily) {
          throw new Error(`Invalid response status code: ${actual}`);
        }
        return actualFamily === expectFamily;
      });
    }
    async function retryBackoff(fn, strategy) {
      const { maxElapsedTime, initialInterval, exponent, maxInterval } = strategy;
      const start = Date.now();
      let x = 0;
      while (true) {
        try {
          const res = await fn();
          return res;
        } catch (err) {
          if (err instanceof PermanentError) {
            throw err.cause;
          }
          const elapsed = Date.now() - start;
          if (elapsed > maxElapsedTime) {
            if (err instanceof TemporaryError) {
              return err.response;
            }
            throw err;
          }
          let retryInterval = 0;
          if (err instanceof TemporaryError) {
            retryInterval = retryIntervalFromResponse(err.response);
          }
          if (retryInterval <= 0) {
            retryInterval = initialInterval * Math.pow(x, exponent) + Math.random() * 1e3;
          }
          const d = Math.min(retryInterval, maxInterval);
          await delay(d);
          x++;
        }
      }
    }
    function retryIntervalFromResponse(res) {
      const retryVal = res.headers.get("retry-after") || "";
      if (!retryVal) {
        return 0;
      }
      const parsedNumber = Number(retryVal);
      if (Number.isInteger(parsedNumber)) {
        return parsedNumber * 1e3;
      }
      const parsedDate = Date.parse(retryVal);
      if (Number.isInteger(parsedDate)) {
        const deltaMS = parsedDate - Date.now();
        return deltaMS > 0 ? Math.ceil(deltaMS) : 0;
      }
      return 0;
    }
    async function delay(delay2) {
      return new Promise((resolve) => setTimeout(resolve, delay2));
    }
  }
});

// node_modules/@mistralai/mistralai/lib/sdks.js
var require_sdks = __commonJS({
  "node_modules/@mistralai/mistralai/lib/sdks.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ClientSDK_httpClient;
    var _ClientSDK_hooks;
    var _ClientSDK_logger;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientSDK = void 0;
    var hooks_js_1 = require_hooks();
    var httpclienterrors_js_1 = require_httpclienterrors();
    var fp_js_1 = require_fp();
    var base64_js_1 = require_base64();
    var config_js_1 = require_config();
    var encodings_js_1 = require_encodings();
    var env_js_1 = require_env();
    var http_js_1 = require_http();
    var retries_js_1 = require_retries();
    var gt = typeof globalThis === "undefined" ? null : globalThis;
    var webWorkerLike = typeof gt === "object" && gt != null && "importScripts" in gt && typeof gt["importScripts"] === "function";
    var isBrowserLike = webWorkerLike || typeof navigator !== "undefined" && "serviceWorker" in navigator || typeof window === "object" && typeof window.document !== "undefined";
    var ClientSDK = class {
      constructor(options = {}) {
        _ClientSDK_httpClient.set(this, void 0);
        _ClientSDK_hooks.set(this, void 0);
        _ClientSDK_logger.set(this, void 0);
        const opt = options;
        if (typeof opt === "object" && opt != null && "hooks" in opt && opt.hooks instanceof hooks_js_1.SDKHooks) {
          __classPrivateFieldSet(this, _ClientSDK_hooks, opt.hooks, "f");
        } else {
          __classPrivateFieldSet(this, _ClientSDK_hooks, new hooks_js_1.SDKHooks(), "f");
        }
        this._options = { ...options, hooks: __classPrivateFieldGet(this, _ClientSDK_hooks, "f") };
        const url = (0, config_js_1.serverURLFromOptions)(options);
        if (url) {
          url.pathname = url.pathname.replace(/\/+$/, "") + "/";
        }
        const { baseURL, client } = __classPrivateFieldGet(this, _ClientSDK_hooks, "f").sdkInit({
          baseURL: url,
          client: options.httpClient || new http_js_1.HTTPClient()
        });
        this._baseURL = baseURL;
        __classPrivateFieldSet(this, _ClientSDK_httpClient, client, "f");
        __classPrivateFieldSet(this, _ClientSDK_logger, options.debugLogger, "f");
        if (!__classPrivateFieldGet(this, _ClientSDK_logger, "f") && (0, env_js_1.env)().MISTRAL_DEBUG) {
          __classPrivateFieldSet(this, _ClientSDK_logger, console, "f");
        }
      }
      _createRequest(context, conf, options) {
        var _a, _b, _c5, _d;
        const { method, path, query, headers: opHeaders, security } = conf;
        const base = (_a = conf.baseURL) !== null && _a !== void 0 ? _a : this._baseURL;
        if (!base) {
          return (0, fp_js_1.ERR)(new httpclienterrors_js_1.InvalidRequestError("No base URL provided for operation"));
        }
        const reqURL = new URL(base);
        const inputURL = new URL(path, reqURL);
        if (path) {
          reqURL.pathname += inputURL.pathname.replace(/^\/+/, "");
        }
        let finalQuery = query || "";
        const secQuery = [];
        for (const [k, v] of Object.entries((security === null || security === void 0 ? void 0 : security.queryParams) || {})) {
          secQuery.push((0, encodings_js_1.encodeForm)(k, v, { charEncoding: "percent" }));
        }
        if (secQuery.length) {
          finalQuery += `&${secQuery.join("&")}`;
        }
        if (finalQuery) {
          const q = finalQuery.startsWith("&") ? finalQuery.slice(1) : finalQuery;
          reqURL.search = `?${q}`;
        }
        const headers = new Headers(opHeaders);
        const username = security === null || security === void 0 ? void 0 : security.basic.username;
        const password = security === null || security === void 0 ? void 0 : security.basic.password;
        if (username != null || password != null) {
          const encoded = (0, base64_js_1.stringToBase64)([username || "", password || ""].join(":"));
          headers.set("Authorization", `Basic ${encoded}`);
        }
        const securityHeaders = new Headers((security === null || security === void 0 ? void 0 : security.headers) || {});
        for (const [k, v] of securityHeaders) {
          headers.set(k, v);
        }
        let cookie = headers.get("cookie") || "";
        for (const [k, v] of Object.entries((security === null || security === void 0 ? void 0 : security.cookies) || {})) {
          cookie += `; ${k}=${v}`;
        }
        cookie = cookie.startsWith("; ") ? cookie.slice(2) : cookie;
        headers.set("cookie", cookie);
        const userHeaders = new Headers((_b = options === null || options === void 0 ? void 0 : options.fetchOptions) === null || _b === void 0 ? void 0 : _b.headers);
        for (const [k, v] of userHeaders) {
          headers.set(k, v);
        }
        if (!isBrowserLike) {
          headers.set((_c5 = conf.uaHeader) !== null && _c5 !== void 0 ? _c5 : "user-agent", config_js_1.SDK_METADATA.userAgent);
        }
        let fetchOptions = options === null || options === void 0 ? void 0 : options.fetchOptions;
        if (!(fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.signal) && conf.timeoutMs && conf.timeoutMs > 0) {
          const timeoutSignal = AbortSignal.timeout(conf.timeoutMs);
          if (!fetchOptions) {
            fetchOptions = { signal: timeoutSignal };
          } else {
            fetchOptions.signal = timeoutSignal;
          }
        }
        if (conf.body instanceof ReadableStream) {
          if (!fetchOptions) {
            fetchOptions = {
              // @ts-expect-error see https://github.com/node-fetch/node-fetch/issues/1769
              duplex: "half"
            };
          } else {
            fetchOptions.duplex = "half";
          }
        }
        let input;
        try {
          input = __classPrivateFieldGet(this, _ClientSDK_hooks, "f").beforeCreateRequest(context, {
            url: reqURL,
            options: {
              ...fetchOptions,
              body: (_d = conf.body) !== null && _d !== void 0 ? _d : null,
              headers,
              method
            }
          });
        } catch (err) {
          return (0, fp_js_1.ERR)(new httpclienterrors_js_1.UnexpectedClientError("Create request hook failed to execute", {
            cause: err
          }));
        }
        return (0, fp_js_1.OK)(new Request(input.url, input.options));
      }
      async _do(request, options) {
        const { context, errorCodes } = options;
        return (0, retries_js_1.retry)(async () => {
          const req = await __classPrivateFieldGet(this, _ClientSDK_hooks, "f").beforeRequest(context, request.clone());
          await logRequest(__classPrivateFieldGet(this, _ClientSDK_logger, "f"), req).catch((e) => {
            var _a;
            return (_a = __classPrivateFieldGet(this, _ClientSDK_logger, "f")) === null || _a === void 0 ? void 0 : _a.log("Failed to log request:", e);
          });
          let response = await __classPrivateFieldGet(this, _ClientSDK_httpClient, "f").request(req);
          try {
            if ((0, http_js_1.matchStatusCode)(response, errorCodes)) {
              const result = await __classPrivateFieldGet(this, _ClientSDK_hooks, "f").afterError(context, response, null);
              if (result.error) {
                throw result.error;
              }
              response = result.response || response;
            } else {
              response = await __classPrivateFieldGet(this, _ClientSDK_hooks, "f").afterSuccess(context, response);
            }
          } finally {
            await logResponse(__classPrivateFieldGet(this, _ClientSDK_logger, "f"), response, req).catch((e) => {
              var _a;
              return (_a = __classPrivateFieldGet(this, _ClientSDK_logger, "f")) === null || _a === void 0 ? void 0 : _a.log("Failed to log response:", e);
            });
          }
          return response;
        }, { config: options.retryConfig, statusCodes: options.retryCodes }).then((r2) => (0, fp_js_1.OK)(r2), (err) => {
          switch (true) {
            case (0, http_js_1.isAbortError)(err):
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.RequestAbortedError("Request aborted by client", {
                cause: err
              }));
            case (0, http_js_1.isTimeoutError)(err):
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.RequestTimeoutError("Request timed out", { cause: err }));
            case (0, http_js_1.isConnectionError)(err):
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.ConnectionError("Unable to make request", { cause: err }));
            default:
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.UnexpectedClientError("Unexpected HTTP client error", {
                cause: err
              }));
          }
        });
      }
    };
    exports.ClientSDK = ClientSDK;
    _ClientSDK_httpClient = /* @__PURE__ */ new WeakMap(), _ClientSDK_hooks = /* @__PURE__ */ new WeakMap(), _ClientSDK_logger = /* @__PURE__ */ new WeakMap();
    var jsonLikeContentTypeRE = /^application\/(?:.{0,100}\+)?json/;
    async function logRequest(logger, req) {
      if (!logger) {
        return;
      }
      const contentType = req.headers.get("content-type");
      const ct = (contentType === null || contentType === void 0 ? void 0 : contentType.split(";")[0]) || "";
      logger.group(`> Request: ${req.method} ${req.url}`);
      logger.group("Headers:");
      for (const [k, v] of req.headers.entries()) {
        logger.log(`${k}: ${v}`);
      }
      logger.groupEnd();
      logger.group("Body:");
      switch (true) {
        case jsonLikeContentTypeRE.test(ct):
          logger.log(await req.clone().json());
          break;
        case ct.startsWith("text/"):
          logger.log(await req.clone().text());
          break;
        case ct === "multipart/form-data": {
          const body = await req.clone().formData();
          for (const [k, v] of body) {
            const vlabel = v instanceof Blob ? "<Blob>" : v;
            logger.log(`${k}: ${vlabel}`);
          }
          break;
        }
        default:
          logger.log(`<${contentType}>`);
          break;
      }
      logger.groupEnd();
      logger.groupEnd();
    }
    async function logResponse(logger, res, req) {
      if (!logger) {
        return;
      }
      const contentType = res.headers.get("content-type");
      const ct = (contentType === null || contentType === void 0 ? void 0 : contentType.split(";")[0]) || "";
      logger.group(`< Response: ${req.method} ${req.url}`);
      logger.log("Status Code:", res.status, res.statusText);
      logger.group("Headers:");
      for (const [k, v] of res.headers.entries()) {
        logger.log(`${k}: ${v}`);
      }
      logger.groupEnd();
      logger.group("Body:");
      switch (true) {
        case ((0, http_js_1.matchContentType)(res, "application/json") || jsonLikeContentTypeRE.test(ct)):
          logger.log(await res.clone().json());
          break;
        case (0, http_js_1.matchContentType)(res, "text/event-stream"):
          logger.log(`<${contentType}>`);
          break;
        case (0, http_js_1.matchContentType)(res, "text/*"):
          logger.log(await res.clone().text());
          break;
        case (0, http_js_1.matchContentType)(res, "multipart/form-data"): {
          const body = await res.clone().formData();
          for (const [k, v] of body) {
            const vlabel = v instanceof Blob ? "<Blob>" : v;
            logger.log(`${k}: ${vlabel}`);
          }
          break;
        }
        default:
          logger.log(`<${contentType}>`);
          break;
      }
      logger.groupEnd();
      logger.groupEnd();
    }
  }
});

// node_modules/@mistralai/mistralai/models/errors/sdkerror.js
var require_sdkerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/sdkerror.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDKError = void 0;
    var SDKError = class extends Error {
      constructor(message, rawResponse, body = "") {
        const statusCode = rawResponse.status;
        const contentType = rawResponse.headers.get("content-type") || "";
        const bodyString = body.length > 0 ? `
${body}` : "";
        super(`${message}: Status ${statusCode} Content-Type ${contentType} Body ${bodyString}`);
        this.rawResponse = rawResponse;
        this.body = body;
        this.statusCode = statusCode;
        this.contentType = contentType;
        this.name = "SDKError";
      }
    };
    exports.SDKError = SDKError;
  }
});

// node_modules/@mistralai/mistralai/lib/event-streams.js
var require_event_streams = __commonJS({
  "node_modules/@mistralai/mistralai/lib/event-streams.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventStream = void 0;
    exports.discardSentinel = discardSentinel;
    var LF = 10;
    var CR = 13;
    var NEWLINE_CHARS = /* @__PURE__ */ new Set([LF, CR]);
    var MESSAGE_BOUNDARIES = [
      new Uint8Array([CR, LF, CR, LF]),
      new Uint8Array([CR, CR]),
      new Uint8Array([LF, LF])
    ];
    var EventStream = class {
      constructor(init) {
        this.stream = init.stream;
        this.decoder = init.decoder;
      }
      async *[Symbol.asyncIterator]() {
        const reader = this.stream.getReader();
        let buffer = new Uint8Array([]);
        let position = 0;
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done) {
              break;
            }
            const newBuffer = new Uint8Array(buffer.length + value.length);
            newBuffer.set(buffer);
            newBuffer.set(value, buffer.length);
            buffer = newBuffer;
            for (let i = position; i < buffer.length; i++) {
              const boundary = findBoundary(buffer, i);
              if (boundary == null) {
                continue;
              }
              const chunk = buffer.slice(position, i);
              position = i + boundary.length;
              const event = parseEvent(chunk, this.decoder);
              if (event != null) {
                yield event;
              }
            }
            if (position > 0) {
              buffer = buffer.slice(position);
              position = 0;
            }
          }
          if (buffer.length > 0) {
            const event = parseEvent(buffer, this.decoder);
            if (event != null) {
              yield event;
            }
          }
        } catch (e) {
          if (e instanceof Error && e.name === "AbortError") {
            return;
          }
          throw e;
        } finally {
          reader.releaseLock();
        }
      }
    };
    exports.EventStream = EventStream;
    function findBoundary(buffer, start) {
      const char1 = buffer[start];
      const char2 = buffer[start + 1];
      if (char1 == null || char2 == null || !NEWLINE_CHARS.has(char1) || !NEWLINE_CHARS.has(char2)) {
        return null;
      }
      for (const s of MESSAGE_BOUNDARIES) {
        const seq = peekSequence(start, buffer, s);
        if (seq != null) {
          return seq;
        }
      }
      return null;
    }
    function peekSequence(position, buffer, sequence) {
      if (sequence.length > buffer.length - position) {
        return null;
      }
      for (let i = 0; i < sequence.length; i++) {
        if (buffer[position + i] !== sequence[i]) {
          return null;
        }
      }
      return sequence;
    }
    function parseEvent(chunk, decoder) {
      var _a;
      if (!chunk.length) {
        return null;
      }
      const td = new TextDecoder();
      const raw = td.decode(chunk);
      const lines = raw.split(/\r?\n|\r/g);
      let publish = false;
      const rawEvent = {};
      for (const line of lines) {
        if (!line) {
          continue;
        }
        const delim = line.indexOf(":");
        if (delim === 0) {
          continue;
        }
        const field = delim > 0 ? line.substring(0, delim) : "";
        let value = delim > 0 ? line.substring(delim + 1) : "";
        if (value.charAt(0) === " ") {
          value = value.substring(1);
        }
        switch (field) {
          case "event": {
            publish = true;
            rawEvent.event = value;
            break;
          }
          case "data": {
            publish = true;
            (_a = rawEvent.data) !== null && _a !== void 0 ? _a : rawEvent.data = "";
            rawEvent.data += value + "\n";
            break;
          }
          case "id": {
            publish = true;
            rawEvent.id = value;
            break;
          }
          case "retry": {
            const r2 = parseInt(value, 10);
            if (!Number.isNaN(r2)) {
              publish = true;
              rawEvent.retry = r2;
            }
            break;
          }
        }
      }
      if (!publish) {
        return null;
      }
      if (rawEvent.data != null) {
        rawEvent.data = rawEvent.data.slice(0, -1);
      }
      return decoder(rawEvent);
    }
    function discardSentinel(stream, sentinel) {
      return new ReadableStream({
        async start(controller) {
          let buffer = new Uint8Array([]);
          let position = 0;
          let done = false;
          let discard = false;
          const rdr = stream.getReader();
          try {
            while (!done) {
              const result = await rdr.read();
              const value = result.value;
              done = done || result.done;
              if (discard) {
                continue;
              }
              if (typeof value === "undefined") {
                continue;
              }
              const newBuffer = new Uint8Array(buffer.length + value.length);
              newBuffer.set(buffer);
              newBuffer.set(value, buffer.length);
              buffer = newBuffer;
              for (let i = position; i < buffer.length; i++) {
                const boundary = findBoundary(buffer, i);
                if (boundary == null) {
                  continue;
                }
                const start = position;
                const chunk = buffer.slice(start, i);
                position = i + boundary.length;
                const event = parseEvent(chunk, id);
                if ((event === null || event === void 0 ? void 0 : event.data) === sentinel) {
                  controller.enqueue(buffer.slice(0, start));
                  discard = true;
                } else {
                  controller.enqueue(buffer.slice(0, position));
                  buffer = buffer.slice(position);
                  position = 0;
                }
              }
            }
          } catch (e) {
            controller.error(e);
          } finally {
            controller.close();
            rdr.releaseLock();
          }
        }
      });
    }
    function id(v) {
      return v;
    }
  }
});

// node_modules/@mistralai/mistralai/models/errors/sdkvalidationerror.js
var require_sdkvalidationerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/sdkvalidationerror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDKValidationError = void 0;
    exports.formatZodError = formatZodError;
    var z = __importStar(require_lib());
    var SDKValidationError = class extends Error {
      constructor(message, cause, rawValue) {
        super(`${message}: ${cause}`);
        this.name = "SDKValidationError";
        this.cause = cause;
        this.rawValue = rawValue;
        this.rawMessage = message;
      }
      /**
       * Return a pretty-formatted error message if the underlying validation error
       * is a ZodError or some other recognized error type, otherwise return the
       * default error message.
       */
      pretty() {
        if (this.cause instanceof z.ZodError) {
          return `${this.rawMessage}
${formatZodError(this.cause)}`;
        } else {
          return this.toString();
        }
      }
    };
    exports.SDKValidationError = SDKValidationError;
    function formatZodError(err, level = 0) {
      let pre = "  ".repeat(level);
      pre = level > 0 ? `\u2502${pre}` : pre;
      pre += " ".repeat(level);
      let message = "";
      const append = (str) => message += `
${pre}${str}`;
      const len = err.issues.length;
      const headline = len === 1 ? `${len} issue found` : `${len} issues found`;
      if (len) {
        append(`\u250C ${headline}:`);
      }
      for (const issue of err.issues) {
        let path = issue.path.join(".");
        path = path ? `<root>.${path}` : "<root>";
        append(`\u2502 \u2022 [${path}]: ${issue.message} (${issue.code})`);
        switch (issue.code) {
          case "invalid_literal":
          case "invalid_type": {
            append(`\u2502     Want: ${issue.expected}`);
            append(`\u2502      Got: ${issue.received}`);
            break;
          }
          case "unrecognized_keys": {
            append(`\u2502     Keys: ${issue.keys.join(", ")}`);
            break;
          }
          case "invalid_enum_value": {
            append(`\u2502     Allowed: ${issue.options.join(", ")}`);
            append(`\u2502         Got: ${issue.received}`);
            break;
          }
          case "invalid_union_discriminator": {
            append(`\u2502     Allowed: ${issue.options.join(", ")}`);
            break;
          }
          case "invalid_union": {
            const len2 = issue.unionErrors.length;
            append(`\u2502   \u2716\uFE0E Attemped to deserialize into one of ${len2} union members:`);
            issue.unionErrors.forEach((err2, i) => {
              append(`\u2502   \u2716\uFE0E Member ${i + 1} of ${len2}`);
              append(`${formatZodError(err2, level + 1)}`);
            });
          }
        }
      }
      if (err.issues.length) {
        append(`\u2514\u2500*`);
      }
      return message.slice(1);
    }
  }
});

// node_modules/@mistralai/mistralai/lib/schemas.js
var require_schemas = __commonJS({
  "node_modules/@mistralai/mistralai/lib/schemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = parse;
    exports.safeParse = safeParse;
    exports.collectExtraKeys = collectExtraKeys;
    var zod_1 = require_lib();
    var sdkvalidationerror_js_1 = require_sdkvalidationerror();
    var fp_js_1 = require_fp();
    function parse(rawValue, fn, errorMessage) {
      try {
        return fn(rawValue);
      } catch (err) {
        if (err instanceof zod_1.ZodError) {
          throw new sdkvalidationerror_js_1.SDKValidationError(errorMessage, err, rawValue);
        }
        throw err;
      }
    }
    function safeParse(rawValue, fn, errorMessage) {
      try {
        return (0, fp_js_1.OK)(fn(rawValue));
      } catch (err) {
        return (0, fp_js_1.ERR)(new sdkvalidationerror_js_1.SDKValidationError(errorMessage, err, rawValue));
      }
    }
    function collectExtraKeys(obj, extrasKey) {
      return obj.transform((val) => {
        const extras = {};
        const { shape } = obj;
        for (const [key] of Object.entries(val)) {
          if (key in shape) {
            continue;
          }
          const v = val[key];
          if (typeof v === "undefined") {
            continue;
          }
          extras[key] = v;
          delete val[key];
        }
        return { ...val, [extrasKey]: extras };
      });
    }
  }
});

// node_modules/@mistralai/mistralai/lib/matchers.js
var require_matchers = __commonJS({
  "node_modules/@mistralai/mistralai/lib/matchers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jsonErr = jsonErr;
    exports.json = json2;
    exports.textErr = textErr;
    exports.text = text;
    exports.bytesErr = bytesErr;
    exports.bytes = bytes;
    exports.streamErr = streamErr;
    exports.stream = stream;
    exports.sseErr = sseErr;
    exports.sse = sse;
    exports.nilErr = nilErr;
    exports.nil = nil;
    exports.fail = fail;
    exports.match = match;
    exports.unpackHeaders = unpackHeaders;
    exports.discardResponseBody = discardResponseBody;
    var sdkerror_js_1 = require_sdkerror();
    var event_streams_js_1 = require_event_streams();
    var http_js_1 = require_http();
    var is_plain_object_js_1 = require_is_plain_object();
    var schemas_js_1 = require_schemas();
    var DEFAULT_CONTENT_TYPES = {
      json: "application/json",
      text: "text/plain",
      bytes: "application/octet-stream",
      stream: "application/octet-stream",
      sse: "text/event-stream",
      nil: "*",
      fail: "*"
    };
    function jsonErr(codes, schema, options) {
      return { ...options, err: true, enc: "json", codes, schema };
    }
    function json2(codes, schema, options) {
      return { ...options, enc: "json", codes, schema };
    }
    function textErr(codes, schema, options) {
      return { ...options, err: true, enc: "text", codes, schema };
    }
    function text(codes, schema, options) {
      return { ...options, enc: "text", codes, schema };
    }
    function bytesErr(codes, schema, options) {
      return { ...options, err: true, enc: "bytes", codes, schema };
    }
    function bytes(codes, schema, options) {
      return { ...options, enc: "bytes", codes, schema };
    }
    function streamErr(codes, schema, options) {
      return { ...options, err: true, enc: "stream", codes, schema };
    }
    function stream(codes, schema, options) {
      return { ...options, enc: "stream", codes, schema };
    }
    function sseErr(codes, schema, options) {
      return { ...options, err: true, enc: "sse", codes, schema };
    }
    function sse(codes, schema, options) {
      return { ...options, enc: "sse", codes, schema };
    }
    function nilErr(codes, schema, options) {
      return { ...options, err: true, enc: "nil", codes, schema };
    }
    function nil(codes, schema, options) {
      return { ...options, enc: "nil", codes, schema };
    }
    function fail(codes) {
      return { enc: "fail", codes };
    }
    function match(...matchers) {
      return async function matchFunc(response, options) {
        let raw;
        let matcher;
        for (const match2 of matchers) {
          const { codes } = match2;
          const ctpattern = "ctype" in match2 ? match2.ctype : DEFAULT_CONTENT_TYPES[match2.enc];
          if (ctpattern && (0, http_js_1.matchResponse)(response, codes, ctpattern)) {
            matcher = match2;
            break;
          } else if (!ctpattern && (0, http_js_1.matchStatusCode)(response, codes)) {
            matcher = match2;
            break;
          }
        }
        if (!matcher) {
          const responseBody = await response.text();
          return [{
            ok: false,
            error: new sdkerror_js_1.SDKError("Unexpected API response status or content-type", response, responseBody)
          }, responseBody];
        }
        const encoding = matcher.enc;
        switch (encoding) {
          case "json":
            raw = await response.json();
            break;
          case "bytes":
            raw = new Uint8Array(await response.arrayBuffer());
            break;
          case "stream":
            raw = response.body;
            break;
          case "text":
            raw = await response.text();
            break;
          case "sse":
            raw = response.body && matcher.sseSentinel ? (0, event_streams_js_1.discardSentinel)(response.body, matcher.sseSentinel) : response.body;
            break;
          case "nil":
            raw = await discardResponseBody(response);
            break;
          case "fail":
            raw = await response.text();
            break;
          default:
            encoding;
            throw new Error(`Unsupported response type: ${encoding}`);
        }
        if (matcher.enc === "fail") {
          return [{
            ok: false,
            error: new sdkerror_js_1.SDKError("API error occurred", response, typeof raw === "string" ? raw : "")
          }, raw];
        }
        const resultKey = matcher.key || (options === null || options === void 0 ? void 0 : options.resultKey);
        let data;
        if ("err" in matcher) {
          data = {
            ...options === null || options === void 0 ? void 0 : options.extraFields,
            ...matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null,
            ...(0, is_plain_object_js_1.isPlainObject)(raw) ? raw : null
          };
        } else if (resultKey) {
          data = {
            ...options === null || options === void 0 ? void 0 : options.extraFields,
            ...matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null,
            [resultKey]: raw
          };
        } else if (matcher.hdrs) {
          data = {
            ...options === null || options === void 0 ? void 0 : options.extraFields,
            ...matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null,
            ...(0, is_plain_object_js_1.isPlainObject)(raw) ? raw : null
          };
        } else {
          data = raw;
        }
        if ("err" in matcher) {
          const result = (0, schemas_js_1.safeParse)(data, (v) => matcher.schema.parse(v), "Response validation failed");
          return [result.ok ? { ok: false, error: result.value } : result, raw];
        } else {
          return [
            (0, schemas_js_1.safeParse)(data, (v) => matcher.schema.parse(v), "Response validation failed"),
            raw
          ];
        }
      };
    }
    var headerValRE = /, */;
    function unpackHeaders(headers) {
      const out = {};
      for (const [k, v] of headers.entries()) {
        out[k] = v.split(headerValRE);
      }
      return out;
    }
    async function discardResponseBody(res) {
      var _a;
      const reader = (_a = res.body) === null || _a === void 0 ? void 0 : _a.getReader();
      if (reader == null) {
        return;
      }
      try {
        let done = false;
        while (!done) {
          const res2 = await reader.read();
          done = res2.done;
        }
      } finally {
        reader.releaseLock();
      }
    }
  }
});

// node_modules/@mistralai/mistralai/lib/security.js
var require_security = __commonJS({
  "node_modules/@mistralai/mistralai/lib/security.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SecurityError = exports.SecurityErrorCode = void 0;
    exports.resolveSecurity = resolveSecurity;
    exports.resolveGlobalSecurity = resolveGlobalSecurity;
    exports.extractSecurity = extractSecurity;
    var env_js_1 = require_env();
    var SecurityErrorCode;
    (function(SecurityErrorCode2) {
      SecurityErrorCode2["Incomplete"] = "incomplete";
      SecurityErrorCode2["UnrecognisedSecurityType"] = "unrecognized_security_type";
    })(SecurityErrorCode || (exports.SecurityErrorCode = SecurityErrorCode = {}));
    var SecurityError = class extends Error {
      constructor(code, message) {
        super(message);
        this.code = code;
        this.name = "SecurityError";
      }
      static incomplete() {
        return new SecurityError(SecurityErrorCode.Incomplete, "Security requirements not met in order to perform the operation");
      }
      static unrecognizedType(type) {
        return new SecurityError(SecurityErrorCode.UnrecognisedSecurityType, `Unrecognised security type: ${type}`);
      }
    };
    exports.SecurityError = SecurityError;
    function resolveSecurity(...options) {
      const state = {
        basic: { username: "", password: "" },
        headers: {},
        queryParams: {},
        cookies: {},
        oauth2: { type: "none" }
      };
      const option = options.find((opts) => {
        return opts.every((o) => {
          if (o.value == null) {
            return false;
          } else if (o.type === "http:basic") {
            return o.value.username != null || o.value.password != null;
          } else if (o.type === "http:custom") {
            return null;
          } else if (o.type === "oauth2:password") {
            return typeof o.value === "string" && !!o.value;
          } else if (o.type === "oauth2:client_credentials") {
            return o.value.clientID != null || o.value.clientSecret != null;
          } else if (typeof o.value === "string") {
            return !!o.value;
          } else {
            throw new Error(`Unrecognized security type: ${o.type} (value type: ${typeof o.value})`);
          }
        });
      });
      if (option == null) {
        return null;
      }
      option.forEach((spec) => {
        if (spec.value == null) {
          return;
        }
        const { type } = spec;
        switch (type) {
          case "apiKey:header":
            state.headers[spec.fieldName] = spec.value;
            break;
          case "apiKey:query":
            state.queryParams[spec.fieldName] = spec.value;
            break;
          case "apiKey:cookie":
            state.cookies[spec.fieldName] = spec.value;
            break;
          case "http:basic":
            applyBasic(state, spec);
            break;
          case "http:custom":
            break;
          case "http:bearer":
            applyBearer(state, spec);
            break;
          case "oauth2":
            applyBearer(state, spec);
            break;
          case "oauth2:password":
            applyBearer(state, spec);
            break;
          case "oauth2:client_credentials":
            break;
          case "openIdConnect":
            applyBearer(state, spec);
            break;
          default:
            spec;
            throw SecurityError.unrecognizedType(type);
        }
      });
      return state;
    }
    function applyBasic(state, spec) {
      if (spec.value == null) {
        return;
      }
      state.basic = spec.value;
    }
    function applyBearer(state, spec) {
      if (typeof spec.value !== "string" || !spec.value) {
        return;
      }
      let value = spec.value;
      if (value.slice(0, 7).toLowerCase() !== "bearer ") {
        value = `Bearer ${value}`;
      }
      state.headers[spec.fieldName] = value;
    }
    function resolveGlobalSecurity(security) {
      var _a;
      return resolveSecurity([
        {
          fieldName: "Authorization",
          type: "http:bearer",
          value: (_a = security === null || security === void 0 ? void 0 : security.apiKey) !== null && _a !== void 0 ? _a : (0, env_js_1.env)().MISTRAL_API_KEY
        }
      ]);
    }
    async function extractSecurity(sec) {
      if (sec == null) {
        return;
      }
      return typeof sec === "function" ? sec() : sec;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/primitives.js
var require_primitives = __commonJS({
  "node_modules/@mistralai/mistralai/lib/primitives.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.invariant = invariant;
    exports.remap = remap;
    exports.combineSignals = combineSignals;
    exports.abortSignalAny = abortSignalAny;
    var InvariantError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InvariantError";
      }
    };
    function invariant(condition, message) {
      if (!condition) {
        throw new InvariantError(message);
      }
    }
    function remap(inp, mappings) {
      let out = {};
      if (!Object.keys(mappings).length) {
        out = inp;
        return out;
      }
      for (const [k, v] of Object.entries(inp)) {
        const j = mappings[k];
        if (j === null) {
          continue;
        }
        out[j !== null && j !== void 0 ? j : k] = v;
      }
      return out;
    }
    function combineSignals(...signals) {
      const filtered = [];
      for (const signal of signals) {
        if (signal) {
          filtered.push(signal);
        }
      }
      switch (filtered.length) {
        case 0:
        case 1:
          return filtered[0] || null;
        default:
          if ("any" in AbortSignal && typeof AbortSignal.any === "function") {
            return AbortSignal.any(filtered);
          }
          return abortSignalAny(filtered);
      }
    }
    function abortSignalAny(signals) {
      const controller = new AbortController();
      const result = controller.signal;
      if (!signals.length) {
        return controller.signal;
      }
      if (signals.length === 1) {
        return signals[0] || controller.signal;
      }
      for (const signal of signals) {
        if (signal.aborted) {
          return signal;
        }
      }
      function abort() {
        controller.abort(this.reason);
        clean();
      }
      const signalRefs = [];
      function clean() {
        for (const signalRef of signalRefs) {
          const signal = signalRef.deref();
          if (signal) {
            signal.removeEventListener("abort", abort);
          }
        }
      }
      for (const signal of signals) {
        signalRefs.push(new WeakRef(signal));
        signal.addEventListener("abort", abort);
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/imageurl.js
var require_imageurl = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/imageurl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImageURL$ = exports.ImageURL$outboundSchema = exports.ImageURL$inboundSchema = void 0;
    exports.imageURLToJSON = imageURLToJSON;
    exports.imageURLFromJSON = imageURLFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.ImageURL$inboundSchema = z.object({
      url: z.string(),
      detail: z.nullable(z.string()).optional()
    });
    exports.ImageURL$outboundSchema = z.object({
      url: z.string(),
      detail: z.nullable(z.string()).optional()
    });
    var ImageURL$;
    (function(ImageURL$2) {
      ImageURL$2.inboundSchema = exports.ImageURL$inboundSchema;
      ImageURL$2.outboundSchema = exports.ImageURL$outboundSchema;
    })(ImageURL$ || (exports.ImageURL$ = ImageURL$ = {}));
    function imageURLToJSON(imageURL) {
      return JSON.stringify(exports.ImageURL$outboundSchema.parse(imageURL));
    }
    function imageURLFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ImageURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageURL' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/imageurlchunk.js
var require_imageurlchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/imageurlchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImageURLChunk$ = exports.ImageURLChunk$outboundSchema = exports.ImageURLChunk$inboundSchema = exports.ImageURLChunkType$ = exports.ImageURLChunkType$outboundSchema = exports.ImageURLChunkType$inboundSchema = exports.ImageURLChunkImageURL$ = exports.ImageURLChunkImageURL$outboundSchema = exports.ImageURLChunkImageURL$inboundSchema = exports.ImageURLChunkType = void 0;
    exports.imageURLChunkImageURLToJSON = imageURLChunkImageURLToJSON;
    exports.imageURLChunkImageURLFromJSON = imageURLChunkImageURLFromJSON;
    exports.imageURLChunkToJSON = imageURLChunkToJSON;
    exports.imageURLChunkFromJSON = imageURLChunkFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var imageurl_js_1 = require_imageurl();
    exports.ImageURLChunkType = {
      ImageUrl: "image_url"
    };
    exports.ImageURLChunkImageURL$inboundSchema = z.union([imageurl_js_1.ImageURL$inboundSchema, z.string()]);
    exports.ImageURLChunkImageURL$outboundSchema = z.union([imageurl_js_1.ImageURL$outboundSchema, z.string()]);
    var ImageURLChunkImageURL$;
    (function(ImageURLChunkImageURL$2) {
      ImageURLChunkImageURL$2.inboundSchema = exports.ImageURLChunkImageURL$inboundSchema;
      ImageURLChunkImageURL$2.outboundSchema = exports.ImageURLChunkImageURL$outboundSchema;
    })(ImageURLChunkImageURL$ || (exports.ImageURLChunkImageURL$ = ImageURLChunkImageURL$ = {}));
    function imageURLChunkImageURLToJSON(imageURLChunkImageURL) {
      return JSON.stringify(exports.ImageURLChunkImageURL$outboundSchema.parse(imageURLChunkImageURL));
    }
    function imageURLChunkImageURLFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ImageURLChunkImageURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageURLChunkImageURL' from JSON`);
    }
    exports.ImageURLChunkType$inboundSchema = z.nativeEnum(exports.ImageURLChunkType);
    exports.ImageURLChunkType$outboundSchema = exports.ImageURLChunkType$inboundSchema;
    var ImageURLChunkType$;
    (function(ImageURLChunkType$2) {
      ImageURLChunkType$2.inboundSchema = exports.ImageURLChunkType$inboundSchema;
      ImageURLChunkType$2.outboundSchema = exports.ImageURLChunkType$outboundSchema;
    })(ImageURLChunkType$ || (exports.ImageURLChunkType$ = ImageURLChunkType$ = {}));
    exports.ImageURLChunk$inboundSchema = z.object({
      image_url: z.union([imageurl_js_1.ImageURL$inboundSchema, z.string()]),
      type: exports.ImageURLChunkType$inboundSchema.default("image_url")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "image_url": "imageUrl"
      });
    });
    exports.ImageURLChunk$outboundSchema = z.object({
      imageUrl: z.union([imageurl_js_1.ImageURL$outboundSchema, z.string()]),
      type: exports.ImageURLChunkType$outboundSchema.default("image_url")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        imageUrl: "image_url"
      });
    });
    var ImageURLChunk$;
    (function(ImageURLChunk$2) {
      ImageURLChunk$2.inboundSchema = exports.ImageURLChunk$inboundSchema;
      ImageURLChunk$2.outboundSchema = exports.ImageURLChunk$outboundSchema;
    })(ImageURLChunk$ || (exports.ImageURLChunk$ = ImageURLChunk$ = {}));
    function imageURLChunkToJSON(imageURLChunk) {
      return JSON.stringify(exports.ImageURLChunk$outboundSchema.parse(imageURLChunk));
    }
    function imageURLChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ImageURLChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageURLChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/referencechunk.js
var require_referencechunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/referencechunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReferenceChunk$ = exports.ReferenceChunk$outboundSchema = exports.ReferenceChunk$inboundSchema = exports.ReferenceChunkType$ = exports.ReferenceChunkType$outboundSchema = exports.ReferenceChunkType$inboundSchema = exports.ReferenceChunkType = void 0;
    exports.referenceChunkToJSON = referenceChunkToJSON;
    exports.referenceChunkFromJSON = referenceChunkFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ReferenceChunkType = {
      Reference: "reference"
    };
    exports.ReferenceChunkType$inboundSchema = z.nativeEnum(exports.ReferenceChunkType);
    exports.ReferenceChunkType$outboundSchema = exports.ReferenceChunkType$inboundSchema;
    var ReferenceChunkType$;
    (function(ReferenceChunkType$2) {
      ReferenceChunkType$2.inboundSchema = exports.ReferenceChunkType$inboundSchema;
      ReferenceChunkType$2.outboundSchema = exports.ReferenceChunkType$outboundSchema;
    })(ReferenceChunkType$ || (exports.ReferenceChunkType$ = ReferenceChunkType$ = {}));
    exports.ReferenceChunk$inboundSchema = z.object({
      reference_ids: z.array(z.number().int()),
      type: exports.ReferenceChunkType$inboundSchema.default("reference")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "reference_ids": "referenceIds"
      });
    });
    exports.ReferenceChunk$outboundSchema = z.object({
      referenceIds: z.array(z.number().int()),
      type: exports.ReferenceChunkType$outboundSchema.default("reference")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        referenceIds: "reference_ids"
      });
    });
    var ReferenceChunk$;
    (function(ReferenceChunk$2) {
      ReferenceChunk$2.inboundSchema = exports.ReferenceChunk$inboundSchema;
      ReferenceChunk$2.outboundSchema = exports.ReferenceChunk$outboundSchema;
    })(ReferenceChunk$ || (exports.ReferenceChunk$ = ReferenceChunk$ = {}));
    function referenceChunkToJSON(referenceChunk) {
      return JSON.stringify(exports.ReferenceChunk$outboundSchema.parse(referenceChunk));
    }
    function referenceChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReferenceChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReferenceChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/textchunk.js
var require_textchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/textchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextChunk$ = exports.TextChunk$outboundSchema = exports.TextChunk$inboundSchema = exports.TextChunkType$ = exports.TextChunkType$outboundSchema = exports.TextChunkType$inboundSchema = exports.TextChunkType = void 0;
    exports.textChunkToJSON = textChunkToJSON;
    exports.textChunkFromJSON = textChunkFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.TextChunkType = {
      Text: "text"
    };
    exports.TextChunkType$inboundSchema = z.nativeEnum(exports.TextChunkType);
    exports.TextChunkType$outboundSchema = exports.TextChunkType$inboundSchema;
    var TextChunkType$;
    (function(TextChunkType$2) {
      TextChunkType$2.inboundSchema = exports.TextChunkType$inboundSchema;
      TextChunkType$2.outboundSchema = exports.TextChunkType$outboundSchema;
    })(TextChunkType$ || (exports.TextChunkType$ = TextChunkType$ = {}));
    exports.TextChunk$inboundSchema = z.object({
      text: z.string(),
      type: exports.TextChunkType$inboundSchema.default("text")
    });
    exports.TextChunk$outboundSchema = z.object({
      text: z.string(),
      type: exports.TextChunkType$outboundSchema.default("text")
    });
    var TextChunk$;
    (function(TextChunk$2) {
      TextChunk$2.inboundSchema = exports.TextChunk$inboundSchema;
      TextChunk$2.outboundSchema = exports.TextChunk$outboundSchema;
    })(TextChunk$ || (exports.TextChunk$ = TextChunk$ = {}));
    function textChunkToJSON(textChunk) {
      return JSON.stringify(exports.TextChunk$outboundSchema.parse(textChunk));
    }
    function textChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TextChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TextChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/contentchunk.js
var require_contentchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/contentchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContentChunk$ = exports.ContentChunk$outboundSchema = exports.ContentChunk$inboundSchema = void 0;
    exports.contentChunkToJSON = contentChunkToJSON;
    exports.contentChunkFromJSON = contentChunkFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var imageurlchunk_js_1 = require_imageurlchunk();
    var referencechunk_js_1 = require_referencechunk();
    var textchunk_js_1 = require_textchunk();
    exports.ContentChunk$inboundSchema = z.union([
      imageurlchunk_js_1.ImageURLChunk$inboundSchema.and(z.object({ type: z.literal("image_url") }).transform((v) => ({
        type: v.type
      }))),
      textchunk_js_1.TextChunk$inboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
      referencechunk_js_1.ReferenceChunk$inboundSchema.and(z.object({ type: z.literal("reference") }).transform((v) => ({
        type: v.type
      })))
    ]);
    exports.ContentChunk$outboundSchema = z.union([
      imageurlchunk_js_1.ImageURLChunk$outboundSchema.and(z.object({ type: z.literal("image_url") }).transform((v) => ({
        type: v.type
      }))),
      textchunk_js_1.TextChunk$outboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
      referencechunk_js_1.ReferenceChunk$outboundSchema.and(z.object({ type: z.literal("reference") }).transform((v) => ({
        type: v.type
      })))
    ]);
    var ContentChunk$;
    (function(ContentChunk$2) {
      ContentChunk$2.inboundSchema = exports.ContentChunk$inboundSchema;
      ContentChunk$2.outboundSchema = exports.ContentChunk$outboundSchema;
    })(ContentChunk$ || (exports.ContentChunk$ = ContentChunk$ = {}));
    function contentChunkToJSON(contentChunk) {
      return JSON.stringify(exports.ContentChunk$outboundSchema.parse(contentChunk));
    }
    function contentChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ContentChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/functioncall.js
var require_functioncall = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/functioncall.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionCall$ = exports.FunctionCall$outboundSchema = exports.FunctionCall$inboundSchema = exports.Arguments$ = exports.Arguments$outboundSchema = exports.Arguments$inboundSchema = void 0;
    exports.argumentsToJSON = argumentsToJSON;
    exports.argumentsFromJSON = argumentsFromJSON;
    exports.functionCallToJSON = functionCallToJSON;
    exports.functionCallFromJSON = functionCallFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.Arguments$inboundSchema = z.union([z.record(z.any()), z.string()]);
    exports.Arguments$outboundSchema = z.union([z.record(z.any()), z.string()]);
    var Arguments$;
    (function(Arguments$2) {
      Arguments$2.inboundSchema = exports.Arguments$inboundSchema;
      Arguments$2.outboundSchema = exports.Arguments$outboundSchema;
    })(Arguments$ || (exports.Arguments$ = Arguments$ = {}));
    function argumentsToJSON(value) {
      return JSON.stringify(exports.Arguments$outboundSchema.parse(value));
    }
    function argumentsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Arguments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Arguments' from JSON`);
    }
    exports.FunctionCall$inboundSchema = z.object({
      name: z.string(),
      arguments: z.union([z.record(z.any()), z.string()])
    });
    exports.FunctionCall$outboundSchema = z.object({
      name: z.string(),
      arguments: z.union([z.record(z.any()), z.string()])
    });
    var FunctionCall$;
    (function(FunctionCall$2) {
      FunctionCall$2.inboundSchema = exports.FunctionCall$inboundSchema;
      FunctionCall$2.outboundSchema = exports.FunctionCall$outboundSchema;
    })(FunctionCall$ || (exports.FunctionCall$ = FunctionCall$ = {}));
    function functionCallToJSON(functionCall) {
      return JSON.stringify(exports.FunctionCall$outboundSchema.parse(functionCall));
    }
    function functionCallFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FunctionCall$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionCall' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/types/enums.js
var require_enums = __commonJS({
  "node_modules/@mistralai/mistralai/types/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.catchUnrecognizedEnum = catchUnrecognizedEnum;
    function catchUnrecognizedEnum(value) {
      return value;
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/tooltypes.js
var require_tooltypes = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/tooltypes.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolTypes$ = exports.ToolTypes$outboundSchema = exports.ToolTypes$inboundSchema = exports.ToolTypes = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.ToolTypes = {
      Function: "function"
    };
    exports.ToolTypes$inboundSchema = z.union([
      z.nativeEnum(exports.ToolTypes),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.ToolTypes$outboundSchema = z.union([
      z.nativeEnum(exports.ToolTypes),
      z.string().and(z.custom())
    ]);
    var ToolTypes$;
    (function(ToolTypes$2) {
      ToolTypes$2.inboundSchema = exports.ToolTypes$inboundSchema;
      ToolTypes$2.outboundSchema = exports.ToolTypes$outboundSchema;
    })(ToolTypes$ || (exports.ToolTypes$ = ToolTypes$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/toolcall.js
var require_toolcall = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolcall.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolCall$ = exports.ToolCall$outboundSchema = exports.ToolCall$inboundSchema = void 0;
    exports.toolCallToJSON = toolCallToJSON;
    exports.toolCallFromJSON = toolCallFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var functioncall_js_1 = require_functioncall();
    var tooltypes_js_1 = require_tooltypes();
    exports.ToolCall$inboundSchema = z.object({
      id: z.string().default("null"),
      type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),
      function: functioncall_js_1.FunctionCall$inboundSchema
    });
    exports.ToolCall$outboundSchema = z.object({
      id: z.string().default("null"),
      type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),
      function: functioncall_js_1.FunctionCall$outboundSchema
    });
    var ToolCall$;
    (function(ToolCall$2) {
      ToolCall$2.inboundSchema = exports.ToolCall$inboundSchema;
      ToolCall$2.outboundSchema = exports.ToolCall$outboundSchema;
    })(ToolCall$ || (exports.ToolCall$ = ToolCall$ = {}));
    function toolCallToJSON(toolCall) {
      return JSON.stringify(exports.ToolCall$outboundSchema.parse(toolCall));
    }
    function toolCallFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolCall$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolCall' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/assistantmessage.js
var require_assistantmessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/assistantmessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssistantMessage$ = exports.AssistantMessage$outboundSchema = exports.AssistantMessage$inboundSchema = exports.AssistantMessageRole$ = exports.AssistantMessageRole$outboundSchema = exports.AssistantMessageRole$inboundSchema = exports.AssistantMessageContent$ = exports.AssistantMessageContent$outboundSchema = exports.AssistantMessageContent$inboundSchema = exports.AssistantMessageRole = void 0;
    exports.assistantMessageContentToJSON = assistantMessageContentToJSON;
    exports.assistantMessageContentFromJSON = assistantMessageContentFromJSON;
    exports.assistantMessageToJSON = assistantMessageToJSON;
    exports.assistantMessageFromJSON = assistantMessageFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    var toolcall_js_1 = require_toolcall();
    exports.AssistantMessageRole = {
      Assistant: "assistant"
    };
    exports.AssistantMessageContent$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.AssistantMessageContent$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var AssistantMessageContent$;
    (function(AssistantMessageContent$2) {
      AssistantMessageContent$2.inboundSchema = exports.AssistantMessageContent$inboundSchema;
      AssistantMessageContent$2.outboundSchema = exports.AssistantMessageContent$outboundSchema;
    })(AssistantMessageContent$ || (exports.AssistantMessageContent$ = AssistantMessageContent$ = {}));
    function assistantMessageContentToJSON(assistantMessageContent) {
      return JSON.stringify(exports.AssistantMessageContent$outboundSchema.parse(assistantMessageContent));
    }
    function assistantMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssistantMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssistantMessageContent' from JSON`);
    }
    exports.AssistantMessageRole$inboundSchema = z.nativeEnum(exports.AssistantMessageRole);
    exports.AssistantMessageRole$outboundSchema = exports.AssistantMessageRole$inboundSchema;
    var AssistantMessageRole$;
    (function(AssistantMessageRole$2) {
      AssistantMessageRole$2.inboundSchema = exports.AssistantMessageRole$inboundSchema;
      AssistantMessageRole$2.outboundSchema = exports.AssistantMessageRole$outboundSchema;
    })(AssistantMessageRole$ || (exports.AssistantMessageRole$ = AssistantMessageRole$ = {}));
    exports.AssistantMessage$inboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])).optional(),
      tool_calls: z.nullable(z.array(toolcall_js_1.ToolCall$inboundSchema)).optional(),
      prefix: z.boolean().default(false),
      role: exports.AssistantMessageRole$inboundSchema.default("assistant")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "tool_calls": "toolCalls"
      });
    });
    exports.AssistantMessage$outboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])).optional(),
      toolCalls: z.nullable(z.array(toolcall_js_1.ToolCall$outboundSchema)).optional(),
      prefix: z.boolean().default(false),
      role: exports.AssistantMessageRole$outboundSchema.default("assistant")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        toolCalls: "tool_calls"
      });
    });
    var AssistantMessage$;
    (function(AssistantMessage$2) {
      AssistantMessage$2.inboundSchema = exports.AssistantMessage$inboundSchema;
      AssistantMessage$2.outboundSchema = exports.AssistantMessage$outboundSchema;
    })(AssistantMessage$ || (exports.AssistantMessage$ = AssistantMessage$ = {}));
    function assistantMessageToJSON(assistantMessage) {
      return JSON.stringify(exports.AssistantMessage$outboundSchema.parse(assistantMessage));
    }
    function assistantMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssistantMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssistantMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/responseformats.js
var require_responseformats = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/responseformats.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResponseFormats$ = exports.ResponseFormats$outboundSchema = exports.ResponseFormats$inboundSchema = exports.ResponseFormats = void 0;
    var z = __importStar(require_lib());
    exports.ResponseFormats = {
      Text: "text",
      JsonObject: "json_object"
    };
    exports.ResponseFormats$inboundSchema = z.nativeEnum(exports.ResponseFormats);
    exports.ResponseFormats$outboundSchema = exports.ResponseFormats$inboundSchema;
    var ResponseFormats$;
    (function(ResponseFormats$2) {
      ResponseFormats$2.inboundSchema = exports.ResponseFormats$inboundSchema;
      ResponseFormats$2.outboundSchema = exports.ResponseFormats$outboundSchema;
    })(ResponseFormats$ || (exports.ResponseFormats$ = ResponseFormats$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/responseformat.js
var require_responseformat = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/responseformat.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResponseFormat$ = exports.ResponseFormat$outboundSchema = exports.ResponseFormat$inboundSchema = void 0;
    exports.responseFormatToJSON = responseFormatToJSON;
    exports.responseFormatFromJSON = responseFormatFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var responseformats_js_1 = require_responseformats();
    exports.ResponseFormat$inboundSchema = z.object({
      type: responseformats_js_1.ResponseFormats$inboundSchema.optional()
    });
    exports.ResponseFormat$outboundSchema = z.object({
      type: responseformats_js_1.ResponseFormats$outboundSchema.optional()
    });
    var ResponseFormat$;
    (function(ResponseFormat$2) {
      ResponseFormat$2.inboundSchema = exports.ResponseFormat$inboundSchema;
      ResponseFormat$2.outboundSchema = exports.ResponseFormat$outboundSchema;
    })(ResponseFormat$ || (exports.ResponseFormat$ = ResponseFormat$ = {}));
    function responseFormatToJSON(responseFormat) {
      return JSON.stringify(exports.ResponseFormat$outboundSchema.parse(responseFormat));
    }
    function responseFormatFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ResponseFormat$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseFormat' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/systemmessage.js
var require_systemmessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/systemmessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SystemMessage$ = exports.SystemMessage$outboundSchema = exports.SystemMessage$inboundSchema = exports.Role$ = exports.Role$outboundSchema = exports.Role$inboundSchema = exports.SystemMessageContent$ = exports.SystemMessageContent$outboundSchema = exports.SystemMessageContent$inboundSchema = exports.Role = void 0;
    exports.systemMessageContentToJSON = systemMessageContentToJSON;
    exports.systemMessageContentFromJSON = systemMessageContentFromJSON;
    exports.systemMessageToJSON = systemMessageToJSON;
    exports.systemMessageFromJSON = systemMessageFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var textchunk_js_1 = require_textchunk();
    exports.Role = {
      System: "system"
    };
    exports.SystemMessageContent$inboundSchema = z.union([z.string(), z.array(textchunk_js_1.TextChunk$inboundSchema)]);
    exports.SystemMessageContent$outboundSchema = z.union([z.string(), z.array(textchunk_js_1.TextChunk$outboundSchema)]);
    var SystemMessageContent$;
    (function(SystemMessageContent$2) {
      SystemMessageContent$2.inboundSchema = exports.SystemMessageContent$inboundSchema;
      SystemMessageContent$2.outboundSchema = exports.SystemMessageContent$outboundSchema;
    })(SystemMessageContent$ || (exports.SystemMessageContent$ = SystemMessageContent$ = {}));
    function systemMessageContentToJSON(systemMessageContent) {
      return JSON.stringify(exports.SystemMessageContent$outboundSchema.parse(systemMessageContent));
    }
    function systemMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SystemMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SystemMessageContent' from JSON`);
    }
    exports.Role$inboundSchema = z.nativeEnum(exports.Role);
    exports.Role$outboundSchema = exports.Role$inboundSchema;
    var Role$;
    (function(Role$2) {
      Role$2.inboundSchema = exports.Role$inboundSchema;
      Role$2.outboundSchema = exports.Role$outboundSchema;
    })(Role$ || (exports.Role$ = Role$ = {}));
    exports.SystemMessage$inboundSchema = z.object({
      content: z.union([z.string(), z.array(textchunk_js_1.TextChunk$inboundSchema)]),
      role: exports.Role$inboundSchema.default("system")
    });
    exports.SystemMessage$outboundSchema = z.object({
      content: z.union([z.string(), z.array(textchunk_js_1.TextChunk$outboundSchema)]),
      role: exports.Role$outboundSchema.default("system")
    });
    var SystemMessage$;
    (function(SystemMessage$2) {
      SystemMessage$2.inboundSchema = exports.SystemMessage$inboundSchema;
      SystemMessage$2.outboundSchema = exports.SystemMessage$outboundSchema;
    })(SystemMessage$ || (exports.SystemMessage$ = SystemMessage$ = {}));
    function systemMessageToJSON(systemMessage) {
      return JSON.stringify(exports.SystemMessage$outboundSchema.parse(systemMessage));
    }
    function systemMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SystemMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SystemMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/function.js
var require_function = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/function.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionT$ = exports.FunctionT$outboundSchema = exports.FunctionT$inboundSchema = void 0;
    exports.functionToJSON = functionToJSON;
    exports.functionFromJSON = functionFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.FunctionT$inboundSchema = z.object({
      name: z.string(),
      description: z.string().default(""),
      parameters: z.record(z.any())
    });
    exports.FunctionT$outboundSchema = z.object({
      name: z.string(),
      description: z.string().default(""),
      parameters: z.record(z.any())
    });
    var FunctionT$;
    (function(FunctionT$2) {
      FunctionT$2.inboundSchema = exports.FunctionT$inboundSchema;
      FunctionT$2.outboundSchema = exports.FunctionT$outboundSchema;
    })(FunctionT$ || (exports.FunctionT$ = FunctionT$ = {}));
    function functionToJSON(functionT) {
      return JSON.stringify(exports.FunctionT$outboundSchema.parse(functionT));
    }
    function functionFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FunctionT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionT' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/tool.js
var require_tool = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/tool.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tool$ = exports.Tool$outboundSchema = exports.Tool$inboundSchema = void 0;
    exports.toolToJSON = toolToJSON;
    exports.toolFromJSON = toolFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var function_js_1 = require_function();
    var tooltypes_js_1 = require_tooltypes();
    exports.Tool$inboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),
      function: function_js_1.FunctionT$inboundSchema
    });
    exports.Tool$outboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),
      function: function_js_1.FunctionT$outboundSchema
    });
    var Tool$;
    (function(Tool$2) {
      Tool$2.inboundSchema = exports.Tool$inboundSchema;
      Tool$2.outboundSchema = exports.Tool$outboundSchema;
    })(Tool$ || (exports.Tool$ = Tool$ = {}));
    function toolToJSON(tool) {
      return JSON.stringify(exports.Tool$outboundSchema.parse(tool));
    }
    function toolFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Tool$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Tool' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/functionname.js
var require_functionname = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/functionname.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionName$ = exports.FunctionName$outboundSchema = exports.FunctionName$inboundSchema = void 0;
    exports.functionNameToJSON = functionNameToJSON;
    exports.functionNameFromJSON = functionNameFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.FunctionName$inboundSchema = z.object({
      name: z.string()
    });
    exports.FunctionName$outboundSchema = z.object({
      name: z.string()
    });
    var FunctionName$;
    (function(FunctionName$2) {
      FunctionName$2.inboundSchema = exports.FunctionName$inboundSchema;
      FunctionName$2.outboundSchema = exports.FunctionName$outboundSchema;
    })(FunctionName$ || (exports.FunctionName$ = FunctionName$ = {}));
    function functionNameToJSON(functionName) {
      return JSON.stringify(exports.FunctionName$outboundSchema.parse(functionName));
    }
    function functionNameFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FunctionName$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionName' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/toolchoice.js
var require_toolchoice = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolchoice.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolChoice$ = exports.ToolChoice$outboundSchema = exports.ToolChoice$inboundSchema = void 0;
    exports.toolChoiceToJSON = toolChoiceToJSON;
    exports.toolChoiceFromJSON = toolChoiceFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var functionname_js_1 = require_functionname();
    var tooltypes_js_1 = require_tooltypes();
    exports.ToolChoice$inboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),
      function: functionname_js_1.FunctionName$inboundSchema
    });
    exports.ToolChoice$outboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),
      function: functionname_js_1.FunctionName$outboundSchema
    });
    var ToolChoice$;
    (function(ToolChoice$2) {
      ToolChoice$2.inboundSchema = exports.ToolChoice$inboundSchema;
      ToolChoice$2.outboundSchema = exports.ToolChoice$outboundSchema;
    })(ToolChoice$ || (exports.ToolChoice$ = ToolChoice$ = {}));
    function toolChoiceToJSON(toolChoice) {
      return JSON.stringify(exports.ToolChoice$outboundSchema.parse(toolChoice));
    }
    function toolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolChoice' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/toolchoiceenum.js
var require_toolchoiceenum = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolchoiceenum.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolChoiceEnum$ = exports.ToolChoiceEnum$outboundSchema = exports.ToolChoiceEnum$inboundSchema = exports.ToolChoiceEnum = void 0;
    var z = __importStar(require_lib());
    exports.ToolChoiceEnum = {
      Auto: "auto",
      None: "none",
      Any: "any",
      Required: "required"
    };
    exports.ToolChoiceEnum$inboundSchema = z.nativeEnum(exports.ToolChoiceEnum);
    exports.ToolChoiceEnum$outboundSchema = exports.ToolChoiceEnum$inboundSchema;
    var ToolChoiceEnum$;
    (function(ToolChoiceEnum$2) {
      ToolChoiceEnum$2.inboundSchema = exports.ToolChoiceEnum$inboundSchema;
      ToolChoiceEnum$2.outboundSchema = exports.ToolChoiceEnum$outboundSchema;
    })(ToolChoiceEnum$ || (exports.ToolChoiceEnum$ = ToolChoiceEnum$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/toolmessage.js
var require_toolmessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolmessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolMessage$ = exports.ToolMessage$outboundSchema = exports.ToolMessage$inboundSchema = exports.ToolMessageRole$ = exports.ToolMessageRole$outboundSchema = exports.ToolMessageRole$inboundSchema = exports.ToolMessageContent$ = exports.ToolMessageContent$outboundSchema = exports.ToolMessageContent$inboundSchema = exports.ToolMessageRole = void 0;
    exports.toolMessageContentToJSON = toolMessageContentToJSON;
    exports.toolMessageContentFromJSON = toolMessageContentFromJSON;
    exports.toolMessageToJSON = toolMessageToJSON;
    exports.toolMessageFromJSON = toolMessageFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    exports.ToolMessageRole = {
      Tool: "tool"
    };
    exports.ToolMessageContent$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.ToolMessageContent$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var ToolMessageContent$;
    (function(ToolMessageContent$2) {
      ToolMessageContent$2.inboundSchema = exports.ToolMessageContent$inboundSchema;
      ToolMessageContent$2.outboundSchema = exports.ToolMessageContent$outboundSchema;
    })(ToolMessageContent$ || (exports.ToolMessageContent$ = ToolMessageContent$ = {}));
    function toolMessageContentToJSON(toolMessageContent) {
      return JSON.stringify(exports.ToolMessageContent$outboundSchema.parse(toolMessageContent));
    }
    function toolMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolMessageContent' from JSON`);
    }
    exports.ToolMessageRole$inboundSchema = z.nativeEnum(exports.ToolMessageRole);
    exports.ToolMessageRole$outboundSchema = exports.ToolMessageRole$inboundSchema;
    var ToolMessageRole$;
    (function(ToolMessageRole$2) {
      ToolMessageRole$2.inboundSchema = exports.ToolMessageRole$inboundSchema;
      ToolMessageRole$2.outboundSchema = exports.ToolMessageRole$outboundSchema;
    })(ToolMessageRole$ || (exports.ToolMessageRole$ = ToolMessageRole$ = {}));
    exports.ToolMessage$inboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])),
      tool_call_id: z.nullable(z.string()).optional(),
      name: z.nullable(z.string()).optional(),
      role: exports.ToolMessageRole$inboundSchema.default("tool")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "tool_call_id": "toolCallId"
      });
    });
    exports.ToolMessage$outboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])),
      toolCallId: z.nullable(z.string()).optional(),
      name: z.nullable(z.string()).optional(),
      role: exports.ToolMessageRole$outboundSchema.default("tool")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        toolCallId: "tool_call_id"
      });
    });
    var ToolMessage$;
    (function(ToolMessage$2) {
      ToolMessage$2.inboundSchema = exports.ToolMessage$inboundSchema;
      ToolMessage$2.outboundSchema = exports.ToolMessage$outboundSchema;
    })(ToolMessage$ || (exports.ToolMessage$ = ToolMessage$ = {}));
    function toolMessageToJSON(toolMessage) {
      return JSON.stringify(exports.ToolMessage$outboundSchema.parse(toolMessage));
    }
    function toolMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/usermessage.js
var require_usermessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/usermessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserMessage$ = exports.UserMessage$outboundSchema = exports.UserMessage$inboundSchema = exports.UserMessageRole$ = exports.UserMessageRole$outboundSchema = exports.UserMessageRole$inboundSchema = exports.UserMessageContent$ = exports.UserMessageContent$outboundSchema = exports.UserMessageContent$inboundSchema = exports.UserMessageRole = void 0;
    exports.userMessageContentToJSON = userMessageContentToJSON;
    exports.userMessageContentFromJSON = userMessageContentFromJSON;
    exports.userMessageToJSON = userMessageToJSON;
    exports.userMessageFromJSON = userMessageFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    exports.UserMessageRole = {
      User: "user"
    };
    exports.UserMessageContent$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.UserMessageContent$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var UserMessageContent$;
    (function(UserMessageContent$2) {
      UserMessageContent$2.inboundSchema = exports.UserMessageContent$inboundSchema;
      UserMessageContent$2.outboundSchema = exports.UserMessageContent$outboundSchema;
    })(UserMessageContent$ || (exports.UserMessageContent$ = UserMessageContent$ = {}));
    function userMessageContentToJSON(userMessageContent) {
      return JSON.stringify(exports.UserMessageContent$outboundSchema.parse(userMessageContent));
    }
    function userMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserMessageContent' from JSON`);
    }
    exports.UserMessageRole$inboundSchema = z.nativeEnum(exports.UserMessageRole);
    exports.UserMessageRole$outboundSchema = exports.UserMessageRole$inboundSchema;
    var UserMessageRole$;
    (function(UserMessageRole$2) {
      UserMessageRole$2.inboundSchema = exports.UserMessageRole$inboundSchema;
      UserMessageRole$2.outboundSchema = exports.UserMessageRole$outboundSchema;
    })(UserMessageRole$ || (exports.UserMessageRole$ = UserMessageRole$ = {}));
    exports.UserMessage$inboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])),
      role: exports.UserMessageRole$inboundSchema.default("user")
    });
    exports.UserMessage$outboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])),
      role: exports.UserMessageRole$outboundSchema.default("user")
    });
    var UserMessage$;
    (function(UserMessage$2) {
      UserMessage$2.inboundSchema = exports.UserMessage$inboundSchema;
      UserMessage$2.outboundSchema = exports.UserMessage$outboundSchema;
    })(UserMessage$ || (exports.UserMessage$ = UserMessage$ = {}));
    function userMessageToJSON(userMessage) {
      return JSON.stringify(exports.UserMessage$outboundSchema.parse(userMessage));
    }
    function userMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/agentscompletionrequest.js
var require_agentscompletionrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/agentscompletionrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgentsCompletionRequest$ = exports.AgentsCompletionRequest$outboundSchema = exports.AgentsCompletionRequest$inboundSchema = exports.AgentsCompletionRequestToolChoice$ = exports.AgentsCompletionRequestToolChoice$outboundSchema = exports.AgentsCompletionRequestToolChoice$inboundSchema = exports.AgentsCompletionRequestMessages$ = exports.AgentsCompletionRequestMessages$outboundSchema = exports.AgentsCompletionRequestMessages$inboundSchema = exports.AgentsCompletionRequestStop$ = exports.AgentsCompletionRequestStop$outboundSchema = exports.AgentsCompletionRequestStop$inboundSchema = void 0;
    exports.agentsCompletionRequestStopToJSON = agentsCompletionRequestStopToJSON;
    exports.agentsCompletionRequestStopFromJSON = agentsCompletionRequestStopFromJSON;
    exports.agentsCompletionRequestMessagesToJSON = agentsCompletionRequestMessagesToJSON;
    exports.agentsCompletionRequestMessagesFromJSON = agentsCompletionRequestMessagesFromJSON;
    exports.agentsCompletionRequestToolChoiceToJSON = agentsCompletionRequestToolChoiceToJSON;
    exports.agentsCompletionRequestToolChoiceFromJSON = agentsCompletionRequestToolChoiceFromJSON;
    exports.agentsCompletionRequestToJSON = agentsCompletionRequestToJSON;
    exports.agentsCompletionRequestFromJSON = agentsCompletionRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.AgentsCompletionRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.AgentsCompletionRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var AgentsCompletionRequestStop$;
    (function(AgentsCompletionRequestStop$2) {
      AgentsCompletionRequestStop$2.inboundSchema = exports.AgentsCompletionRequestStop$inboundSchema;
      AgentsCompletionRequestStop$2.outboundSchema = exports.AgentsCompletionRequestStop$outboundSchema;
    })(AgentsCompletionRequestStop$ || (exports.AgentsCompletionRequestStop$ = AgentsCompletionRequestStop$ = {}));
    function agentsCompletionRequestStopToJSON(agentsCompletionRequestStop) {
      return JSON.stringify(exports.AgentsCompletionRequestStop$outboundSchema.parse(agentsCompletionRequestStop));
    }
    function agentsCompletionRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequestStop' from JSON`);
    }
    exports.AgentsCompletionRequestMessages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.AgentsCompletionRequestMessages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var AgentsCompletionRequestMessages$;
    (function(AgentsCompletionRequestMessages$2) {
      AgentsCompletionRequestMessages$2.inboundSchema = exports.AgentsCompletionRequestMessages$inboundSchema;
      AgentsCompletionRequestMessages$2.outboundSchema = exports.AgentsCompletionRequestMessages$outboundSchema;
    })(AgentsCompletionRequestMessages$ || (exports.AgentsCompletionRequestMessages$ = AgentsCompletionRequestMessages$ = {}));
    function agentsCompletionRequestMessagesToJSON(agentsCompletionRequestMessages) {
      return JSON.stringify(exports.AgentsCompletionRequestMessages$outboundSchema.parse(agentsCompletionRequestMessages));
    }
    function agentsCompletionRequestMessagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequestMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequestMessages' from JSON`);
    }
    exports.AgentsCompletionRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.AgentsCompletionRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var AgentsCompletionRequestToolChoice$;
    (function(AgentsCompletionRequestToolChoice$2) {
      AgentsCompletionRequestToolChoice$2.inboundSchema = exports.AgentsCompletionRequestToolChoice$inboundSchema;
      AgentsCompletionRequestToolChoice$2.outboundSchema = exports.AgentsCompletionRequestToolChoice$outboundSchema;
    })(AgentsCompletionRequestToolChoice$ || (exports.AgentsCompletionRequestToolChoice$ = AgentsCompletionRequestToolChoice$ = {}));
    function agentsCompletionRequestToolChoiceToJSON(agentsCompletionRequestToolChoice) {
      return JSON.stringify(exports.AgentsCompletionRequestToolChoice$outboundSchema.parse(agentsCompletionRequestToolChoice));
    }
    function agentsCompletionRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequestToolChoice' from JSON`);
    }
    exports.AgentsCompletionRequest$inboundSchema = z.object({
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      agent_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "agent_id": "agentId"
      });
    });
    exports.AgentsCompletionRequest$outboundSchema = z.object({
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      agentId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        agentId: "agent_id"
      });
    });
    var AgentsCompletionRequest$;
    (function(AgentsCompletionRequest$2) {
      AgentsCompletionRequest$2.inboundSchema = exports.AgentsCompletionRequest$inboundSchema;
      AgentsCompletionRequest$2.outboundSchema = exports.AgentsCompletionRequest$outboundSchema;
    })(AgentsCompletionRequest$ || (exports.AgentsCompletionRequest$ = AgentsCompletionRequest$ = {}));
    function agentsCompletionRequestToJSON(agentsCompletionRequest) {
      return JSON.stringify(exports.AgentsCompletionRequest$outboundSchema.parse(agentsCompletionRequest));
    }
    function agentsCompletionRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/agentscompletionstreamrequest.js
var require_agentscompletionstreamrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/agentscompletionstreamrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgentsCompletionStreamRequest$ = exports.AgentsCompletionStreamRequest$outboundSchema = exports.AgentsCompletionStreamRequest$inboundSchema = exports.AgentsCompletionStreamRequestToolChoice$ = exports.AgentsCompletionStreamRequestToolChoice$outboundSchema = exports.AgentsCompletionStreamRequestToolChoice$inboundSchema = exports.AgentsCompletionStreamRequestMessages$ = exports.AgentsCompletionStreamRequestMessages$outboundSchema = exports.AgentsCompletionStreamRequestMessages$inboundSchema = exports.AgentsCompletionStreamRequestStop$ = exports.AgentsCompletionStreamRequestStop$outboundSchema = exports.AgentsCompletionStreamRequestStop$inboundSchema = void 0;
    exports.agentsCompletionStreamRequestStopToJSON = agentsCompletionStreamRequestStopToJSON;
    exports.agentsCompletionStreamRequestStopFromJSON = agentsCompletionStreamRequestStopFromJSON;
    exports.agentsCompletionStreamRequestMessagesToJSON = agentsCompletionStreamRequestMessagesToJSON;
    exports.agentsCompletionStreamRequestMessagesFromJSON = agentsCompletionStreamRequestMessagesFromJSON;
    exports.agentsCompletionStreamRequestToolChoiceToJSON = agentsCompletionStreamRequestToolChoiceToJSON;
    exports.agentsCompletionStreamRequestToolChoiceFromJSON = agentsCompletionStreamRequestToolChoiceFromJSON;
    exports.agentsCompletionStreamRequestToJSON = agentsCompletionStreamRequestToJSON;
    exports.agentsCompletionStreamRequestFromJSON = agentsCompletionStreamRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.AgentsCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.AgentsCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var AgentsCompletionStreamRequestStop$;
    (function(AgentsCompletionStreamRequestStop$2) {
      AgentsCompletionStreamRequestStop$2.inboundSchema = exports.AgentsCompletionStreamRequestStop$inboundSchema;
      AgentsCompletionStreamRequestStop$2.outboundSchema = exports.AgentsCompletionStreamRequestStop$outboundSchema;
    })(AgentsCompletionStreamRequestStop$ || (exports.AgentsCompletionStreamRequestStop$ = AgentsCompletionStreamRequestStop$ = {}));
    function agentsCompletionStreamRequestStopToJSON(agentsCompletionStreamRequestStop) {
      return JSON.stringify(exports.AgentsCompletionStreamRequestStop$outboundSchema.parse(agentsCompletionStreamRequestStop));
    }
    function agentsCompletionStreamRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequestStop' from JSON`);
    }
    exports.AgentsCompletionStreamRequestMessages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.AgentsCompletionStreamRequestMessages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var AgentsCompletionStreamRequestMessages$;
    (function(AgentsCompletionStreamRequestMessages$2) {
      AgentsCompletionStreamRequestMessages$2.inboundSchema = exports.AgentsCompletionStreamRequestMessages$inboundSchema;
      AgentsCompletionStreamRequestMessages$2.outboundSchema = exports.AgentsCompletionStreamRequestMessages$outboundSchema;
    })(AgentsCompletionStreamRequestMessages$ || (exports.AgentsCompletionStreamRequestMessages$ = AgentsCompletionStreamRequestMessages$ = {}));
    function agentsCompletionStreamRequestMessagesToJSON(agentsCompletionStreamRequestMessages) {
      return JSON.stringify(exports.AgentsCompletionStreamRequestMessages$outboundSchema.parse(agentsCompletionStreamRequestMessages));
    }
    function agentsCompletionStreamRequestMessagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequestMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequestMessages' from JSON`);
    }
    exports.AgentsCompletionStreamRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.AgentsCompletionStreamRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var AgentsCompletionStreamRequestToolChoice$;
    (function(AgentsCompletionStreamRequestToolChoice$2) {
      AgentsCompletionStreamRequestToolChoice$2.inboundSchema = exports.AgentsCompletionStreamRequestToolChoice$inboundSchema;
      AgentsCompletionStreamRequestToolChoice$2.outboundSchema = exports.AgentsCompletionStreamRequestToolChoice$outboundSchema;
    })(AgentsCompletionStreamRequestToolChoice$ || (exports.AgentsCompletionStreamRequestToolChoice$ = AgentsCompletionStreamRequestToolChoice$ = {}));
    function agentsCompletionStreamRequestToolChoiceToJSON(agentsCompletionStreamRequestToolChoice) {
      return JSON.stringify(exports.AgentsCompletionStreamRequestToolChoice$outboundSchema.parse(agentsCompletionStreamRequestToolChoice));
    }
    function agentsCompletionStreamRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequestToolChoice' from JSON`);
    }
    exports.AgentsCompletionStreamRequest$inboundSchema = z.object({
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      agent_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "agent_id": "agentId"
      });
    });
    exports.AgentsCompletionStreamRequest$outboundSchema = z.object({
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      agentId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        agentId: "agent_id"
      });
    });
    var AgentsCompletionStreamRequest$;
    (function(AgentsCompletionStreamRequest$2) {
      AgentsCompletionStreamRequest$2.inboundSchema = exports.AgentsCompletionStreamRequest$inboundSchema;
      AgentsCompletionStreamRequest$2.outboundSchema = exports.AgentsCompletionStreamRequest$outboundSchema;
    })(AgentsCompletionStreamRequest$ || (exports.AgentsCompletionStreamRequest$ = AgentsCompletionStreamRequest$ = {}));
    function agentsCompletionStreamRequestToJSON(agentsCompletionStreamRequest) {
      return JSON.stringify(exports.AgentsCompletionStreamRequest$outboundSchema.parse(agentsCompletionStreamRequest));
    }
    function agentsCompletionStreamRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/apiendpoint.js
var require_apiendpoint = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/apiendpoint.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApiEndpoint$ = exports.ApiEndpoint$outboundSchema = exports.ApiEndpoint$inboundSchema = exports.ApiEndpoint = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.ApiEndpoint = {
      RootV1ChatCompletions: "/v1/chat/completions",
      RootV1Embeddings: "/v1/embeddings",
      RootV1FimCompletions: "/v1/fim/completions",
      RootV1Moderations: "/v1/moderations",
      RootV1ChatModerations: "/v1/chat/moderations"
    };
    exports.ApiEndpoint$inboundSchema = z.union([
      z.nativeEnum(exports.ApiEndpoint),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.ApiEndpoint$outboundSchema = z.union([
      z.nativeEnum(exports.ApiEndpoint),
      z.string().and(z.custom())
    ]);
    var ApiEndpoint$;
    (function(ApiEndpoint$2) {
      ApiEndpoint$2.inboundSchema = exports.ApiEndpoint$inboundSchema;
      ApiEndpoint$2.outboundSchema = exports.ApiEndpoint$outboundSchema;
    })(ApiEndpoint$ || (exports.ApiEndpoint$ = ApiEndpoint$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/archiveftmodelout.js
var require_archiveftmodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/archiveftmodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArchiveFTModelOut$ = exports.ArchiveFTModelOut$outboundSchema = exports.ArchiveFTModelOut$inboundSchema = exports.ArchiveFTModelOutObject$ = exports.ArchiveFTModelOutObject$outboundSchema = exports.ArchiveFTModelOutObject$inboundSchema = exports.ArchiveFTModelOutObject = void 0;
    exports.archiveFTModelOutToJSON = archiveFTModelOutToJSON;
    exports.archiveFTModelOutFromJSON = archiveFTModelOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.ArchiveFTModelOutObject = {
      Model: "model"
    };
    exports.ArchiveFTModelOutObject$inboundSchema = z.nativeEnum(exports.ArchiveFTModelOutObject);
    exports.ArchiveFTModelOutObject$outboundSchema = exports.ArchiveFTModelOutObject$inboundSchema;
    var ArchiveFTModelOutObject$;
    (function(ArchiveFTModelOutObject$2) {
      ArchiveFTModelOutObject$2.inboundSchema = exports.ArchiveFTModelOutObject$inboundSchema;
      ArchiveFTModelOutObject$2.outboundSchema = exports.ArchiveFTModelOutObject$outboundSchema;
    })(ArchiveFTModelOutObject$ || (exports.ArchiveFTModelOutObject$ = ArchiveFTModelOutObject$ = {}));
    exports.ArchiveFTModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(true)
    });
    exports.ArchiveFTModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(true)
    });
    var ArchiveFTModelOut$;
    (function(ArchiveFTModelOut$2) {
      ArchiveFTModelOut$2.inboundSchema = exports.ArchiveFTModelOut$inboundSchema;
      ArchiveFTModelOut$2.outboundSchema = exports.ArchiveFTModelOut$outboundSchema;
    })(ArchiveFTModelOut$ || (exports.ArchiveFTModelOut$ = ArchiveFTModelOut$ = {}));
    function archiveFTModelOutToJSON(archiveFTModelOut) {
      return JSON.stringify(exports.ArchiveFTModelOut$outboundSchema.parse(archiveFTModelOut));
    }
    function archiveFTModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ArchiveFTModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ArchiveFTModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/modelcapabilities.js
var require_modelcapabilities = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/modelcapabilities.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModelCapabilities$ = exports.ModelCapabilities$outboundSchema = exports.ModelCapabilities$inboundSchema = void 0;
    exports.modelCapabilitiesToJSON = modelCapabilitiesToJSON;
    exports.modelCapabilitiesFromJSON = modelCapabilitiesFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ModelCapabilities$inboundSchema = z.object({
      completion_chat: z.boolean().default(true),
      completion_fim: z.boolean().default(false),
      function_calling: z.boolean().default(true),
      fine_tuning: z.boolean().default(false),
      vision: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "completion_chat": "completionChat",
        "completion_fim": "completionFim",
        "function_calling": "functionCalling",
        "fine_tuning": "fineTuning"
      });
    });
    exports.ModelCapabilities$outboundSchema = z.object({
      completionChat: z.boolean().default(true),
      completionFim: z.boolean().default(false),
      functionCalling: z.boolean().default(true),
      fineTuning: z.boolean().default(false),
      vision: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        completionChat: "completion_chat",
        completionFim: "completion_fim",
        functionCalling: "function_calling",
        fineTuning: "fine_tuning"
      });
    });
    var ModelCapabilities$;
    (function(ModelCapabilities$2) {
      ModelCapabilities$2.inboundSchema = exports.ModelCapabilities$inboundSchema;
      ModelCapabilities$2.outboundSchema = exports.ModelCapabilities$outboundSchema;
    })(ModelCapabilities$ || (exports.ModelCapabilities$ = ModelCapabilities$ = {}));
    function modelCapabilitiesToJSON(modelCapabilities) {
      return JSON.stringify(exports.ModelCapabilities$outboundSchema.parse(modelCapabilities));
    }
    function modelCapabilitiesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ModelCapabilities$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ModelCapabilities' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/basemodelcard.js
var require_basemodelcard = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/basemodelcard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseModelCard$ = exports.BaseModelCard$outboundSchema = exports.BaseModelCard$inboundSchema = exports.Type$ = exports.Type$outboundSchema = exports.Type$inboundSchema = exports.Type = void 0;
    exports.baseModelCardToJSON = baseModelCardToJSON;
    exports.baseModelCardFromJSON = baseModelCardFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var modelcapabilities_js_1 = require_modelcapabilities();
    exports.Type = {
      Base: "base"
    };
    exports.Type$inboundSchema = z.nativeEnum(exports.Type);
    exports.Type$outboundSchema = exports.Type$inboundSchema;
    var Type$;
    (function(Type$2) {
      Type$2.inboundSchema = exports.Type$inboundSchema;
      Type$2.outboundSchema = exports.Type$outboundSchema;
    })(Type$ || (exports.Type$ = Type$ = {}));
    exports.BaseModelCard$inboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      owned_by: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$inboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      max_context_length: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      default_model_temperature: z.nullable(z.number()).optional(),
      type: z.literal("base").default("base")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "owned_by": "ownedBy",
        "max_context_length": "maxContextLength",
        "default_model_temperature": "defaultModelTemperature"
      });
    });
    exports.BaseModelCard$outboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      ownedBy: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$outboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      maxContextLength: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      defaultModelTemperature: z.nullable(z.number()).optional(),
      type: z.literal("base").default("base")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        ownedBy: "owned_by",
        maxContextLength: "max_context_length",
        defaultModelTemperature: "default_model_temperature"
      });
    });
    var BaseModelCard$;
    (function(BaseModelCard$2) {
      BaseModelCard$2.inboundSchema = exports.BaseModelCard$inboundSchema;
      BaseModelCard$2.outboundSchema = exports.BaseModelCard$outboundSchema;
    })(BaseModelCard$ || (exports.BaseModelCard$ = BaseModelCard$ = {}));
    function baseModelCardToJSON(baseModelCard) {
      return JSON.stringify(exports.BaseModelCard$outboundSchema.parse(baseModelCard));
    }
    function baseModelCardFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BaseModelCard$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BaseModelCard' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batcherror.js
var require_batcherror = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batcherror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchError$ = exports.BatchError$outboundSchema = exports.BatchError$inboundSchema = void 0;
    exports.batchErrorToJSON = batchErrorToJSON;
    exports.batchErrorFromJSON = batchErrorFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.BatchError$inboundSchema = z.object({
      message: z.string(),
      count: z.number().int().default(1)
    });
    exports.BatchError$outboundSchema = z.object({
      message: z.string(),
      count: z.number().int().default(1)
    });
    var BatchError$;
    (function(BatchError$2) {
      BatchError$2.inboundSchema = exports.BatchError$inboundSchema;
      BatchError$2.outboundSchema = exports.BatchError$outboundSchema;
    })(BatchError$ || (exports.BatchError$ = BatchError$ = {}));
    function batchErrorToJSON(batchError) {
      return JSON.stringify(exports.BatchError$outboundSchema.parse(batchError));
    }
    function batchErrorFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchError' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobin.js
var require_batchjobin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobIn$ = exports.BatchJobIn$outboundSchema = exports.BatchJobIn$inboundSchema = void 0;
    exports.batchJobInToJSON = batchJobInToJSON;
    exports.batchJobInFromJSON = batchJobInFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var apiendpoint_js_1 = require_apiendpoint();
    exports.BatchJobIn$inboundSchema = z.object({
      input_files: z.array(z.string()),
      endpoint: apiendpoint_js_1.ApiEndpoint$inboundSchema,
      model: z.string(),
      metadata: z.nullable(z.record(z.string())).optional(),
      timeout_hours: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input_files": "inputFiles",
        "timeout_hours": "timeoutHours"
      });
    });
    exports.BatchJobIn$outboundSchema = z.object({
      inputFiles: z.array(z.string()),
      endpoint: apiendpoint_js_1.ApiEndpoint$outboundSchema,
      model: z.string(),
      metadata: z.nullable(z.record(z.string())).optional(),
      timeoutHours: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputFiles: "input_files",
        timeoutHours: "timeout_hours"
      });
    });
    var BatchJobIn$;
    (function(BatchJobIn$2) {
      BatchJobIn$2.inboundSchema = exports.BatchJobIn$inboundSchema;
      BatchJobIn$2.outboundSchema = exports.BatchJobIn$outboundSchema;
    })(BatchJobIn$ || (exports.BatchJobIn$ = BatchJobIn$ = {}));
    function batchJobInToJSON(batchJobIn) {
      return JSON.stringify(exports.BatchJobIn$outboundSchema.parse(batchJobIn));
    }
    function batchJobInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchJobIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchJobIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobstatus.js
var require_batchjobstatus = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobstatus.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobStatus$ = exports.BatchJobStatus$outboundSchema = exports.BatchJobStatus$inboundSchema = exports.BatchJobStatus = void 0;
    var z = __importStar(require_lib());
    exports.BatchJobStatus = {
      Queued: "QUEUED",
      Running: "RUNNING",
      Success: "SUCCESS",
      Failed: "FAILED",
      TimeoutExceeded: "TIMEOUT_EXCEEDED",
      CancellationRequested: "CANCELLATION_REQUESTED",
      Cancelled: "CANCELLED"
    };
    exports.BatchJobStatus$inboundSchema = z.nativeEnum(exports.BatchJobStatus);
    exports.BatchJobStatus$outboundSchema = exports.BatchJobStatus$inboundSchema;
    var BatchJobStatus$;
    (function(BatchJobStatus$2) {
      BatchJobStatus$2.inboundSchema = exports.BatchJobStatus$inboundSchema;
      BatchJobStatus$2.outboundSchema = exports.BatchJobStatus$outboundSchema;
    })(BatchJobStatus$ || (exports.BatchJobStatus$ = BatchJobStatus$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobout.js
var require_batchjobout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobOut$ = exports.BatchJobOut$outboundSchema = exports.BatchJobOut$inboundSchema = exports.BatchJobOutObject$ = exports.BatchJobOutObject$outboundSchema = exports.BatchJobOutObject$inboundSchema = exports.BatchJobOutObject = void 0;
    exports.batchJobOutToJSON = batchJobOutToJSON;
    exports.batchJobOutFromJSON = batchJobOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var batcherror_js_1 = require_batcherror();
    var batchjobstatus_js_1 = require_batchjobstatus();
    exports.BatchJobOutObject = {
      Batch: "batch"
    };
    exports.BatchJobOutObject$inboundSchema = z.nativeEnum(exports.BatchJobOutObject);
    exports.BatchJobOutObject$outboundSchema = exports.BatchJobOutObject$inboundSchema;
    var BatchJobOutObject$;
    (function(BatchJobOutObject$2) {
      BatchJobOutObject$2.inboundSchema = exports.BatchJobOutObject$inboundSchema;
      BatchJobOutObject$2.outboundSchema = exports.BatchJobOutObject$outboundSchema;
    })(BatchJobOutObject$ || (exports.BatchJobOutObject$ = BatchJobOutObject$ = {}));
    exports.BatchJobOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("batch").default("batch"),
      input_files: z.array(z.string()),
      metadata: z.nullable(z.record(z.any())).optional(),
      endpoint: z.string(),
      model: z.string(),
      output_file: z.nullable(z.string()).optional(),
      error_file: z.nullable(z.string()).optional(),
      errors: z.array(batcherror_js_1.BatchError$inboundSchema),
      status: batchjobstatus_js_1.BatchJobStatus$inboundSchema,
      created_at: z.number().int(),
      total_requests: z.number().int(),
      completed_requests: z.number().int(),
      succeeded_requests: z.number().int(),
      failed_requests: z.number().int(),
      started_at: z.nullable(z.number().int()).optional(),
      completed_at: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input_files": "inputFiles",
        "output_file": "outputFile",
        "error_file": "errorFile",
        "created_at": "createdAt",
        "total_requests": "totalRequests",
        "completed_requests": "completedRequests",
        "succeeded_requests": "succeededRequests",
        "failed_requests": "failedRequests",
        "started_at": "startedAt",
        "completed_at": "completedAt"
      });
    });
    exports.BatchJobOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("batch").default("batch"),
      inputFiles: z.array(z.string()),
      metadata: z.nullable(z.record(z.any())).optional(),
      endpoint: z.string(),
      model: z.string(),
      outputFile: z.nullable(z.string()).optional(),
      errorFile: z.nullable(z.string()).optional(),
      errors: z.array(batcherror_js_1.BatchError$outboundSchema),
      status: batchjobstatus_js_1.BatchJobStatus$outboundSchema,
      createdAt: z.number().int(),
      totalRequests: z.number().int(),
      completedRequests: z.number().int(),
      succeededRequests: z.number().int(),
      failedRequests: z.number().int(),
      startedAt: z.nullable(z.number().int()).optional(),
      completedAt: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputFiles: "input_files",
        outputFile: "output_file",
        errorFile: "error_file",
        createdAt: "created_at",
        totalRequests: "total_requests",
        completedRequests: "completed_requests",
        succeededRequests: "succeeded_requests",
        failedRequests: "failed_requests",
        startedAt: "started_at",
        completedAt: "completed_at"
      });
    });
    var BatchJobOut$;
    (function(BatchJobOut$2) {
      BatchJobOut$2.inboundSchema = exports.BatchJobOut$inboundSchema;
      BatchJobOut$2.outboundSchema = exports.BatchJobOut$outboundSchema;
    })(BatchJobOut$ || (exports.BatchJobOut$ = BatchJobOut$ = {}));
    function batchJobOutToJSON(batchJobOut) {
      return JSON.stringify(exports.BatchJobOut$outboundSchema.parse(batchJobOut));
    }
    function batchJobOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchJobOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchJobOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobsout.js
var require_batchjobsout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobsout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobsOut$ = exports.BatchJobsOut$outboundSchema = exports.BatchJobsOut$inboundSchema = exports.BatchJobsOutObject$ = exports.BatchJobsOutObject$outboundSchema = exports.BatchJobsOutObject$inboundSchema = exports.BatchJobsOutObject = void 0;
    exports.batchJobsOutToJSON = batchJobsOutToJSON;
    exports.batchJobsOutFromJSON = batchJobsOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var batchjobout_js_1 = require_batchjobout();
    exports.BatchJobsOutObject = {
      List: "list"
    };
    exports.BatchJobsOutObject$inboundSchema = z.nativeEnum(exports.BatchJobsOutObject);
    exports.BatchJobsOutObject$outboundSchema = exports.BatchJobsOutObject$inboundSchema;
    var BatchJobsOutObject$;
    (function(BatchJobsOutObject$2) {
      BatchJobsOutObject$2.inboundSchema = exports.BatchJobsOutObject$inboundSchema;
      BatchJobsOutObject$2.outboundSchema = exports.BatchJobsOutObject$outboundSchema;
    })(BatchJobsOutObject$ || (exports.BatchJobsOutObject$ = BatchJobsOutObject$ = {}));
    exports.BatchJobsOut$inboundSchema = z.object({
      data: z.array(batchjobout_js_1.BatchJobOut$inboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    exports.BatchJobsOut$outboundSchema = z.object({
      data: z.array(batchjobout_js_1.BatchJobOut$outboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    var BatchJobsOut$;
    (function(BatchJobsOut$2) {
      BatchJobsOut$2.inboundSchema = exports.BatchJobsOut$inboundSchema;
      BatchJobsOut$2.outboundSchema = exports.BatchJobsOut$outboundSchema;
    })(BatchJobsOut$ || (exports.BatchJobsOut$ = BatchJobsOut$ = {}));
    function batchJobsOutToJSON(batchJobsOut) {
      return JSON.stringify(exports.BatchJobsOut$outboundSchema.parse(batchJobsOut));
    }
    function batchJobsOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchJobsOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchJobsOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatclassificationrequest.js
var require_chatclassificationrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatclassificationrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatClassificationRequest$ = exports.ChatClassificationRequest$outboundSchema = exports.ChatClassificationRequest$inboundSchema = exports.ChatClassificationRequestInputs$ = exports.ChatClassificationRequestInputs$outboundSchema = exports.ChatClassificationRequestInputs$inboundSchema = exports.One$ = exports.One$outboundSchema = exports.One$inboundSchema = exports.Two$ = exports.Two$outboundSchema = exports.Two$inboundSchema = void 0;
    exports.twoToJSON = twoToJSON;
    exports.twoFromJSON = twoFromJSON;
    exports.oneToJSON = oneToJSON;
    exports.oneFromJSON = oneFromJSON;
    exports.chatClassificationRequestInputsToJSON = chatClassificationRequestInputsToJSON;
    exports.chatClassificationRequestInputsFromJSON = chatClassificationRequestInputsFromJSON;
    exports.chatClassificationRequestToJSON = chatClassificationRequestToJSON;
    exports.chatClassificationRequestFromJSON = chatClassificationRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var systemmessage_js_1 = require_systemmessage();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.Two$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    exports.Two$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    var Two$;
    (function(Two$2) {
      Two$2.inboundSchema = exports.Two$inboundSchema;
      Two$2.outboundSchema = exports.Two$outboundSchema;
    })(Two$ || (exports.Two$ = Two$ = {}));
    function twoToJSON(two) {
      return JSON.stringify(exports.Two$outboundSchema.parse(two));
    }
    function twoFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Two$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Two' from JSON`);
    }
    exports.One$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    exports.One$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    var One$;
    (function(One$2) {
      One$2.inboundSchema = exports.One$inboundSchema;
      One$2.outboundSchema = exports.One$outboundSchema;
    })(One$ || (exports.One$ = One$ = {}));
    function oneToJSON(one) {
      return JSON.stringify(exports.One$outboundSchema.parse(one));
    }
    function oneFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.One$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One' from JSON`);
    }
    exports.ChatClassificationRequestInputs$inboundSchema = z.union([
      z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      z.array(z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])))
    ]);
    exports.ChatClassificationRequestInputs$outboundSchema = z.union([
      z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      z.array(z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])))
    ]);
    var ChatClassificationRequestInputs$;
    (function(ChatClassificationRequestInputs$2) {
      ChatClassificationRequestInputs$2.inboundSchema = exports.ChatClassificationRequestInputs$inboundSchema;
      ChatClassificationRequestInputs$2.outboundSchema = exports.ChatClassificationRequestInputs$outboundSchema;
    })(ChatClassificationRequestInputs$ || (exports.ChatClassificationRequestInputs$ = ChatClassificationRequestInputs$ = {}));
    function chatClassificationRequestInputsToJSON(chatClassificationRequestInputs) {
      return JSON.stringify(exports.ChatClassificationRequestInputs$outboundSchema.parse(chatClassificationRequestInputs));
    }
    function chatClassificationRequestInputsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatClassificationRequestInputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatClassificationRequestInputs' from JSON`);
    }
    exports.ChatClassificationRequest$inboundSchema = z.object({
      input: z.union([
        z.array(z.union([
          systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])),
        z.array(z.array(z.union([
          systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])))
      ]),
      model: z.nullable(z.string())
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input": "inputs"
      });
    });
    exports.ChatClassificationRequest$outboundSchema = z.object({
      inputs: z.union([
        z.array(z.union([
          systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])),
        z.array(z.array(z.union([
          systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])))
      ]),
      model: z.nullable(z.string())
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputs: "input"
      });
    });
    var ChatClassificationRequest$;
    (function(ChatClassificationRequest$2) {
      ChatClassificationRequest$2.inboundSchema = exports.ChatClassificationRequest$inboundSchema;
      ChatClassificationRequest$2.outboundSchema = exports.ChatClassificationRequest$outboundSchema;
    })(ChatClassificationRequest$ || (exports.ChatClassificationRequest$ = ChatClassificationRequest$ = {}));
    function chatClassificationRequestToJSON(chatClassificationRequest) {
      return JSON.stringify(exports.ChatClassificationRequest$outboundSchema.parse(chatClassificationRequest));
    }
    function chatClassificationRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatClassificationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatClassificationRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionchoice.js
var require_chatcompletionchoice = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionchoice.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionChoice$ = exports.ChatCompletionChoice$outboundSchema = exports.ChatCompletionChoice$inboundSchema = exports.FinishReason$ = exports.FinishReason$outboundSchema = exports.FinishReason$inboundSchema = exports.FinishReason = void 0;
    exports.chatCompletionChoiceToJSON = chatCompletionChoiceToJSON;
    exports.chatCompletionChoiceFromJSON = chatCompletionChoiceFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var enums_js_1 = require_enums();
    var assistantmessage_js_1 = require_assistantmessage();
    exports.FinishReason = {
      Stop: "stop",
      Length: "length",
      ModelLength: "model_length",
      Error: "error",
      ToolCalls: "tool_calls"
    };
    exports.FinishReason$inboundSchema = z.union([
      z.nativeEnum(exports.FinishReason),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.FinishReason$outboundSchema = z.union([
      z.nativeEnum(exports.FinishReason),
      z.string().and(z.custom())
    ]);
    var FinishReason$;
    (function(FinishReason$2) {
      FinishReason$2.inboundSchema = exports.FinishReason$inboundSchema;
      FinishReason$2.outboundSchema = exports.FinishReason$outboundSchema;
    })(FinishReason$ || (exports.FinishReason$ = FinishReason$ = {}));
    exports.ChatCompletionChoice$inboundSchema = z.object({
      index: z.number().int(),
      message: assistantmessage_js_1.AssistantMessage$inboundSchema,
      finish_reason: exports.FinishReason$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "finish_reason": "finishReason"
      });
    });
    exports.ChatCompletionChoice$outboundSchema = z.object({
      index: z.number().int(),
      message: assistantmessage_js_1.AssistantMessage$outboundSchema,
      finishReason: exports.FinishReason$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        finishReason: "finish_reason"
      });
    });
    var ChatCompletionChoice$;
    (function(ChatCompletionChoice$2) {
      ChatCompletionChoice$2.inboundSchema = exports.ChatCompletionChoice$inboundSchema;
      ChatCompletionChoice$2.outboundSchema = exports.ChatCompletionChoice$outboundSchema;
    })(ChatCompletionChoice$ || (exports.ChatCompletionChoice$ = ChatCompletionChoice$ = {}));
    function chatCompletionChoiceToJSON(chatCompletionChoice) {
      return JSON.stringify(exports.ChatCompletionChoice$outboundSchema.parse(chatCompletionChoice));
    }
    function chatCompletionChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionChoice' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionrequest.js
var require_chatcompletionrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionRequest$ = exports.ChatCompletionRequest$outboundSchema = exports.ChatCompletionRequest$inboundSchema = exports.ChatCompletionRequestToolChoice$ = exports.ChatCompletionRequestToolChoice$outboundSchema = exports.ChatCompletionRequestToolChoice$inboundSchema = exports.Messages$ = exports.Messages$outboundSchema = exports.Messages$inboundSchema = exports.Stop$ = exports.Stop$outboundSchema = exports.Stop$inboundSchema = void 0;
    exports.stopToJSON = stopToJSON;
    exports.stopFromJSON = stopFromJSON;
    exports.messagesToJSON = messagesToJSON;
    exports.messagesFromJSON = messagesFromJSON;
    exports.chatCompletionRequestToolChoiceToJSON = chatCompletionRequestToolChoiceToJSON;
    exports.chatCompletionRequestToolChoiceFromJSON = chatCompletionRequestToolChoiceFromJSON;
    exports.chatCompletionRequestToJSON = chatCompletionRequestToJSON;
    exports.chatCompletionRequestFromJSON = chatCompletionRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.Stop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.Stop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var Stop$;
    (function(Stop$2) {
      Stop$2.inboundSchema = exports.Stop$inboundSchema;
      Stop$2.outboundSchema = exports.Stop$outboundSchema;
    })(Stop$ || (exports.Stop$ = Stop$ = {}));
    function stopToJSON(stop) {
      return JSON.stringify(exports.Stop$outboundSchema.parse(stop));
    }
    function stopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Stop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Stop' from JSON`);
    }
    exports.Messages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.Messages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var Messages$;
    (function(Messages$2) {
      Messages$2.inboundSchema = exports.Messages$inboundSchema;
      Messages$2.outboundSchema = exports.Messages$outboundSchema;
    })(Messages$ || (exports.Messages$ = Messages$ = {}));
    function messagesToJSON(messages) {
      return JSON.stringify(exports.Messages$outboundSchema.parse(messages));
    }
    function messagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Messages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Messages' from JSON`);
    }
    exports.ChatCompletionRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.ChatCompletionRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var ChatCompletionRequestToolChoice$;
    (function(ChatCompletionRequestToolChoice$2) {
      ChatCompletionRequestToolChoice$2.inboundSchema = exports.ChatCompletionRequestToolChoice$inboundSchema;
      ChatCompletionRequestToolChoice$2.outboundSchema = exports.ChatCompletionRequestToolChoice$outboundSchema;
    })(ChatCompletionRequestToolChoice$ || (exports.ChatCompletionRequestToolChoice$ = ChatCompletionRequestToolChoice$ = {}));
    function chatCompletionRequestToolChoiceToJSON(chatCompletionRequestToolChoice) {
      return JSON.stringify(exports.ChatCompletionRequestToolChoice$outboundSchema.parse(chatCompletionRequestToolChoice));
    }
    function chatCompletionRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionRequestToolChoice' from JSON`);
    }
    exports.ChatCompletionRequest$inboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().default(1),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      safe_prompt: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "safe_prompt": "safePrompt"
      });
    });
    exports.ChatCompletionRequest$outboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().default(1),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      safePrompt: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        safePrompt: "safe_prompt"
      });
    });
    var ChatCompletionRequest$;
    (function(ChatCompletionRequest$2) {
      ChatCompletionRequest$2.inboundSchema = exports.ChatCompletionRequest$inboundSchema;
      ChatCompletionRequest$2.outboundSchema = exports.ChatCompletionRequest$outboundSchema;
    })(ChatCompletionRequest$ || (exports.ChatCompletionRequest$ = ChatCompletionRequest$ = {}));
    function chatCompletionRequestToJSON(chatCompletionRequest) {
      return JSON.stringify(exports.ChatCompletionRequest$outboundSchema.parse(chatCompletionRequest));
    }
    function chatCompletionRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/usageinfo.js
var require_usageinfo = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/usageinfo.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsageInfo$ = exports.UsageInfo$outboundSchema = exports.UsageInfo$inboundSchema = void 0;
    exports.usageInfoToJSON = usageInfoToJSON;
    exports.usageInfoFromJSON = usageInfoFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.UsageInfo$inboundSchema = z.object({
      prompt_tokens: z.number().int(),
      completion_tokens: z.number().int(),
      total_tokens: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "prompt_tokens": "promptTokens",
        "completion_tokens": "completionTokens",
        "total_tokens": "totalTokens"
      });
    });
    exports.UsageInfo$outboundSchema = z.object({
      promptTokens: z.number().int(),
      completionTokens: z.number().int(),
      totalTokens: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        promptTokens: "prompt_tokens",
        completionTokens: "completion_tokens",
        totalTokens: "total_tokens"
      });
    });
    var UsageInfo$;
    (function(UsageInfo$2) {
      UsageInfo$2.inboundSchema = exports.UsageInfo$inboundSchema;
      UsageInfo$2.outboundSchema = exports.UsageInfo$outboundSchema;
    })(UsageInfo$ || (exports.UsageInfo$ = UsageInfo$ = {}));
    function usageInfoToJSON(usageInfo) {
      return JSON.stringify(exports.UsageInfo$outboundSchema.parse(usageInfo));
    }
    function usageInfoFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UsageInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UsageInfo' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionresponse.js
var require_chatcompletionresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionResponse$ = exports.ChatCompletionResponse$outboundSchema = exports.ChatCompletionResponse$inboundSchema = void 0;
    exports.chatCompletionResponseToJSON = chatCompletionResponseToJSON;
    exports.chatCompletionResponseFromJSON = chatCompletionResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var chatcompletionchoice_js_1 = require_chatcompletionchoice();
    var usageinfo_js_1 = require_usageinfo();
    exports.ChatCompletionResponse$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$inboundSchema).optional()
    });
    exports.ChatCompletionResponse$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$outboundSchema).optional()
    });
    var ChatCompletionResponse$;
    (function(ChatCompletionResponse$2) {
      ChatCompletionResponse$2.inboundSchema = exports.ChatCompletionResponse$inboundSchema;
      ChatCompletionResponse$2.outboundSchema = exports.ChatCompletionResponse$outboundSchema;
    })(ChatCompletionResponse$ || (exports.ChatCompletionResponse$ = ChatCompletionResponse$ = {}));
    function chatCompletionResponseToJSON(chatCompletionResponse) {
      return JSON.stringify(exports.ChatCompletionResponse$outboundSchema.parse(chatCompletionResponse));
    }
    function chatCompletionResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionstreamrequest.js
var require_chatcompletionstreamrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionstreamrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionStreamRequest$ = exports.ChatCompletionStreamRequest$outboundSchema = exports.ChatCompletionStreamRequest$inboundSchema = exports.ChatCompletionStreamRequestToolChoice$ = exports.ChatCompletionStreamRequestToolChoice$outboundSchema = exports.ChatCompletionStreamRequestToolChoice$inboundSchema = exports.ChatCompletionStreamRequestMessages$ = exports.ChatCompletionStreamRequestMessages$outboundSchema = exports.ChatCompletionStreamRequestMessages$inboundSchema = exports.ChatCompletionStreamRequestStop$ = exports.ChatCompletionStreamRequestStop$outboundSchema = exports.ChatCompletionStreamRequestStop$inboundSchema = void 0;
    exports.chatCompletionStreamRequestStopToJSON = chatCompletionStreamRequestStopToJSON;
    exports.chatCompletionStreamRequestStopFromJSON = chatCompletionStreamRequestStopFromJSON;
    exports.chatCompletionStreamRequestMessagesToJSON = chatCompletionStreamRequestMessagesToJSON;
    exports.chatCompletionStreamRequestMessagesFromJSON = chatCompletionStreamRequestMessagesFromJSON;
    exports.chatCompletionStreamRequestToolChoiceToJSON = chatCompletionStreamRequestToolChoiceToJSON;
    exports.chatCompletionStreamRequestToolChoiceFromJSON = chatCompletionStreamRequestToolChoiceFromJSON;
    exports.chatCompletionStreamRequestToJSON = chatCompletionStreamRequestToJSON;
    exports.chatCompletionStreamRequestFromJSON = chatCompletionStreamRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.ChatCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.ChatCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var ChatCompletionStreamRequestStop$;
    (function(ChatCompletionStreamRequestStop$2) {
      ChatCompletionStreamRequestStop$2.inboundSchema = exports.ChatCompletionStreamRequestStop$inboundSchema;
      ChatCompletionStreamRequestStop$2.outboundSchema = exports.ChatCompletionStreamRequestStop$outboundSchema;
    })(ChatCompletionStreamRequestStop$ || (exports.ChatCompletionStreamRequestStop$ = ChatCompletionStreamRequestStop$ = {}));
    function chatCompletionStreamRequestStopToJSON(chatCompletionStreamRequestStop) {
      return JSON.stringify(exports.ChatCompletionStreamRequestStop$outboundSchema.parse(chatCompletionStreamRequestStop));
    }
    function chatCompletionStreamRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequestStop' from JSON`);
    }
    exports.ChatCompletionStreamRequestMessages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.ChatCompletionStreamRequestMessages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var ChatCompletionStreamRequestMessages$;
    (function(ChatCompletionStreamRequestMessages$2) {
      ChatCompletionStreamRequestMessages$2.inboundSchema = exports.ChatCompletionStreamRequestMessages$inboundSchema;
      ChatCompletionStreamRequestMessages$2.outboundSchema = exports.ChatCompletionStreamRequestMessages$outboundSchema;
    })(ChatCompletionStreamRequestMessages$ || (exports.ChatCompletionStreamRequestMessages$ = ChatCompletionStreamRequestMessages$ = {}));
    function chatCompletionStreamRequestMessagesToJSON(chatCompletionStreamRequestMessages) {
      return JSON.stringify(exports.ChatCompletionStreamRequestMessages$outboundSchema.parse(chatCompletionStreamRequestMessages));
    }
    function chatCompletionStreamRequestMessagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequestMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequestMessages' from JSON`);
    }
    exports.ChatCompletionStreamRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.ChatCompletionStreamRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var ChatCompletionStreamRequestToolChoice$;
    (function(ChatCompletionStreamRequestToolChoice$2) {
      ChatCompletionStreamRequestToolChoice$2.inboundSchema = exports.ChatCompletionStreamRequestToolChoice$inboundSchema;
      ChatCompletionStreamRequestToolChoice$2.outboundSchema = exports.ChatCompletionStreamRequestToolChoice$outboundSchema;
    })(ChatCompletionStreamRequestToolChoice$ || (exports.ChatCompletionStreamRequestToolChoice$ = ChatCompletionStreamRequestToolChoice$ = {}));
    function chatCompletionStreamRequestToolChoiceToJSON(chatCompletionStreamRequestToolChoice) {
      return JSON.stringify(exports.ChatCompletionStreamRequestToolChoice$outboundSchema.parse(chatCompletionStreamRequestToolChoice));
    }
    function chatCompletionStreamRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequestToolChoice' from JSON`);
    }
    exports.ChatCompletionStreamRequest$inboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().default(1),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      safe_prompt: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "safe_prompt": "safePrompt"
      });
    });
    exports.ChatCompletionStreamRequest$outboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().default(1),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      safePrompt: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        safePrompt: "safe_prompt"
      });
    });
    var ChatCompletionStreamRequest$;
    (function(ChatCompletionStreamRequest$2) {
      ChatCompletionStreamRequest$2.inboundSchema = exports.ChatCompletionStreamRequest$inboundSchema;
      ChatCompletionStreamRequest$2.outboundSchema = exports.ChatCompletionStreamRequest$outboundSchema;
    })(ChatCompletionStreamRequest$ || (exports.ChatCompletionStreamRequest$ = ChatCompletionStreamRequest$ = {}));
    function chatCompletionStreamRequestToJSON(chatCompletionStreamRequest) {
      return JSON.stringify(exports.ChatCompletionStreamRequest$outboundSchema.parse(chatCompletionStreamRequest));
    }
    function chatCompletionStreamRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/metricout.js
var require_metricout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/metricout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetricOut$ = exports.MetricOut$outboundSchema = exports.MetricOut$inboundSchema = void 0;
    exports.metricOutToJSON = metricOutToJSON;
    exports.metricOutFromJSON = metricOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.MetricOut$inboundSchema = z.object({
      train_loss: z.nullable(z.number()).optional(),
      valid_loss: z.nullable(z.number()).optional(),
      valid_mean_token_accuracy: z.nullable(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "train_loss": "trainLoss",
        "valid_loss": "validLoss",
        "valid_mean_token_accuracy": "validMeanTokenAccuracy"
      });
    });
    exports.MetricOut$outboundSchema = z.object({
      trainLoss: z.nullable(z.number()).optional(),
      validLoss: z.nullable(z.number()).optional(),
      validMeanTokenAccuracy: z.nullable(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainLoss: "train_loss",
        validLoss: "valid_loss",
        validMeanTokenAccuracy: "valid_mean_token_accuracy"
      });
    });
    var MetricOut$;
    (function(MetricOut$2) {
      MetricOut$2.inboundSchema = exports.MetricOut$inboundSchema;
      MetricOut$2.outboundSchema = exports.MetricOut$outboundSchema;
    })(MetricOut$ || (exports.MetricOut$ = MetricOut$ = {}));
    function metricOutToJSON(metricOut) {
      return JSON.stringify(exports.MetricOut$outboundSchema.parse(metricOut));
    }
    function metricOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/checkpointout.js
var require_checkpointout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/checkpointout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckpointOut$ = exports.CheckpointOut$outboundSchema = exports.CheckpointOut$inboundSchema = void 0;
    exports.checkpointOutToJSON = checkpointOutToJSON;
    exports.checkpointOutFromJSON = checkpointOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var metricout_js_1 = require_metricout();
    exports.CheckpointOut$inboundSchema = z.object({
      metrics: metricout_js_1.MetricOut$inboundSchema,
      step_number: z.number().int(),
      created_at: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "step_number": "stepNumber",
        "created_at": "createdAt"
      });
    });
    exports.CheckpointOut$outboundSchema = z.object({
      metrics: metricout_js_1.MetricOut$outboundSchema,
      stepNumber: z.number().int(),
      createdAt: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        stepNumber: "step_number",
        createdAt: "created_at"
      });
    });
    var CheckpointOut$;
    (function(CheckpointOut$2) {
      CheckpointOut$2.inboundSchema = exports.CheckpointOut$inboundSchema;
      CheckpointOut$2.outboundSchema = exports.CheckpointOut$outboundSchema;
    })(CheckpointOut$ || (exports.CheckpointOut$ = CheckpointOut$ = {}));
    function checkpointOutToJSON(checkpointOut) {
      return JSON.stringify(exports.CheckpointOut$outboundSchema.parse(checkpointOut));
    }
    function checkpointOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckpointOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckpointOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/classificationobject.js
var require_classificationobject = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/classificationobject.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassificationObject$ = exports.ClassificationObject$outboundSchema = exports.ClassificationObject$inboundSchema = void 0;
    exports.classificationObjectToJSON = classificationObjectToJSON;
    exports.classificationObjectFromJSON = classificationObjectFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ClassificationObject$inboundSchema = z.object({
      categories: z.record(z.boolean()).optional(),
      category_scores: z.record(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "category_scores": "categoryScores"
      });
    });
    exports.ClassificationObject$outboundSchema = z.object({
      categories: z.record(z.boolean()).optional(),
      categoryScores: z.record(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        categoryScores: "category_scores"
      });
    });
    var ClassificationObject$;
    (function(ClassificationObject$2) {
      ClassificationObject$2.inboundSchema = exports.ClassificationObject$inboundSchema;
      ClassificationObject$2.outboundSchema = exports.ClassificationObject$outboundSchema;
    })(ClassificationObject$ || (exports.ClassificationObject$ = ClassificationObject$ = {}));
    function classificationObjectToJSON(classificationObject) {
      return JSON.stringify(exports.ClassificationObject$outboundSchema.parse(classificationObject));
    }
    function classificationObjectFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationObject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationObject' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/classificationrequest.js
var require_classificationrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/classificationrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassificationRequest$ = exports.ClassificationRequest$outboundSchema = exports.ClassificationRequest$inboundSchema = exports.ClassificationRequestInputs$ = exports.ClassificationRequestInputs$outboundSchema = exports.ClassificationRequestInputs$inboundSchema = void 0;
    exports.classificationRequestInputsToJSON = classificationRequestInputsToJSON;
    exports.classificationRequestInputsFromJSON = classificationRequestInputsFromJSON;
    exports.classificationRequestToJSON = classificationRequestToJSON;
    exports.classificationRequestFromJSON = classificationRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ClassificationRequestInputs$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.ClassificationRequestInputs$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var ClassificationRequestInputs$;
    (function(ClassificationRequestInputs$2) {
      ClassificationRequestInputs$2.inboundSchema = exports.ClassificationRequestInputs$inboundSchema;
      ClassificationRequestInputs$2.outboundSchema = exports.ClassificationRequestInputs$outboundSchema;
    })(ClassificationRequestInputs$ || (exports.ClassificationRequestInputs$ = ClassificationRequestInputs$ = {}));
    function classificationRequestInputsToJSON(classificationRequestInputs) {
      return JSON.stringify(exports.ClassificationRequestInputs$outboundSchema.parse(classificationRequestInputs));
    }
    function classificationRequestInputsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationRequestInputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationRequestInputs' from JSON`);
    }
    exports.ClassificationRequest$inboundSchema = z.object({
      input: z.union([z.string(), z.array(z.string())]),
      model: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input": "inputs"
      });
    });
    exports.ClassificationRequest$outboundSchema = z.object({
      inputs: z.union([z.string(), z.array(z.string())]),
      model: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputs: "input"
      });
    });
    var ClassificationRequest$;
    (function(ClassificationRequest$2) {
      ClassificationRequest$2.inboundSchema = exports.ClassificationRequest$inboundSchema;
      ClassificationRequest$2.outboundSchema = exports.ClassificationRequest$outboundSchema;
    })(ClassificationRequest$ || (exports.ClassificationRequest$ = ClassificationRequest$ = {}));
    function classificationRequestToJSON(classificationRequest) {
      return JSON.stringify(exports.ClassificationRequest$outboundSchema.parse(classificationRequest));
    }
    function classificationRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/classificationresponse.js
var require_classificationresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/classificationresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassificationResponse$ = exports.ClassificationResponse$outboundSchema = exports.ClassificationResponse$inboundSchema = void 0;
    exports.classificationResponseToJSON = classificationResponseToJSON;
    exports.classificationResponseFromJSON = classificationResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var classificationobject_js_1 = require_classificationobject();
    exports.ClassificationResponse$inboundSchema = z.object({
      id: z.string().optional(),
      model: z.string().optional(),
      results: z.array(classificationobject_js_1.ClassificationObject$inboundSchema).optional()
    });
    exports.ClassificationResponse$outboundSchema = z.object({
      id: z.string().optional(),
      model: z.string().optional(),
      results: z.array(classificationobject_js_1.ClassificationObject$outboundSchema).optional()
    });
    var ClassificationResponse$;
    (function(ClassificationResponse$2) {
      ClassificationResponse$2.inboundSchema = exports.ClassificationResponse$inboundSchema;
      ClassificationResponse$2.outboundSchema = exports.ClassificationResponse$outboundSchema;
    })(ClassificationResponse$ || (exports.ClassificationResponse$ = ClassificationResponse$ = {}));
    function classificationResponseToJSON(classificationResponse) {
      return JSON.stringify(exports.ClassificationResponse$outboundSchema.parse(classificationResponse));
    }
    function classificationResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/deltamessage.js
var require_deltamessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/deltamessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeltaMessage$ = exports.DeltaMessage$outboundSchema = exports.DeltaMessage$inboundSchema = exports.Content$ = exports.Content$outboundSchema = exports.Content$inboundSchema = void 0;
    exports.contentToJSON = contentToJSON;
    exports.contentFromJSON = contentFromJSON;
    exports.deltaMessageToJSON = deltaMessageToJSON;
    exports.deltaMessageFromJSON = deltaMessageFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    var toolcall_js_1 = require_toolcall();
    exports.Content$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.Content$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var Content$;
    (function(Content$2) {
      Content$2.inboundSchema = exports.Content$inboundSchema;
      Content$2.outboundSchema = exports.Content$outboundSchema;
    })(Content$ || (exports.Content$ = Content$ = {}));
    function contentToJSON(content) {
      return JSON.stringify(exports.Content$outboundSchema.parse(content));
    }
    function contentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Content$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Content' from JSON`);
    }
    exports.DeltaMessage$inboundSchema = z.object({
      role: z.nullable(z.string()).optional(),
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])).optional(),
      tool_calls: z.nullable(z.array(toolcall_js_1.ToolCall$inboundSchema)).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "tool_calls": "toolCalls"
      });
    });
    exports.DeltaMessage$outboundSchema = z.object({
      role: z.nullable(z.string()).optional(),
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])).optional(),
      toolCalls: z.nullable(z.array(toolcall_js_1.ToolCall$outboundSchema)).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        toolCalls: "tool_calls"
      });
    });
    var DeltaMessage$;
    (function(DeltaMessage$2) {
      DeltaMessage$2.inboundSchema = exports.DeltaMessage$inboundSchema;
      DeltaMessage$2.outboundSchema = exports.DeltaMessage$outboundSchema;
    })(DeltaMessage$ || (exports.DeltaMessage$ = DeltaMessage$ = {}));
    function deltaMessageToJSON(deltaMessage) {
      return JSON.stringify(exports.DeltaMessage$outboundSchema.parse(deltaMessage));
    }
    function deltaMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeltaMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeltaMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/completionresponsestreamchoice.js
var require_completionresponsestreamchoice = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/completionresponsestreamchoice.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompletionResponseStreamChoice$ = exports.CompletionResponseStreamChoice$outboundSchema = exports.CompletionResponseStreamChoice$inboundSchema = exports.CompletionResponseStreamChoiceFinishReason$ = exports.CompletionResponseStreamChoiceFinishReason$outboundSchema = exports.CompletionResponseStreamChoiceFinishReason$inboundSchema = exports.CompletionResponseStreamChoiceFinishReason = void 0;
    exports.completionResponseStreamChoiceToJSON = completionResponseStreamChoiceToJSON;
    exports.completionResponseStreamChoiceFromJSON = completionResponseStreamChoiceFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var enums_js_1 = require_enums();
    var deltamessage_js_1 = require_deltamessage();
    exports.CompletionResponseStreamChoiceFinishReason = {
      Stop: "stop",
      Length: "length",
      Error: "error",
      ToolCalls: "tool_calls"
    };
    exports.CompletionResponseStreamChoiceFinishReason$inboundSchema = z.union([
      z.nativeEnum(exports.CompletionResponseStreamChoiceFinishReason),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.CompletionResponseStreamChoiceFinishReason$outboundSchema = z.union([
      z.nativeEnum(exports.CompletionResponseStreamChoiceFinishReason),
      z.string().and(z.custom())
    ]);
    var CompletionResponseStreamChoiceFinishReason$;
    (function(CompletionResponseStreamChoiceFinishReason$2) {
      CompletionResponseStreamChoiceFinishReason$2.inboundSchema = exports.CompletionResponseStreamChoiceFinishReason$inboundSchema;
      CompletionResponseStreamChoiceFinishReason$2.outboundSchema = exports.CompletionResponseStreamChoiceFinishReason$outboundSchema;
    })(CompletionResponseStreamChoiceFinishReason$ || (exports.CompletionResponseStreamChoiceFinishReason$ = CompletionResponseStreamChoiceFinishReason$ = {}));
    exports.CompletionResponseStreamChoice$inboundSchema = z.object({
      index: z.number().int(),
      delta: deltamessage_js_1.DeltaMessage$inboundSchema,
      finish_reason: z.nullable(exports.CompletionResponseStreamChoiceFinishReason$inboundSchema)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "finish_reason": "finishReason"
      });
    });
    exports.CompletionResponseStreamChoice$outboundSchema = z.object({
      index: z.number().int(),
      delta: deltamessage_js_1.DeltaMessage$outboundSchema,
      finishReason: z.nullable(exports.CompletionResponseStreamChoiceFinishReason$outboundSchema)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        finishReason: "finish_reason"
      });
    });
    var CompletionResponseStreamChoice$;
    (function(CompletionResponseStreamChoice$2) {
      CompletionResponseStreamChoice$2.inboundSchema = exports.CompletionResponseStreamChoice$inboundSchema;
      CompletionResponseStreamChoice$2.outboundSchema = exports.CompletionResponseStreamChoice$outboundSchema;
    })(CompletionResponseStreamChoice$ || (exports.CompletionResponseStreamChoice$ = CompletionResponseStreamChoice$ = {}));
    function completionResponseStreamChoiceToJSON(completionResponseStreamChoice) {
      return JSON.stringify(exports.CompletionResponseStreamChoice$outboundSchema.parse(completionResponseStreamChoice));
    }
    function completionResponseStreamChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompletionResponseStreamChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletionResponseStreamChoice' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/completionchunk.js
var require_completionchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/completionchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompletionChunk$ = exports.CompletionChunk$outboundSchema = exports.CompletionChunk$inboundSchema = void 0;
    exports.completionChunkToJSON = completionChunkToJSON;
    exports.completionChunkFromJSON = completionChunkFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var completionresponsestreamchoice_js_1 = require_completionresponsestreamchoice();
    var usageinfo_js_1 = require_usageinfo();
    exports.CompletionChunk$inboundSchema = z.object({
      id: z.string(),
      object: z.string().optional(),
      created: z.number().int().optional(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema.optional(),
      choices: z.array(completionresponsestreamchoice_js_1.CompletionResponseStreamChoice$inboundSchema)
    });
    exports.CompletionChunk$outboundSchema = z.object({
      id: z.string(),
      object: z.string().optional(),
      created: z.number().int().optional(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema.optional(),
      choices: z.array(completionresponsestreamchoice_js_1.CompletionResponseStreamChoice$outboundSchema)
    });
    var CompletionChunk$;
    (function(CompletionChunk$2) {
      CompletionChunk$2.inboundSchema = exports.CompletionChunk$inboundSchema;
      CompletionChunk$2.outboundSchema = exports.CompletionChunk$outboundSchema;
    })(CompletionChunk$ || (exports.CompletionChunk$ = CompletionChunk$ = {}));
    function completionChunkToJSON(completionChunk) {
      return JSON.stringify(exports.CompletionChunk$outboundSchema.parse(completionChunk));
    }
    function completionChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompletionChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletionChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/completionevent.js
var require_completionevent = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/completionevent.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompletionEvent$ = exports.CompletionEvent$outboundSchema = exports.CompletionEvent$inboundSchema = void 0;
    exports.completionEventToJSON = completionEventToJSON;
    exports.completionEventFromJSON = completionEventFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var completionchunk_js_1 = require_completionchunk();
    exports.CompletionEvent$inboundSchema = z.object({
      data: z.string().transform((v, ctx) => {
        try {
          return JSON.parse(v);
        } catch (err) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: `malformed json: ${err}`
          });
          return z.NEVER;
        }
      }).pipe(completionchunk_js_1.CompletionChunk$inboundSchema)
    });
    exports.CompletionEvent$outboundSchema = z.object({
      data: completionchunk_js_1.CompletionChunk$outboundSchema
    });
    var CompletionEvent$;
    (function(CompletionEvent$2) {
      CompletionEvent$2.inboundSchema = exports.CompletionEvent$inboundSchema;
      CompletionEvent$2.outboundSchema = exports.CompletionEvent$outboundSchema;
    })(CompletionEvent$ || (exports.CompletionEvent$ = CompletionEvent$ = {}));
    function completionEventToJSON(completionEvent) {
      return JSON.stringify(exports.CompletionEvent$outboundSchema.parse(completionEvent));
    }
    function completionEventFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompletionEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletionEvent' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/deletefileout.js
var require_deletefileout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/deletefileout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFileOut$ = exports.DeleteFileOut$outboundSchema = exports.DeleteFileOut$inboundSchema = void 0;
    exports.deleteFileOutToJSON = deleteFileOutToJSON;
    exports.deleteFileOutFromJSON = deleteFileOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.DeleteFileOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      deleted: z.boolean()
    });
    exports.DeleteFileOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      deleted: z.boolean()
    });
    var DeleteFileOut$;
    (function(DeleteFileOut$2) {
      DeleteFileOut$2.inboundSchema = exports.DeleteFileOut$inboundSchema;
      DeleteFileOut$2.outboundSchema = exports.DeleteFileOut$outboundSchema;
    })(DeleteFileOut$ || (exports.DeleteFileOut$ = DeleteFileOut$ = {}));
    function deleteFileOutToJSON(deleteFileOut) {
      return JSON.stringify(exports.DeleteFileOut$outboundSchema.parse(deleteFileOut));
    }
    function deleteFileOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteFileOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteFileOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/deletemodelout.js
var require_deletemodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/deletemodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteModelOut$ = exports.DeleteModelOut$outboundSchema = exports.DeleteModelOut$inboundSchema = void 0;
    exports.deleteModelOutToJSON = deleteModelOutToJSON;
    exports.deleteModelOutFromJSON = deleteModelOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.DeleteModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      deleted: z.boolean().default(true)
    });
    exports.DeleteModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      deleted: z.boolean().default(true)
    });
    var DeleteModelOut$;
    (function(DeleteModelOut$2) {
      DeleteModelOut$2.inboundSchema = exports.DeleteModelOut$inboundSchema;
      DeleteModelOut$2.outboundSchema = exports.DeleteModelOut$outboundSchema;
    })(DeleteModelOut$ || (exports.DeleteModelOut$ = DeleteModelOut$ = {}));
    function deleteModelOutToJSON(deleteModelOut) {
      return JSON.stringify(exports.DeleteModelOut$outboundSchema.parse(deleteModelOut));
    }
    function deleteModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/eventout.js
var require_eventout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/eventout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventOut$ = exports.EventOut$outboundSchema = exports.EventOut$inboundSchema = void 0;
    exports.eventOutToJSON = eventOutToJSON;
    exports.eventOutFromJSON = eventOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.EventOut$inboundSchema = z.object({
      name: z.string(),
      data: z.nullable(z.record(z.any())).optional(),
      created_at: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt"
      });
    });
    exports.EventOut$outboundSchema = z.object({
      name: z.string(),
      data: z.nullable(z.record(z.any())).optional(),
      createdAt: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at"
      });
    });
    var EventOut$;
    (function(EventOut$2) {
      EventOut$2.inboundSchema = exports.EventOut$inboundSchema;
      EventOut$2.outboundSchema = exports.EventOut$outboundSchema;
    })(EventOut$ || (exports.EventOut$ = EventOut$ = {}));
    function eventOutToJSON(eventOut) {
      return JSON.stringify(exports.EventOut$outboundSchema.parse(eventOut));
    }
    function eventOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/githubrepositoryout.js
var require_githubrepositoryout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/githubrepositoryout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GithubRepositoryOut$ = exports.GithubRepositoryOut$outboundSchema = exports.GithubRepositoryOut$inboundSchema = exports.GithubRepositoryOutType$ = exports.GithubRepositoryOutType$outboundSchema = exports.GithubRepositoryOutType$inboundSchema = exports.GithubRepositoryOutType = void 0;
    exports.githubRepositoryOutToJSON = githubRepositoryOutToJSON;
    exports.githubRepositoryOutFromJSON = githubRepositoryOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.GithubRepositoryOutType = {
      Github: "github"
    };
    exports.GithubRepositoryOutType$inboundSchema = z.nativeEnum(exports.GithubRepositoryOutType);
    exports.GithubRepositoryOutType$outboundSchema = exports.GithubRepositoryOutType$inboundSchema;
    var GithubRepositoryOutType$;
    (function(GithubRepositoryOutType$2) {
      GithubRepositoryOutType$2.inboundSchema = exports.GithubRepositoryOutType$inboundSchema;
      GithubRepositoryOutType$2.outboundSchema = exports.GithubRepositoryOutType$outboundSchema;
    })(GithubRepositoryOutType$ || (exports.GithubRepositoryOutType$ = GithubRepositoryOutType$ = {}));
    exports.GithubRepositoryOut$inboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      commit_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "commit_id": "commitId"
      });
    });
    exports.GithubRepositoryOut$outboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      commitId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        commitId: "commit_id"
      });
    });
    var GithubRepositoryOut$;
    (function(GithubRepositoryOut$2) {
      GithubRepositoryOut$2.inboundSchema = exports.GithubRepositoryOut$inboundSchema;
      GithubRepositoryOut$2.outboundSchema = exports.GithubRepositoryOut$outboundSchema;
    })(GithubRepositoryOut$ || (exports.GithubRepositoryOut$ = GithubRepositoryOut$ = {}));
    function githubRepositoryOutToJSON(githubRepositoryOut) {
      return JSON.stringify(exports.GithubRepositoryOut$outboundSchema.parse(githubRepositoryOut));
    }
    function githubRepositoryOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GithubRepositoryOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GithubRepositoryOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobmetadataout.js
var require_jobmetadataout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobmetadataout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobMetadataOut$ = exports.JobMetadataOut$outboundSchema = exports.JobMetadataOut$inboundSchema = void 0;
    exports.jobMetadataOutToJSON = jobMetadataOutToJSON;
    exports.jobMetadataOutFromJSON = jobMetadataOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobMetadataOut$inboundSchema = z.object({
      expected_duration_seconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      cost_currency: z.nullable(z.string()).optional(),
      train_tokens_per_step: z.nullable(z.number().int()).optional(),
      train_tokens: z.nullable(z.number().int()).optional(),
      data_tokens: z.nullable(z.number().int()).optional(),
      estimated_start_time: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "expected_duration_seconds": "expectedDurationSeconds",
        "cost_currency": "costCurrency",
        "train_tokens_per_step": "trainTokensPerStep",
        "train_tokens": "trainTokens",
        "data_tokens": "dataTokens",
        "estimated_start_time": "estimatedStartTime"
      });
    });
    exports.JobMetadataOut$outboundSchema = z.object({
      expectedDurationSeconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      costCurrency: z.nullable(z.string()).optional(),
      trainTokensPerStep: z.nullable(z.number().int()).optional(),
      trainTokens: z.nullable(z.number().int()).optional(),
      dataTokens: z.nullable(z.number().int()).optional(),
      estimatedStartTime: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        expectedDurationSeconds: "expected_duration_seconds",
        costCurrency: "cost_currency",
        trainTokensPerStep: "train_tokens_per_step",
        trainTokens: "train_tokens",
        dataTokens: "data_tokens",
        estimatedStartTime: "estimated_start_time"
      });
    });
    var JobMetadataOut$;
    (function(JobMetadataOut$2) {
      JobMetadataOut$2.inboundSchema = exports.JobMetadataOut$inboundSchema;
      JobMetadataOut$2.outboundSchema = exports.JobMetadataOut$outboundSchema;
    })(JobMetadataOut$ || (exports.JobMetadataOut$ = JobMetadataOut$ = {}));
    function jobMetadataOutToJSON(jobMetadataOut) {
      return JSON.stringify(exports.JobMetadataOut$outboundSchema.parse(jobMetadataOut));
    }
    function jobMetadataOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobMetadataOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobMetadataOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/trainingparameters.js
var require_trainingparameters = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/trainingparameters.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrainingParameters$ = exports.TrainingParameters$outboundSchema = exports.TrainingParameters$inboundSchema = void 0;
    exports.trainingParametersToJSON = trainingParametersToJSON;
    exports.trainingParametersFromJSON = trainingParametersFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.TrainingParameters$inboundSchema = z.object({
      training_steps: z.nullable(z.number().int()).optional(),
      learning_rate: z.number().default(1e-4),
      weight_decay: z.nullable(z.number()).optional(),
      warmup_fraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fim_ratio: z.nullable(z.number()).optional(),
      seq_len: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "training_steps": "trainingSteps",
        "learning_rate": "learningRate",
        "weight_decay": "weightDecay",
        "warmup_fraction": "warmupFraction",
        "fim_ratio": "fimRatio",
        "seq_len": "seqLen"
      });
    });
    exports.TrainingParameters$outboundSchema = z.object({
      trainingSteps: z.nullable(z.number().int()).optional(),
      learningRate: z.number().default(1e-4),
      weightDecay: z.nullable(z.number()).optional(),
      warmupFraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fimRatio: z.nullable(z.number()).optional(),
      seqLen: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainingSteps: "training_steps",
        learningRate: "learning_rate",
        weightDecay: "weight_decay",
        warmupFraction: "warmup_fraction",
        fimRatio: "fim_ratio",
        seqLen: "seq_len"
      });
    });
    var TrainingParameters$;
    (function(TrainingParameters$2) {
      TrainingParameters$2.inboundSchema = exports.TrainingParameters$inboundSchema;
      TrainingParameters$2.outboundSchema = exports.TrainingParameters$outboundSchema;
    })(TrainingParameters$ || (exports.TrainingParameters$ = TrainingParameters$ = {}));
    function trainingParametersToJSON(trainingParameters) {
      return JSON.stringify(exports.TrainingParameters$outboundSchema.parse(trainingParameters));
    }
    function trainingParametersFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrainingParameters$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrainingParameters' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/wandbintegrationout.js
var require_wandbintegrationout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/wandbintegrationout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WandbIntegrationOut$ = exports.WandbIntegrationOut$outboundSchema = exports.WandbIntegrationOut$inboundSchema = exports.WandbIntegrationOutType$ = exports.WandbIntegrationOutType$outboundSchema = exports.WandbIntegrationOutType$inboundSchema = exports.WandbIntegrationOutType = void 0;
    exports.wandbIntegrationOutToJSON = wandbIntegrationOutToJSON;
    exports.wandbIntegrationOutFromJSON = wandbIntegrationOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.WandbIntegrationOutType = {
      Wandb: "wandb"
    };
    exports.WandbIntegrationOutType$inboundSchema = z.nativeEnum(exports.WandbIntegrationOutType);
    exports.WandbIntegrationOutType$outboundSchema = exports.WandbIntegrationOutType$inboundSchema;
    var WandbIntegrationOutType$;
    (function(WandbIntegrationOutType$2) {
      WandbIntegrationOutType$2.inboundSchema = exports.WandbIntegrationOutType$inboundSchema;
      WandbIntegrationOutType$2.outboundSchema = exports.WandbIntegrationOutType$outboundSchema;
    })(WandbIntegrationOutType$ || (exports.WandbIntegrationOutType$ = WandbIntegrationOutType$ = {}));
    exports.WandbIntegrationOut$inboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      run_name: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "run_name": "runName"
      });
    });
    exports.WandbIntegrationOut$outboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      runName: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        runName: "run_name"
      });
    });
    var WandbIntegrationOut$;
    (function(WandbIntegrationOut$2) {
      WandbIntegrationOut$2.inboundSchema = exports.WandbIntegrationOut$inboundSchema;
      WandbIntegrationOut$2.outboundSchema = exports.WandbIntegrationOut$outboundSchema;
    })(WandbIntegrationOut$ || (exports.WandbIntegrationOut$ = WandbIntegrationOut$ = {}));
    function wandbIntegrationOutToJSON(wandbIntegrationOut) {
      return JSON.stringify(exports.WandbIntegrationOut$outboundSchema.parse(wandbIntegrationOut));
    }
    function wandbIntegrationOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WandbIntegrationOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WandbIntegrationOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/detailedjobout.js
var require_detailedjobout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/detailedjobout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetailedJobOut$ = exports.DetailedJobOut$outboundSchema = exports.DetailedJobOut$inboundSchema = exports.DetailedJobOutRepositories$ = exports.DetailedJobOutRepositories$outboundSchema = exports.DetailedJobOutRepositories$inboundSchema = exports.DetailedJobOutIntegrations$ = exports.DetailedJobOutIntegrations$outboundSchema = exports.DetailedJobOutIntegrations$inboundSchema = exports.DetailedJobOutObject$ = exports.DetailedJobOutObject$outboundSchema = exports.DetailedJobOutObject$inboundSchema = exports.DetailedJobOutStatus$ = exports.DetailedJobOutStatus$outboundSchema = exports.DetailedJobOutStatus$inboundSchema = exports.DetailedJobOutObject = exports.DetailedJobOutStatus = void 0;
    exports.detailedJobOutIntegrationsToJSON = detailedJobOutIntegrationsToJSON;
    exports.detailedJobOutIntegrationsFromJSON = detailedJobOutIntegrationsFromJSON;
    exports.detailedJobOutRepositoriesToJSON = detailedJobOutRepositoriesToJSON;
    exports.detailedJobOutRepositoriesFromJSON = detailedJobOutRepositoriesFromJSON;
    exports.detailedJobOutToJSON = detailedJobOutToJSON;
    exports.detailedJobOutFromJSON = detailedJobOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var checkpointout_js_1 = require_checkpointout();
    var eventout_js_1 = require_eventout();
    var githubrepositoryout_js_1 = require_githubrepositoryout();
    var jobmetadataout_js_1 = require_jobmetadataout();
    var trainingparameters_js_1 = require_trainingparameters();
    var wandbintegrationout_js_1 = require_wandbintegrationout();
    exports.DetailedJobOutStatus = {
      Queued: "QUEUED",
      Started: "STARTED",
      Validating: "VALIDATING",
      Validated: "VALIDATED",
      Running: "RUNNING",
      FailedValidation: "FAILED_VALIDATION",
      Failed: "FAILED",
      Success: "SUCCESS",
      Cancelled: "CANCELLED",
      CancellationRequested: "CANCELLATION_REQUESTED"
    };
    exports.DetailedJobOutObject = {
      Job: "job"
    };
    exports.DetailedJobOutStatus$inboundSchema = z.nativeEnum(exports.DetailedJobOutStatus);
    exports.DetailedJobOutStatus$outboundSchema = exports.DetailedJobOutStatus$inboundSchema;
    var DetailedJobOutStatus$;
    (function(DetailedJobOutStatus$2) {
      DetailedJobOutStatus$2.inboundSchema = exports.DetailedJobOutStatus$inboundSchema;
      DetailedJobOutStatus$2.outboundSchema = exports.DetailedJobOutStatus$outboundSchema;
    })(DetailedJobOutStatus$ || (exports.DetailedJobOutStatus$ = DetailedJobOutStatus$ = {}));
    exports.DetailedJobOutObject$inboundSchema = z.nativeEnum(exports.DetailedJobOutObject);
    exports.DetailedJobOutObject$outboundSchema = exports.DetailedJobOutObject$inboundSchema;
    var DetailedJobOutObject$;
    (function(DetailedJobOutObject$2) {
      DetailedJobOutObject$2.inboundSchema = exports.DetailedJobOutObject$inboundSchema;
      DetailedJobOutObject$2.outboundSchema = exports.DetailedJobOutObject$outboundSchema;
    })(DetailedJobOutObject$ || (exports.DetailedJobOutObject$ = DetailedJobOutObject$ = {}));
    exports.DetailedJobOutIntegrations$inboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema;
    exports.DetailedJobOutIntegrations$outboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema;
    var DetailedJobOutIntegrations$;
    (function(DetailedJobOutIntegrations$2) {
      DetailedJobOutIntegrations$2.inboundSchema = exports.DetailedJobOutIntegrations$inboundSchema;
      DetailedJobOutIntegrations$2.outboundSchema = exports.DetailedJobOutIntegrations$outboundSchema;
    })(DetailedJobOutIntegrations$ || (exports.DetailedJobOutIntegrations$ = DetailedJobOutIntegrations$ = {}));
    function detailedJobOutIntegrationsToJSON(detailedJobOutIntegrations) {
      return JSON.stringify(exports.DetailedJobOutIntegrations$outboundSchema.parse(detailedJobOutIntegrations));
    }
    function detailedJobOutIntegrationsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DetailedJobOutIntegrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DetailedJobOutIntegrations' from JSON`);
    }
    exports.DetailedJobOutRepositories$inboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema;
    exports.DetailedJobOutRepositories$outboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema;
    var DetailedJobOutRepositories$;
    (function(DetailedJobOutRepositories$2) {
      DetailedJobOutRepositories$2.inboundSchema = exports.DetailedJobOutRepositories$inboundSchema;
      DetailedJobOutRepositories$2.outboundSchema = exports.DetailedJobOutRepositories$outboundSchema;
    })(DetailedJobOutRepositories$ || (exports.DetailedJobOutRepositories$ = DetailedJobOutRepositories$ = {}));
    function detailedJobOutRepositoriesToJSON(detailedJobOutRepositories) {
      return JSON.stringify(exports.DetailedJobOutRepositories$outboundSchema.parse(detailedJobOutRepositories));
    }
    function detailedJobOutRepositoriesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DetailedJobOutRepositories$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DetailedJobOutRepositories' from JSON`);
    }
    exports.DetailedJobOut$inboundSchema = z.object({
      id: z.string(),
      auto_start: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$inboundSchema,
      model: z.string(),
      status: exports.DetailedJobOutStatus$inboundSchema,
      job_type: z.string(),
      created_at: z.number().int(),
      modified_at: z.number().int(),
      training_files: z.array(z.string()),
      validation_files: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fine_tuned_model: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema)).optional(),
      trained_tokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$inboundSchema).optional(),
      events: z.array(eventout_js_1.EventOut$inboundSchema).optional(),
      checkpoints: z.array(checkpointout_js_1.CheckpointOut$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "auto_start": "autoStart",
        "job_type": "jobType",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "training_files": "trainingFiles",
        "validation_files": "validationFiles",
        "fine_tuned_model": "fineTunedModel",
        "trained_tokens": "trainedTokens"
      });
    });
    exports.DetailedJobOut$outboundSchema = z.object({
      id: z.string(),
      autoStart: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$outboundSchema,
      model: z.string(),
      status: exports.DetailedJobOutStatus$outboundSchema,
      jobType: z.string(),
      createdAt: z.number().int(),
      modifiedAt: z.number().int(),
      trainingFiles: z.array(z.string()),
      validationFiles: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fineTunedModel: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema)).optional(),
      trainedTokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$outboundSchema).optional(),
      events: z.array(eventout_js_1.EventOut$outboundSchema).optional(),
      checkpoints: z.array(checkpointout_js_1.CheckpointOut$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        autoStart: "auto_start",
        jobType: "job_type",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        trainingFiles: "training_files",
        validationFiles: "validation_files",
        fineTunedModel: "fine_tuned_model",
        trainedTokens: "trained_tokens"
      });
    });
    var DetailedJobOut$;
    (function(DetailedJobOut$2) {
      DetailedJobOut$2.inboundSchema = exports.DetailedJobOut$inboundSchema;
      DetailedJobOut$2.outboundSchema = exports.DetailedJobOut$outboundSchema;
    })(DetailedJobOut$ || (exports.DetailedJobOut$ = DetailedJobOut$ = {}));
    function detailedJobOutToJSON(detailedJobOut) {
      return JSON.stringify(exports.DetailedJobOut$outboundSchema.parse(detailedJobOut));
    }
    function detailedJobOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DetailedJobOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DetailedJobOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/embeddingrequest.js
var require_embeddingrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/embeddingrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddingRequest$ = exports.EmbeddingRequest$outboundSchema = exports.EmbeddingRequest$inboundSchema = exports.Inputs$ = exports.Inputs$outboundSchema = exports.Inputs$inboundSchema = void 0;
    exports.inputsToJSON = inputsToJSON;
    exports.inputsFromJSON = inputsFromJSON;
    exports.embeddingRequestToJSON = embeddingRequestToJSON;
    exports.embeddingRequestFromJSON = embeddingRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.Inputs$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.Inputs$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var Inputs$;
    (function(Inputs$2) {
      Inputs$2.inboundSchema = exports.Inputs$inboundSchema;
      Inputs$2.outboundSchema = exports.Inputs$outboundSchema;
    })(Inputs$ || (exports.Inputs$ = Inputs$ = {}));
    function inputsToJSON(inputs) {
      return JSON.stringify(exports.Inputs$outboundSchema.parse(inputs));
    }
    function inputsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Inputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Inputs' from JSON`);
    }
    exports.EmbeddingRequest$inboundSchema = z.object({
      input: z.union([z.string(), z.array(z.string())]),
      model: z.string().default("mistral-embed"),
      encoding_format: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input": "inputs",
        "encoding_format": "encodingFormat"
      });
    });
    exports.EmbeddingRequest$outboundSchema = z.object({
      inputs: z.union([z.string(), z.array(z.string())]),
      model: z.string().default("mistral-embed"),
      encodingFormat: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputs: "input",
        encodingFormat: "encoding_format"
      });
    });
    var EmbeddingRequest$;
    (function(EmbeddingRequest$2) {
      EmbeddingRequest$2.inboundSchema = exports.EmbeddingRequest$inboundSchema;
      EmbeddingRequest$2.outboundSchema = exports.EmbeddingRequest$outboundSchema;
    })(EmbeddingRequest$ || (exports.EmbeddingRequest$ = EmbeddingRequest$ = {}));
    function embeddingRequestToJSON(embeddingRequest) {
      return JSON.stringify(exports.EmbeddingRequest$outboundSchema.parse(embeddingRequest));
    }
    function embeddingRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EmbeddingRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmbeddingRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/embeddingresponsedata.js
var require_embeddingresponsedata = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/embeddingresponsedata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddingResponseData$ = exports.EmbeddingResponseData$outboundSchema = exports.EmbeddingResponseData$inboundSchema = void 0;
    exports.embeddingResponseDataToJSON = embeddingResponseDataToJSON;
    exports.embeddingResponseDataFromJSON = embeddingResponseDataFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.EmbeddingResponseData$inboundSchema = z.object({
      object: z.string().optional(),
      embedding: z.array(z.number()).optional(),
      index: z.number().int().optional()
    });
    exports.EmbeddingResponseData$outboundSchema = z.object({
      object: z.string().optional(),
      embedding: z.array(z.number()).optional(),
      index: z.number().int().optional()
    });
    var EmbeddingResponseData$;
    (function(EmbeddingResponseData$2) {
      EmbeddingResponseData$2.inboundSchema = exports.EmbeddingResponseData$inboundSchema;
      EmbeddingResponseData$2.outboundSchema = exports.EmbeddingResponseData$outboundSchema;
    })(EmbeddingResponseData$ || (exports.EmbeddingResponseData$ = EmbeddingResponseData$ = {}));
    function embeddingResponseDataToJSON(embeddingResponseData) {
      return JSON.stringify(exports.EmbeddingResponseData$outboundSchema.parse(embeddingResponseData));
    }
    function embeddingResponseDataFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EmbeddingResponseData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmbeddingResponseData' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/embeddingresponse.js
var require_embeddingresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/embeddingresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddingResponse$ = exports.EmbeddingResponse$outboundSchema = exports.EmbeddingResponse$inboundSchema = void 0;
    exports.embeddingResponseToJSON = embeddingResponseToJSON;
    exports.embeddingResponseFromJSON = embeddingResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var embeddingresponsedata_js_1 = require_embeddingresponsedata();
    var usageinfo_js_1 = require_usageinfo();
    exports.EmbeddingResponse$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema,
      data: z.array(embeddingresponsedata_js_1.EmbeddingResponseData$inboundSchema)
    });
    exports.EmbeddingResponse$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema,
      data: z.array(embeddingresponsedata_js_1.EmbeddingResponseData$outboundSchema)
    });
    var EmbeddingResponse$;
    (function(EmbeddingResponse$2) {
      EmbeddingResponse$2.inboundSchema = exports.EmbeddingResponse$inboundSchema;
      EmbeddingResponse$2.outboundSchema = exports.EmbeddingResponse$outboundSchema;
    })(EmbeddingResponse$ || (exports.EmbeddingResponse$ = EmbeddingResponse$ = {}));
    function embeddingResponseToJSON(embeddingResponse) {
      return JSON.stringify(exports.EmbeddingResponse$outboundSchema.parse(embeddingResponse));
    }
    function embeddingResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EmbeddingResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmbeddingResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/filepurpose.js
var require_filepurpose = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/filepurpose.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilePurpose$ = exports.FilePurpose$outboundSchema = exports.FilePurpose$inboundSchema = exports.FilePurpose = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.FilePurpose = {
      FineTune: "fine-tune",
      Batch: "batch"
    };
    exports.FilePurpose$inboundSchema = z.union([
      z.nativeEnum(exports.FilePurpose),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.FilePurpose$outboundSchema = z.union([
      z.nativeEnum(exports.FilePurpose),
      z.string().and(z.custom())
    ]);
    var FilePurpose$;
    (function(FilePurpose$2) {
      FilePurpose$2.inboundSchema = exports.FilePurpose$inboundSchema;
      FilePurpose$2.outboundSchema = exports.FilePurpose$outboundSchema;
    })(FilePurpose$ || (exports.FilePurpose$ = FilePurpose$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/sampletype.js
var require_sampletype = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/sampletype.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SampleType$ = exports.SampleType$outboundSchema = exports.SampleType$inboundSchema = exports.SampleType = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.SampleType = {
      Pretrain: "pretrain",
      Instruct: "instruct",
      BatchRequest: "batch_request",
      BatchResult: "batch_result",
      BatchError: "batch_error"
    };
    exports.SampleType$inboundSchema = z.union([
      z.nativeEnum(exports.SampleType),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.SampleType$outboundSchema = z.union([
      z.nativeEnum(exports.SampleType),
      z.string().and(z.custom())
    ]);
    var SampleType$;
    (function(SampleType$2) {
      SampleType$2.inboundSchema = exports.SampleType$inboundSchema;
      SampleType$2.outboundSchema = exports.SampleType$outboundSchema;
    })(SampleType$ || (exports.SampleType$ = SampleType$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/source.js
var require_source = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/source.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Source$ = exports.Source$outboundSchema = exports.Source$inboundSchema = exports.Source = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.Source = {
      Upload: "upload",
      Repository: "repository",
      Mistral: "mistral"
    };
    exports.Source$inboundSchema = z.union([
      z.nativeEnum(exports.Source),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.Source$outboundSchema = z.union([
      z.nativeEnum(exports.Source),
      z.string().and(z.custom())
    ]);
    var Source$;
    (function(Source$2) {
      Source$2.inboundSchema = exports.Source$inboundSchema;
      Source$2.outboundSchema = exports.Source$outboundSchema;
    })(Source$ || (exports.Source$ = Source$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/fileschema.js
var require_fileschema = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fileschema.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileSchema$ = exports.FileSchema$outboundSchema = exports.FileSchema$inboundSchema = void 0;
    exports.fileSchemaToJSON = fileSchemaToJSON;
    exports.fileSchemaFromJSON = fileSchemaFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var filepurpose_js_1 = require_filepurpose();
    var sampletype_js_1 = require_sampletype();
    var source_js_1 = require_source();
    exports.FileSchema$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      created_at: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$inboundSchema,
      sample_type: sampletype_js_1.SampleType$inboundSchema,
      num_lines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "sample_type": "sampleType",
        "num_lines": "numLines"
      });
    });
    exports.FileSchema$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      createdAt: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$outboundSchema,
      sampleType: sampletype_js_1.SampleType$outboundSchema,
      numLines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        sampleType: "sample_type",
        numLines: "num_lines"
      });
    });
    var FileSchema$;
    (function(FileSchema$2) {
      FileSchema$2.inboundSchema = exports.FileSchema$inboundSchema;
      FileSchema$2.outboundSchema = exports.FileSchema$outboundSchema;
    })(FileSchema$ || (exports.FileSchema$ = FileSchema$ = {}));
    function fileSchemaToJSON(fileSchema) {
      return JSON.stringify(exports.FileSchema$outboundSchema.parse(fileSchema));
    }
    function fileSchemaFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FileSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileSchema' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/filesignedurl.js
var require_filesignedurl = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/filesignedurl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileSignedURL$ = exports.FileSignedURL$outboundSchema = exports.FileSignedURL$inboundSchema = void 0;
    exports.fileSignedURLToJSON = fileSignedURLToJSON;
    exports.fileSignedURLFromJSON = fileSignedURLFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.FileSignedURL$inboundSchema = z.object({
      url: z.string()
    });
    exports.FileSignedURL$outboundSchema = z.object({
      url: z.string()
    });
    var FileSignedURL$;
    (function(FileSignedURL$2) {
      FileSignedURL$2.inboundSchema = exports.FileSignedURL$inboundSchema;
      FileSignedURL$2.outboundSchema = exports.FileSignedURL$outboundSchema;
    })(FileSignedURL$ || (exports.FileSignedURL$ = FileSignedURL$ = {}));
    function fileSignedURLToJSON(fileSignedURL) {
      return JSON.stringify(exports.FileSignedURL$outboundSchema.parse(fileSignedURL));
    }
    function fileSignedURLFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FileSignedURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileSignedURL' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/fimcompletionrequest.js
var require_fimcompletionrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fimcompletionrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIMCompletionRequest$ = exports.FIMCompletionRequest$outboundSchema = exports.FIMCompletionRequest$inboundSchema = exports.FIMCompletionRequestStop$ = exports.FIMCompletionRequestStop$outboundSchema = exports.FIMCompletionRequestStop$inboundSchema = void 0;
    exports.fimCompletionRequestStopToJSON = fimCompletionRequestStopToJSON;
    exports.fimCompletionRequestStopFromJSON = fimCompletionRequestStopFromJSON;
    exports.fimCompletionRequestToJSON = fimCompletionRequestToJSON;
    exports.fimCompletionRequestFromJSON = fimCompletionRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FIMCompletionRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.FIMCompletionRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var FIMCompletionRequestStop$;
    (function(FIMCompletionRequestStop$2) {
      FIMCompletionRequestStop$2.inboundSchema = exports.FIMCompletionRequestStop$inboundSchema;
      FIMCompletionRequestStop$2.outboundSchema = exports.FIMCompletionRequestStop$outboundSchema;
    })(FIMCompletionRequestStop$ || (exports.FIMCompletionRequestStop$ = FIMCompletionRequestStop$ = {}));
    function fimCompletionRequestStopToJSON(fimCompletionRequestStop) {
      return JSON.stringify(exports.FIMCompletionRequestStop$outboundSchema.parse(fimCompletionRequestStop));
    }
    function fimCompletionRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionRequestStop' from JSON`);
    }
    exports.FIMCompletionRequest$inboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().default(1),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      min_tokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "min_tokens": "minTokens"
      });
    });
    exports.FIMCompletionRequest$outboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().default(1),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      minTokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        minTokens: "min_tokens"
      });
    });
    var FIMCompletionRequest$;
    (function(FIMCompletionRequest$2) {
      FIMCompletionRequest$2.inboundSchema = exports.FIMCompletionRequest$inboundSchema;
      FIMCompletionRequest$2.outboundSchema = exports.FIMCompletionRequest$outboundSchema;
    })(FIMCompletionRequest$ || (exports.FIMCompletionRequest$ = FIMCompletionRequest$ = {}));
    function fimCompletionRequestToJSON(fimCompletionRequest) {
      return JSON.stringify(exports.FIMCompletionRequest$outboundSchema.parse(fimCompletionRequest));
    }
    function fimCompletionRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/fimcompletionresponse.js
var require_fimcompletionresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fimcompletionresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIMCompletionResponse$ = exports.FIMCompletionResponse$outboundSchema = exports.FIMCompletionResponse$inboundSchema = void 0;
    exports.fimCompletionResponseToJSON = fimCompletionResponseToJSON;
    exports.fimCompletionResponseFromJSON = fimCompletionResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var chatcompletionchoice_js_1 = require_chatcompletionchoice();
    var usageinfo_js_1 = require_usageinfo();
    exports.FIMCompletionResponse$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$inboundSchema).optional()
    });
    exports.FIMCompletionResponse$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$outboundSchema).optional()
    });
    var FIMCompletionResponse$;
    (function(FIMCompletionResponse$2) {
      FIMCompletionResponse$2.inboundSchema = exports.FIMCompletionResponse$inboundSchema;
      FIMCompletionResponse$2.outboundSchema = exports.FIMCompletionResponse$outboundSchema;
    })(FIMCompletionResponse$ || (exports.FIMCompletionResponse$ = FIMCompletionResponse$ = {}));
    function fimCompletionResponseToJSON(fimCompletionResponse) {
      return JSON.stringify(exports.FIMCompletionResponse$outboundSchema.parse(fimCompletionResponse));
    }
    function fimCompletionResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/fimcompletionstreamrequest.js
var require_fimcompletionstreamrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fimcompletionstreamrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIMCompletionStreamRequest$ = exports.FIMCompletionStreamRequest$outboundSchema = exports.FIMCompletionStreamRequest$inboundSchema = exports.FIMCompletionStreamRequestStop$ = exports.FIMCompletionStreamRequestStop$outboundSchema = exports.FIMCompletionStreamRequestStop$inboundSchema = void 0;
    exports.fimCompletionStreamRequestStopToJSON = fimCompletionStreamRequestStopToJSON;
    exports.fimCompletionStreamRequestStopFromJSON = fimCompletionStreamRequestStopFromJSON;
    exports.fimCompletionStreamRequestToJSON = fimCompletionStreamRequestToJSON;
    exports.fimCompletionStreamRequestFromJSON = fimCompletionStreamRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FIMCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.FIMCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var FIMCompletionStreamRequestStop$;
    (function(FIMCompletionStreamRequestStop$2) {
      FIMCompletionStreamRequestStop$2.inboundSchema = exports.FIMCompletionStreamRequestStop$inboundSchema;
      FIMCompletionStreamRequestStop$2.outboundSchema = exports.FIMCompletionStreamRequestStop$outboundSchema;
    })(FIMCompletionStreamRequestStop$ || (exports.FIMCompletionStreamRequestStop$ = FIMCompletionStreamRequestStop$ = {}));
    function fimCompletionStreamRequestStopToJSON(fimCompletionStreamRequestStop) {
      return JSON.stringify(exports.FIMCompletionStreamRequestStop$outboundSchema.parse(fimCompletionStreamRequestStop));
    }
    function fimCompletionStreamRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionStreamRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionStreamRequestStop' from JSON`);
    }
    exports.FIMCompletionStreamRequest$inboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().default(1),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      min_tokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "min_tokens": "minTokens"
      });
    });
    exports.FIMCompletionStreamRequest$outboundSchema = z.object({
      model: z.nullable(z.string()),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().default(1),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      minTokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        minTokens: "min_tokens"
      });
    });
    var FIMCompletionStreamRequest$;
    (function(FIMCompletionStreamRequest$2) {
      FIMCompletionStreamRequest$2.inboundSchema = exports.FIMCompletionStreamRequest$inboundSchema;
      FIMCompletionStreamRequest$2.outboundSchema = exports.FIMCompletionStreamRequest$outboundSchema;
    })(FIMCompletionStreamRequest$ || (exports.FIMCompletionStreamRequest$ = FIMCompletionStreamRequest$ = {}));
    function fimCompletionStreamRequestToJSON(fimCompletionStreamRequest) {
      return JSON.stringify(exports.FIMCompletionStreamRequest$outboundSchema.parse(fimCompletionStreamRequest));
    }
    function fimCompletionStreamRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionStreamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionStreamRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ftmodelcapabilitiesout.js
var require_ftmodelcapabilitiesout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ftmodelcapabilitiesout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FTModelCapabilitiesOut$ = exports.FTModelCapabilitiesOut$outboundSchema = exports.FTModelCapabilitiesOut$inboundSchema = void 0;
    exports.ftModelCapabilitiesOutToJSON = ftModelCapabilitiesOutToJSON;
    exports.ftModelCapabilitiesOutFromJSON = ftModelCapabilitiesOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FTModelCapabilitiesOut$inboundSchema = z.object({
      completion_chat: z.boolean().default(true),
      completion_fim: z.boolean().default(false),
      function_calling: z.boolean().default(false),
      fine_tuning: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "completion_chat": "completionChat",
        "completion_fim": "completionFim",
        "function_calling": "functionCalling",
        "fine_tuning": "fineTuning"
      });
    });
    exports.FTModelCapabilitiesOut$outboundSchema = z.object({
      completionChat: z.boolean().default(true),
      completionFim: z.boolean().default(false),
      functionCalling: z.boolean().default(false),
      fineTuning: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        completionChat: "completion_chat",
        completionFim: "completion_fim",
        functionCalling: "function_calling",
        fineTuning: "fine_tuning"
      });
    });
    var FTModelCapabilitiesOut$;
    (function(FTModelCapabilitiesOut$2) {
      FTModelCapabilitiesOut$2.inboundSchema = exports.FTModelCapabilitiesOut$inboundSchema;
      FTModelCapabilitiesOut$2.outboundSchema = exports.FTModelCapabilitiesOut$outboundSchema;
    })(FTModelCapabilitiesOut$ || (exports.FTModelCapabilitiesOut$ = FTModelCapabilitiesOut$ = {}));
    function ftModelCapabilitiesOutToJSON(ftModelCapabilitiesOut) {
      return JSON.stringify(exports.FTModelCapabilitiesOut$outboundSchema.parse(ftModelCapabilitiesOut));
    }
    function ftModelCapabilitiesOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FTModelCapabilitiesOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FTModelCapabilitiesOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ftmodelcard.js
var require_ftmodelcard = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ftmodelcard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FTModelCard$ = exports.FTModelCard$outboundSchema = exports.FTModelCard$inboundSchema = exports.FTModelCardType$ = exports.FTModelCardType$outboundSchema = exports.FTModelCardType$inboundSchema = exports.FTModelCardType = void 0;
    exports.ftModelCardToJSON = ftModelCardToJSON;
    exports.ftModelCardFromJSON = ftModelCardFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var modelcapabilities_js_1 = require_modelcapabilities();
    exports.FTModelCardType = {
      FineTuned: "fine-tuned"
    };
    exports.FTModelCardType$inboundSchema = z.nativeEnum(exports.FTModelCardType);
    exports.FTModelCardType$outboundSchema = exports.FTModelCardType$inboundSchema;
    var FTModelCardType$;
    (function(FTModelCardType$2) {
      FTModelCardType$2.inboundSchema = exports.FTModelCardType$inboundSchema;
      FTModelCardType$2.outboundSchema = exports.FTModelCardType$outboundSchema;
    })(FTModelCardType$ || (exports.FTModelCardType$ = FTModelCardType$ = {}));
    exports.FTModelCard$inboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      owned_by: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$inboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      max_context_length: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      default_model_temperature: z.nullable(z.number()).optional(),
      type: z.literal("fine-tuned").default("fine-tuned"),
      job: z.string(),
      root: z.string(),
      archived: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "owned_by": "ownedBy",
        "max_context_length": "maxContextLength",
        "default_model_temperature": "defaultModelTemperature"
      });
    });
    exports.FTModelCard$outboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      ownedBy: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$outboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      maxContextLength: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      defaultModelTemperature: z.nullable(z.number()).optional(),
      type: z.literal("fine-tuned").default("fine-tuned"),
      job: z.string(),
      root: z.string(),
      archived: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        ownedBy: "owned_by",
        maxContextLength: "max_context_length",
        defaultModelTemperature: "default_model_temperature"
      });
    });
    var FTModelCard$;
    (function(FTModelCard$2) {
      FTModelCard$2.inboundSchema = exports.FTModelCard$inboundSchema;
      FTModelCard$2.outboundSchema = exports.FTModelCard$outboundSchema;
    })(FTModelCard$ || (exports.FTModelCard$ = FTModelCard$ = {}));
    function ftModelCardToJSON(ftModelCard) {
      return JSON.stringify(exports.FTModelCard$outboundSchema.parse(ftModelCard));
    }
    function ftModelCardFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FTModelCard$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FTModelCard' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ftmodelout.js
var require_ftmodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ftmodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FTModelOut$ = exports.FTModelOut$outboundSchema = exports.FTModelOut$inboundSchema = exports.FTModelOutObject$ = exports.FTModelOutObject$outboundSchema = exports.FTModelOutObject$inboundSchema = exports.FTModelOutObject = void 0;
    exports.ftModelOutToJSON = ftModelOutToJSON;
    exports.ftModelOutFromJSON = ftModelOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var ftmodelcapabilitiesout_js_1 = require_ftmodelcapabilitiesout();
    exports.FTModelOutObject = {
      Model: "model"
    };
    exports.FTModelOutObject$inboundSchema = z.nativeEnum(exports.FTModelOutObject);
    exports.FTModelOutObject$outboundSchema = exports.FTModelOutObject$inboundSchema;
    var FTModelOutObject$;
    (function(FTModelOutObject$2) {
      FTModelOutObject$2.inboundSchema = exports.FTModelOutObject$inboundSchema;
      FTModelOutObject$2.outboundSchema = exports.FTModelOutObject$outboundSchema;
    })(FTModelOutObject$ || (exports.FTModelOutObject$ = FTModelOutObject$ = {}));
    exports.FTModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      created: z.number().int(),
      owned_by: z.string(),
      root: z.string(),
      archived: z.boolean(),
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      capabilities: ftmodelcapabilitiesout_js_1.FTModelCapabilitiesOut$inboundSchema,
      max_context_length: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      job: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "owned_by": "ownedBy",
        "max_context_length": "maxContextLength"
      });
    });
    exports.FTModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      created: z.number().int(),
      ownedBy: z.string(),
      root: z.string(),
      archived: z.boolean(),
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      capabilities: ftmodelcapabilitiesout_js_1.FTModelCapabilitiesOut$outboundSchema,
      maxContextLength: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      job: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        ownedBy: "owned_by",
        maxContextLength: "max_context_length"
      });
    });
    var FTModelOut$;
    (function(FTModelOut$2) {
      FTModelOut$2.inboundSchema = exports.FTModelOut$inboundSchema;
      FTModelOut$2.outboundSchema = exports.FTModelOut$outboundSchema;
    })(FTModelOut$ || (exports.FTModelOut$ = FTModelOut$ = {}));
    function ftModelOutToJSON(ftModelOut) {
      return JSON.stringify(exports.FTModelOut$outboundSchema.parse(ftModelOut));
    }
    function ftModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FTModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FTModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/githubrepositoryin.js
var require_githubrepositoryin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/githubrepositoryin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GithubRepositoryIn$ = exports.GithubRepositoryIn$outboundSchema = exports.GithubRepositoryIn$inboundSchema = exports.GithubRepositoryInType$ = exports.GithubRepositoryInType$outboundSchema = exports.GithubRepositoryInType$inboundSchema = exports.GithubRepositoryInType = void 0;
    exports.githubRepositoryInToJSON = githubRepositoryInToJSON;
    exports.githubRepositoryInFromJSON = githubRepositoryInFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.GithubRepositoryInType = {
      Github: "github"
    };
    exports.GithubRepositoryInType$inboundSchema = z.nativeEnum(exports.GithubRepositoryInType);
    exports.GithubRepositoryInType$outboundSchema = exports.GithubRepositoryInType$inboundSchema;
    var GithubRepositoryInType$;
    (function(GithubRepositoryInType$2) {
      GithubRepositoryInType$2.inboundSchema = exports.GithubRepositoryInType$inboundSchema;
      GithubRepositoryInType$2.outboundSchema = exports.GithubRepositoryInType$outboundSchema;
    })(GithubRepositoryInType$ || (exports.GithubRepositoryInType$ = GithubRepositoryInType$ = {}));
    exports.GithubRepositoryIn$inboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      token: z.string()
    });
    exports.GithubRepositoryIn$outboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      token: z.string()
    });
    var GithubRepositoryIn$;
    (function(GithubRepositoryIn$2) {
      GithubRepositoryIn$2.inboundSchema = exports.GithubRepositoryIn$inboundSchema;
      GithubRepositoryIn$2.outboundSchema = exports.GithubRepositoryIn$outboundSchema;
    })(GithubRepositoryIn$ || (exports.GithubRepositoryIn$ = GithubRepositoryIn$ = {}));
    function githubRepositoryInToJSON(githubRepositoryIn) {
      return JSON.stringify(exports.GithubRepositoryIn$outboundSchema.parse(githubRepositoryIn));
    }
    function githubRepositoryInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GithubRepositoryIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GithubRepositoryIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/trainingfile.js
var require_trainingfile = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/trainingfile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrainingFile$ = exports.TrainingFile$outboundSchema = exports.TrainingFile$inboundSchema = void 0;
    exports.trainingFileToJSON = trainingFileToJSON;
    exports.trainingFileFromJSON = trainingFileFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.TrainingFile$inboundSchema = z.object({
      file_id: z.string(),
      weight: z.number().default(1)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.TrainingFile$outboundSchema = z.object({
      fileId: z.string(),
      weight: z.number().default(1)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var TrainingFile$;
    (function(TrainingFile$2) {
      TrainingFile$2.inboundSchema = exports.TrainingFile$inboundSchema;
      TrainingFile$2.outboundSchema = exports.TrainingFile$outboundSchema;
    })(TrainingFile$ || (exports.TrainingFile$ = TrainingFile$ = {}));
    function trainingFileToJSON(trainingFile) {
      return JSON.stringify(exports.TrainingFile$outboundSchema.parse(trainingFile));
    }
    function trainingFileFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrainingFile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrainingFile' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/trainingparametersin.js
var require_trainingparametersin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/trainingparametersin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrainingParametersIn$ = exports.TrainingParametersIn$outboundSchema = exports.TrainingParametersIn$inboundSchema = void 0;
    exports.trainingParametersInToJSON = trainingParametersInToJSON;
    exports.trainingParametersInFromJSON = trainingParametersInFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.TrainingParametersIn$inboundSchema = z.object({
      training_steps: z.nullable(z.number().int()).optional(),
      learning_rate: z.number().default(1e-4),
      weight_decay: z.nullable(z.number()).optional(),
      warmup_fraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fim_ratio: z.nullable(z.number()).optional(),
      seq_len: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "training_steps": "trainingSteps",
        "learning_rate": "learningRate",
        "weight_decay": "weightDecay",
        "warmup_fraction": "warmupFraction",
        "fim_ratio": "fimRatio",
        "seq_len": "seqLen"
      });
    });
    exports.TrainingParametersIn$outboundSchema = z.object({
      trainingSteps: z.nullable(z.number().int()).optional(),
      learningRate: z.number().default(1e-4),
      weightDecay: z.nullable(z.number()).optional(),
      warmupFraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fimRatio: z.nullable(z.number()).optional(),
      seqLen: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainingSteps: "training_steps",
        learningRate: "learning_rate",
        weightDecay: "weight_decay",
        warmupFraction: "warmup_fraction",
        fimRatio: "fim_ratio",
        seqLen: "seq_len"
      });
    });
    var TrainingParametersIn$;
    (function(TrainingParametersIn$2) {
      TrainingParametersIn$2.inboundSchema = exports.TrainingParametersIn$inboundSchema;
      TrainingParametersIn$2.outboundSchema = exports.TrainingParametersIn$outboundSchema;
    })(TrainingParametersIn$ || (exports.TrainingParametersIn$ = TrainingParametersIn$ = {}));
    function trainingParametersInToJSON(trainingParametersIn) {
      return JSON.stringify(exports.TrainingParametersIn$outboundSchema.parse(trainingParametersIn));
    }
    function trainingParametersInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrainingParametersIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrainingParametersIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/wandbintegration.js
var require_wandbintegration = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/wandbintegration.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WandbIntegration$ = exports.WandbIntegration$outboundSchema = exports.WandbIntegration$inboundSchema = exports.WandbIntegrationType$ = exports.WandbIntegrationType$outboundSchema = exports.WandbIntegrationType$inboundSchema = exports.WandbIntegrationType = void 0;
    exports.wandbIntegrationToJSON = wandbIntegrationToJSON;
    exports.wandbIntegrationFromJSON = wandbIntegrationFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.WandbIntegrationType = {
      Wandb: "wandb"
    };
    exports.WandbIntegrationType$inboundSchema = z.nativeEnum(exports.WandbIntegrationType);
    exports.WandbIntegrationType$outboundSchema = exports.WandbIntegrationType$inboundSchema;
    var WandbIntegrationType$;
    (function(WandbIntegrationType$2) {
      WandbIntegrationType$2.inboundSchema = exports.WandbIntegrationType$inboundSchema;
      WandbIntegrationType$2.outboundSchema = exports.WandbIntegrationType$outboundSchema;
    })(WandbIntegrationType$ || (exports.WandbIntegrationType$ = WandbIntegrationType$ = {}));
    exports.WandbIntegration$inboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      api_key: z.string(),
      run_name: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "api_key": "apiKey",
        "run_name": "runName"
      });
    });
    exports.WandbIntegration$outboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      apiKey: z.string(),
      runName: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        apiKey: "api_key",
        runName: "run_name"
      });
    });
    var WandbIntegration$;
    (function(WandbIntegration$2) {
      WandbIntegration$2.inboundSchema = exports.WandbIntegration$inboundSchema;
      WandbIntegration$2.outboundSchema = exports.WandbIntegration$outboundSchema;
    })(WandbIntegration$ || (exports.WandbIntegration$ = WandbIntegration$ = {}));
    function wandbIntegrationToJSON(wandbIntegration) {
      return JSON.stringify(exports.WandbIntegration$outboundSchema.parse(wandbIntegration));
    }
    function wandbIntegrationFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WandbIntegration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WandbIntegration' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobin.js
var require_jobin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobIn$ = exports.JobIn$outboundSchema = exports.JobIn$inboundSchema = exports.JobInRepositories$ = exports.JobInRepositories$outboundSchema = exports.JobInRepositories$inboundSchema = exports.JobInIntegrations$ = exports.JobInIntegrations$outboundSchema = exports.JobInIntegrations$inboundSchema = void 0;
    exports.jobInIntegrationsToJSON = jobInIntegrationsToJSON;
    exports.jobInIntegrationsFromJSON = jobInIntegrationsFromJSON;
    exports.jobInRepositoriesToJSON = jobInRepositoriesToJSON;
    exports.jobInRepositoriesFromJSON = jobInRepositoriesFromJSON;
    exports.jobInToJSON = jobInToJSON;
    exports.jobInFromJSON = jobInFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var githubrepositoryin_js_1 = require_githubrepositoryin();
    var trainingfile_js_1 = require_trainingfile();
    var trainingparametersin_js_1 = require_trainingparametersin();
    var wandbintegration_js_1 = require_wandbintegration();
    exports.JobInIntegrations$inboundSchema = wandbintegration_js_1.WandbIntegration$inboundSchema;
    exports.JobInIntegrations$outboundSchema = wandbintegration_js_1.WandbIntegration$outboundSchema;
    var JobInIntegrations$;
    (function(JobInIntegrations$2) {
      JobInIntegrations$2.inboundSchema = exports.JobInIntegrations$inboundSchema;
      JobInIntegrations$2.outboundSchema = exports.JobInIntegrations$outboundSchema;
    })(JobInIntegrations$ || (exports.JobInIntegrations$ = JobInIntegrations$ = {}));
    function jobInIntegrationsToJSON(jobInIntegrations) {
      return JSON.stringify(exports.JobInIntegrations$outboundSchema.parse(jobInIntegrations));
    }
    function jobInIntegrationsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobInIntegrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobInIntegrations' from JSON`);
    }
    exports.JobInRepositories$inboundSchema = githubrepositoryin_js_1.GithubRepositoryIn$inboundSchema;
    exports.JobInRepositories$outboundSchema = githubrepositoryin_js_1.GithubRepositoryIn$outboundSchema;
    var JobInRepositories$;
    (function(JobInRepositories$2) {
      JobInRepositories$2.inboundSchema = exports.JobInRepositories$inboundSchema;
      JobInRepositories$2.outboundSchema = exports.JobInRepositories$outboundSchema;
    })(JobInRepositories$ || (exports.JobInRepositories$ = JobInRepositories$ = {}));
    function jobInRepositoriesToJSON(jobInRepositories) {
      return JSON.stringify(exports.JobInRepositories$outboundSchema.parse(jobInRepositories));
    }
    function jobInRepositoriesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobInRepositories$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobInRepositories' from JSON`);
    }
    exports.JobIn$inboundSchema = z.object({
      model: z.string(),
      training_files: z.array(trainingfile_js_1.TrainingFile$inboundSchema).optional(),
      validation_files: z.nullable(z.array(z.string())).optional(),
      hyperparameters: trainingparametersin_js_1.TrainingParametersIn$inboundSchema,
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegration_js_1.WandbIntegration$inboundSchema)).optional(),
      repositories: z.array(githubrepositoryin_js_1.GithubRepositoryIn$inboundSchema).optional(),
      auto_start: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "training_files": "trainingFiles",
        "validation_files": "validationFiles",
        "auto_start": "autoStart"
      });
    });
    exports.JobIn$outboundSchema = z.object({
      model: z.string(),
      trainingFiles: z.array(trainingfile_js_1.TrainingFile$outboundSchema).optional(),
      validationFiles: z.nullable(z.array(z.string())).optional(),
      hyperparameters: trainingparametersin_js_1.TrainingParametersIn$outboundSchema,
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegration_js_1.WandbIntegration$outboundSchema)).optional(),
      repositories: z.array(githubrepositoryin_js_1.GithubRepositoryIn$outboundSchema).optional(),
      autoStart: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainingFiles: "training_files",
        validationFiles: "validation_files",
        autoStart: "auto_start"
      });
    });
    var JobIn$;
    (function(JobIn$2) {
      JobIn$2.inboundSchema = exports.JobIn$inboundSchema;
      JobIn$2.outboundSchema = exports.JobIn$outboundSchema;
    })(JobIn$ || (exports.JobIn$ = JobIn$ = {}));
    function jobInToJSON(jobIn) {
      return JSON.stringify(exports.JobIn$outboundSchema.parse(jobIn));
    }
    function jobInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobout.js
var require_jobout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobOut$ = exports.JobOut$outboundSchema = exports.JobOut$inboundSchema = exports.Repositories$ = exports.Repositories$outboundSchema = exports.Repositories$inboundSchema = exports.Integrations$ = exports.Integrations$outboundSchema = exports.Integrations$inboundSchema = exports.ObjectT$ = exports.ObjectT$outboundSchema = exports.ObjectT$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.ObjectT = exports.Status = void 0;
    exports.integrationsToJSON = integrationsToJSON;
    exports.integrationsFromJSON = integrationsFromJSON;
    exports.repositoriesToJSON = repositoriesToJSON;
    exports.repositoriesFromJSON = repositoriesFromJSON;
    exports.jobOutToJSON = jobOutToJSON;
    exports.jobOutFromJSON = jobOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var githubrepositoryout_js_1 = require_githubrepositoryout();
    var jobmetadataout_js_1 = require_jobmetadataout();
    var trainingparameters_js_1 = require_trainingparameters();
    var wandbintegrationout_js_1 = require_wandbintegrationout();
    exports.Status = {
      Queued: "QUEUED",
      Started: "STARTED",
      Validating: "VALIDATING",
      Validated: "VALIDATED",
      Running: "RUNNING",
      FailedValidation: "FAILED_VALIDATION",
      Failed: "FAILED",
      Success: "SUCCESS",
      Cancelled: "CANCELLED",
      CancellationRequested: "CANCELLATION_REQUESTED"
    };
    exports.ObjectT = {
      Job: "job"
    };
    exports.Status$inboundSchema = z.nativeEnum(exports.Status);
    exports.Status$outboundSchema = exports.Status$inboundSchema;
    var Status$;
    (function(Status$2) {
      Status$2.inboundSchema = exports.Status$inboundSchema;
      Status$2.outboundSchema = exports.Status$outboundSchema;
    })(Status$ || (exports.Status$ = Status$ = {}));
    exports.ObjectT$inboundSchema = z.nativeEnum(exports.ObjectT);
    exports.ObjectT$outboundSchema = exports.ObjectT$inboundSchema;
    var ObjectT$;
    (function(ObjectT$2) {
      ObjectT$2.inboundSchema = exports.ObjectT$inboundSchema;
      ObjectT$2.outboundSchema = exports.ObjectT$outboundSchema;
    })(ObjectT$ || (exports.ObjectT$ = ObjectT$ = {}));
    exports.Integrations$inboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema;
    exports.Integrations$outboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema;
    var Integrations$;
    (function(Integrations$2) {
      Integrations$2.inboundSchema = exports.Integrations$inboundSchema;
      Integrations$2.outboundSchema = exports.Integrations$outboundSchema;
    })(Integrations$ || (exports.Integrations$ = Integrations$ = {}));
    function integrationsToJSON(integrations) {
      return JSON.stringify(exports.Integrations$outboundSchema.parse(integrations));
    }
    function integrationsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Integrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Integrations' from JSON`);
    }
    exports.Repositories$inboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema;
    exports.Repositories$outboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema;
    var Repositories$;
    (function(Repositories$2) {
      Repositories$2.inboundSchema = exports.Repositories$inboundSchema;
      Repositories$2.outboundSchema = exports.Repositories$outboundSchema;
    })(Repositories$ || (exports.Repositories$ = Repositories$ = {}));
    function repositoriesToJSON(repositories) {
      return JSON.stringify(exports.Repositories$outboundSchema.parse(repositories));
    }
    function repositoriesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Repositories$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Repositories' from JSON`);
    }
    exports.JobOut$inboundSchema = z.object({
      id: z.string(),
      auto_start: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$inboundSchema,
      model: z.string(),
      status: exports.Status$inboundSchema,
      job_type: z.string(),
      created_at: z.number().int(),
      modified_at: z.number().int(),
      training_files: z.array(z.string()),
      validation_files: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fine_tuned_model: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema)).optional(),
      trained_tokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "auto_start": "autoStart",
        "job_type": "jobType",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "training_files": "trainingFiles",
        "validation_files": "validationFiles",
        "fine_tuned_model": "fineTunedModel",
        "trained_tokens": "trainedTokens"
      });
    });
    exports.JobOut$outboundSchema = z.object({
      id: z.string(),
      autoStart: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$outboundSchema,
      model: z.string(),
      status: exports.Status$outboundSchema,
      jobType: z.string(),
      createdAt: z.number().int(),
      modifiedAt: z.number().int(),
      trainingFiles: z.array(z.string()),
      validationFiles: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fineTunedModel: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema)).optional(),
      trainedTokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        autoStart: "auto_start",
        jobType: "job_type",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        trainingFiles: "training_files",
        validationFiles: "validation_files",
        fineTunedModel: "fine_tuned_model",
        trainedTokens: "trained_tokens"
      });
    });
    var JobOut$;
    (function(JobOut$2) {
      JobOut$2.inboundSchema = exports.JobOut$inboundSchema;
      JobOut$2.outboundSchema = exports.JobOut$outboundSchema;
    })(JobOut$ || (exports.JobOut$ = JobOut$ = {}));
    function jobOutToJSON(jobOut) {
      return JSON.stringify(exports.JobOut$outboundSchema.parse(jobOut));
    }
    function jobOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobsout.js
var require_jobsout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobsout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsOut$ = exports.JobsOut$outboundSchema = exports.JobsOut$inboundSchema = exports.JobsOutObject$ = exports.JobsOutObject$outboundSchema = exports.JobsOutObject$inboundSchema = exports.JobsOutObject = void 0;
    exports.jobsOutToJSON = jobsOutToJSON;
    exports.jobsOutFromJSON = jobsOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var jobout_js_1 = require_jobout();
    exports.JobsOutObject = {
      List: "list"
    };
    exports.JobsOutObject$inboundSchema = z.nativeEnum(exports.JobsOutObject);
    exports.JobsOutObject$outboundSchema = exports.JobsOutObject$inboundSchema;
    var JobsOutObject$;
    (function(JobsOutObject$2) {
      JobsOutObject$2.inboundSchema = exports.JobsOutObject$inboundSchema;
      JobsOutObject$2.outboundSchema = exports.JobsOutObject$outboundSchema;
    })(JobsOutObject$ || (exports.JobsOutObject$ = JobsOutObject$ = {}));
    exports.JobsOut$inboundSchema = z.object({
      data: z.array(jobout_js_1.JobOut$inboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    exports.JobsOut$outboundSchema = z.object({
      data: z.array(jobout_js_1.JobOut$outboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    var JobsOut$;
    (function(JobsOut$2) {
      JobsOut$2.inboundSchema = exports.JobsOut$inboundSchema;
      JobsOut$2.outboundSchema = exports.JobsOut$outboundSchema;
    })(JobsOut$ || (exports.JobsOut$ = JobsOut$ = {}));
    function jobsOutToJSON(jobsOut) {
      return JSON.stringify(exports.JobsOut$outboundSchema.parse(jobsOut));
    }
    function jobsOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/legacyjobmetadataout.js
var require_legacyjobmetadataout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/legacyjobmetadataout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyJobMetadataOut$ = exports.LegacyJobMetadataOut$outboundSchema = exports.LegacyJobMetadataOut$inboundSchema = exports.LegacyJobMetadataOutObject$ = exports.LegacyJobMetadataOutObject$outboundSchema = exports.LegacyJobMetadataOutObject$inboundSchema = exports.LegacyJobMetadataOutObject = void 0;
    exports.legacyJobMetadataOutToJSON = legacyJobMetadataOutToJSON;
    exports.legacyJobMetadataOutFromJSON = legacyJobMetadataOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.LegacyJobMetadataOutObject = {
      JobMetadata: "job.metadata"
    };
    exports.LegacyJobMetadataOutObject$inboundSchema = z.nativeEnum(exports.LegacyJobMetadataOutObject);
    exports.LegacyJobMetadataOutObject$outboundSchema = exports.LegacyJobMetadataOutObject$inboundSchema;
    var LegacyJobMetadataOutObject$;
    (function(LegacyJobMetadataOutObject$2) {
      LegacyJobMetadataOutObject$2.inboundSchema = exports.LegacyJobMetadataOutObject$inboundSchema;
      LegacyJobMetadataOutObject$2.outboundSchema = exports.LegacyJobMetadataOutObject$outboundSchema;
    })(LegacyJobMetadataOutObject$ || (exports.LegacyJobMetadataOutObject$ = LegacyJobMetadataOutObject$ = {}));
    exports.LegacyJobMetadataOut$inboundSchema = z.object({
      expected_duration_seconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      cost_currency: z.nullable(z.string()).optional(),
      train_tokens_per_step: z.nullable(z.number().int()).optional(),
      train_tokens: z.nullable(z.number().int()).optional(),
      data_tokens: z.nullable(z.number().int()).optional(),
      estimated_start_time: z.nullable(z.number().int()).optional(),
      deprecated: z.boolean().default(true),
      details: z.string(),
      epochs: z.nullable(z.number()).optional(),
      training_steps: z.nullable(z.number().int()).optional(),
      object: z.literal("job.metadata").default("job.metadata")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "expected_duration_seconds": "expectedDurationSeconds",
        "cost_currency": "costCurrency",
        "train_tokens_per_step": "trainTokensPerStep",
        "train_tokens": "trainTokens",
        "data_tokens": "dataTokens",
        "estimated_start_time": "estimatedStartTime",
        "training_steps": "trainingSteps"
      });
    });
    exports.LegacyJobMetadataOut$outboundSchema = z.object({
      expectedDurationSeconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      costCurrency: z.nullable(z.string()).optional(),
      trainTokensPerStep: z.nullable(z.number().int()).optional(),
      trainTokens: z.nullable(z.number().int()).optional(),
      dataTokens: z.nullable(z.number().int()).optional(),
      estimatedStartTime: z.nullable(z.number().int()).optional(),
      deprecated: z.boolean().default(true),
      details: z.string(),
      epochs: z.nullable(z.number()).optional(),
      trainingSteps: z.nullable(z.number().int()).optional(),
      object: z.literal("job.metadata").default("job.metadata")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        expectedDurationSeconds: "expected_duration_seconds",
        costCurrency: "cost_currency",
        trainTokensPerStep: "train_tokens_per_step",
        trainTokens: "train_tokens",
        dataTokens: "data_tokens",
        estimatedStartTime: "estimated_start_time",
        trainingSteps: "training_steps"
      });
    });
    var LegacyJobMetadataOut$;
    (function(LegacyJobMetadataOut$2) {
      LegacyJobMetadataOut$2.inboundSchema = exports.LegacyJobMetadataOut$inboundSchema;
      LegacyJobMetadataOut$2.outboundSchema = exports.LegacyJobMetadataOut$outboundSchema;
    })(LegacyJobMetadataOut$ || (exports.LegacyJobMetadataOut$ = LegacyJobMetadataOut$ = {}));
    function legacyJobMetadataOutToJSON(legacyJobMetadataOut) {
      return JSON.stringify(exports.LegacyJobMetadataOut$outboundSchema.parse(legacyJobMetadataOut));
    }
    function legacyJobMetadataOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LegacyJobMetadataOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegacyJobMetadataOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/listfilesout.js
var require_listfilesout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/listfilesout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListFilesOut$ = exports.ListFilesOut$outboundSchema = exports.ListFilesOut$inboundSchema = void 0;
    exports.listFilesOutToJSON = listFilesOutToJSON;
    exports.listFilesOutFromJSON = listFilesOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var fileschema_js_1 = require_fileschema();
    exports.ListFilesOut$inboundSchema = z.object({
      data: z.array(fileschema_js_1.FileSchema$inboundSchema),
      object: z.string(),
      total: z.number().int()
    });
    exports.ListFilesOut$outboundSchema = z.object({
      data: z.array(fileschema_js_1.FileSchema$outboundSchema),
      object: z.string(),
      total: z.number().int()
    });
    var ListFilesOut$;
    (function(ListFilesOut$2) {
      ListFilesOut$2.inboundSchema = exports.ListFilesOut$inboundSchema;
      ListFilesOut$2.outboundSchema = exports.ListFilesOut$outboundSchema;
    })(ListFilesOut$ || (exports.ListFilesOut$ = ListFilesOut$ = {}));
    function listFilesOutToJSON(listFilesOut) {
      return JSON.stringify(exports.ListFilesOut$outboundSchema.parse(listFilesOut));
    }
    function listFilesOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListFilesOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListFilesOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/modellist.js
var require_modellist = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/modellist.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModelList$ = exports.ModelList$outboundSchema = exports.ModelList$inboundSchema = exports.Data$ = exports.Data$outboundSchema = exports.Data$inboundSchema = void 0;
    exports.dataToJSON = dataToJSON;
    exports.dataFromJSON = dataFromJSON;
    exports.modelListToJSON = modelListToJSON;
    exports.modelListFromJSON = modelListFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var basemodelcard_js_1 = require_basemodelcard();
    var ftmodelcard_js_1 = require_ftmodelcard();
    exports.Data$inboundSchema = z.union([
      basemodelcard_js_1.BaseModelCard$inboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      ftmodelcard_js_1.FTModelCard$inboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    exports.Data$outboundSchema = z.union([
      basemodelcard_js_1.BaseModelCard$outboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      ftmodelcard_js_1.FTModelCard$outboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    var Data$;
    (function(Data$2) {
      Data$2.inboundSchema = exports.Data$inboundSchema;
      Data$2.outboundSchema = exports.Data$outboundSchema;
    })(Data$ || (exports.Data$ = Data$ = {}));
    function dataToJSON(data) {
      return JSON.stringify(exports.Data$outboundSchema.parse(data));
    }
    function dataFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Data$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Data' from JSON`);
    }
    exports.ModelList$inboundSchema = z.object({
      object: z.string().default("list"),
      data: z.array(z.union([
        basemodelcard_js_1.BaseModelCard$inboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
          type: v.type
        }))),
        ftmodelcard_js_1.FTModelCard$inboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
          type: v.type
        })))
      ])).optional()
    });
    exports.ModelList$outboundSchema = z.object({
      object: z.string().default("list"),
      data: z.array(z.union([
        basemodelcard_js_1.BaseModelCard$outboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
          type: v.type
        }))),
        ftmodelcard_js_1.FTModelCard$outboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
          type: v.type
        })))
      ])).optional()
    });
    var ModelList$;
    (function(ModelList$2) {
      ModelList$2.inboundSchema = exports.ModelList$inboundSchema;
      ModelList$2.outboundSchema = exports.ModelList$outboundSchema;
    })(ModelList$ || (exports.ModelList$ = ModelList$ = {}));
    function modelListToJSON(modelList) {
      return JSON.stringify(exports.ModelList$outboundSchema.parse(modelList));
    }
    function modelListFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ModelList$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ModelList' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/retrievefileout.js
var require_retrievefileout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/retrievefileout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetrieveFileOut$ = exports.RetrieveFileOut$outboundSchema = exports.RetrieveFileOut$inboundSchema = void 0;
    exports.retrieveFileOutToJSON = retrieveFileOutToJSON;
    exports.retrieveFileOutFromJSON = retrieveFileOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var filepurpose_js_1 = require_filepurpose();
    var sampletype_js_1 = require_sampletype();
    var source_js_1 = require_source();
    exports.RetrieveFileOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      created_at: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$inboundSchema,
      sample_type: sampletype_js_1.SampleType$inboundSchema,
      num_lines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$inboundSchema,
      deleted: z.boolean()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "sample_type": "sampleType",
        "num_lines": "numLines"
      });
    });
    exports.RetrieveFileOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      createdAt: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$outboundSchema,
      sampleType: sampletype_js_1.SampleType$outboundSchema,
      numLines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$outboundSchema,
      deleted: z.boolean()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        sampleType: "sample_type",
        numLines: "num_lines"
      });
    });
    var RetrieveFileOut$;
    (function(RetrieveFileOut$2) {
      RetrieveFileOut$2.inboundSchema = exports.RetrieveFileOut$inboundSchema;
      RetrieveFileOut$2.outboundSchema = exports.RetrieveFileOut$outboundSchema;
    })(RetrieveFileOut$ || (exports.RetrieveFileOut$ = RetrieveFileOut$ = {}));
    function retrieveFileOutToJSON(retrieveFileOut) {
      return JSON.stringify(exports.RetrieveFileOut$outboundSchema.parse(retrieveFileOut));
    }
    function retrieveFileOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RetrieveFileOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveFileOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/security.js
var require_security2 = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/security.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Security$ = exports.Security$outboundSchema = exports.Security$inboundSchema = void 0;
    exports.securityToJSON = securityToJSON;
    exports.securityFromJSON = securityFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.Security$inboundSchema = z.object({
      ApiKey: z.string().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "ApiKey": "apiKey"
      });
    });
    exports.Security$outboundSchema = z.object({
      apiKey: z.string().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        apiKey: "ApiKey"
      });
    });
    var Security$;
    (function(Security$2) {
      Security$2.inboundSchema = exports.Security$inboundSchema;
      Security$2.outboundSchema = exports.Security$outboundSchema;
    })(Security$ || (exports.Security$ = Security$ = {}));
    function securityToJSON(security) {
      return JSON.stringify(exports.Security$outboundSchema.parse(security));
    }
    function securityFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Security$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Security' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/unarchiveftmodelout.js
var require_unarchiveftmodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/unarchiveftmodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnarchiveFTModelOut$ = exports.UnarchiveFTModelOut$outboundSchema = exports.UnarchiveFTModelOut$inboundSchema = exports.UnarchiveFTModelOutObject$ = exports.UnarchiveFTModelOutObject$outboundSchema = exports.UnarchiveFTModelOutObject$inboundSchema = exports.UnarchiveFTModelOutObject = void 0;
    exports.unarchiveFTModelOutToJSON = unarchiveFTModelOutToJSON;
    exports.unarchiveFTModelOutFromJSON = unarchiveFTModelOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.UnarchiveFTModelOutObject = {
      Model: "model"
    };
    exports.UnarchiveFTModelOutObject$inboundSchema = z.nativeEnum(exports.UnarchiveFTModelOutObject);
    exports.UnarchiveFTModelOutObject$outboundSchema = exports.UnarchiveFTModelOutObject$inboundSchema;
    var UnarchiveFTModelOutObject$;
    (function(UnarchiveFTModelOutObject$2) {
      UnarchiveFTModelOutObject$2.inboundSchema = exports.UnarchiveFTModelOutObject$inboundSchema;
      UnarchiveFTModelOutObject$2.outboundSchema = exports.UnarchiveFTModelOutObject$outboundSchema;
    })(UnarchiveFTModelOutObject$ || (exports.UnarchiveFTModelOutObject$ = UnarchiveFTModelOutObject$ = {}));
    exports.UnarchiveFTModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(false)
    });
    exports.UnarchiveFTModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(false)
    });
    var UnarchiveFTModelOut$;
    (function(UnarchiveFTModelOut$2) {
      UnarchiveFTModelOut$2.inboundSchema = exports.UnarchiveFTModelOut$inboundSchema;
      UnarchiveFTModelOut$2.outboundSchema = exports.UnarchiveFTModelOut$outboundSchema;
    })(UnarchiveFTModelOut$ || (exports.UnarchiveFTModelOut$ = UnarchiveFTModelOut$ = {}));
    function unarchiveFTModelOutToJSON(unarchiveFTModelOut) {
      return JSON.stringify(exports.UnarchiveFTModelOut$outboundSchema.parse(unarchiveFTModelOut));
    }
    function unarchiveFTModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UnarchiveFTModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UnarchiveFTModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/updateftmodelin.js
var require_updateftmodelin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/updateftmodelin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateFTModelIn$ = exports.UpdateFTModelIn$outboundSchema = exports.UpdateFTModelIn$inboundSchema = void 0;
    exports.updateFTModelInToJSON = updateFTModelInToJSON;
    exports.updateFTModelInFromJSON = updateFTModelInFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.UpdateFTModelIn$inboundSchema = z.object({
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional()
    });
    exports.UpdateFTModelIn$outboundSchema = z.object({
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional()
    });
    var UpdateFTModelIn$;
    (function(UpdateFTModelIn$2) {
      UpdateFTModelIn$2.inboundSchema = exports.UpdateFTModelIn$inboundSchema;
      UpdateFTModelIn$2.outboundSchema = exports.UpdateFTModelIn$outboundSchema;
    })(UpdateFTModelIn$ || (exports.UpdateFTModelIn$ = UpdateFTModelIn$ = {}));
    function updateFTModelInToJSON(updateFTModelIn) {
      return JSON.stringify(exports.UpdateFTModelIn$outboundSchema.parse(updateFTModelIn));
    }
    function updateFTModelInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdateFTModelIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateFTModelIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/uploadfileout.js
var require_uploadfileout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/uploadfileout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploadFileOut$ = exports.UploadFileOut$outboundSchema = exports.UploadFileOut$inboundSchema = void 0;
    exports.uploadFileOutToJSON = uploadFileOutToJSON;
    exports.uploadFileOutFromJSON = uploadFileOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var filepurpose_js_1 = require_filepurpose();
    var sampletype_js_1 = require_sampletype();
    var source_js_1 = require_source();
    exports.UploadFileOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      created_at: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$inboundSchema,
      sample_type: sampletype_js_1.SampleType$inboundSchema,
      num_lines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "sample_type": "sampleType",
        "num_lines": "numLines"
      });
    });
    exports.UploadFileOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      createdAt: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$outboundSchema,
      sampleType: sampletype_js_1.SampleType$outboundSchema,
      numLines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        sampleType: "sample_type",
        numLines: "num_lines"
      });
    });
    var UploadFileOut$;
    (function(UploadFileOut$2) {
      UploadFileOut$2.inboundSchema = exports.UploadFileOut$inboundSchema;
      UploadFileOut$2.outboundSchema = exports.UploadFileOut$outboundSchema;
    })(UploadFileOut$ || (exports.UploadFileOut$ = UploadFileOut$ = {}));
    function uploadFileOutToJSON(uploadFileOut) {
      return JSON.stringify(exports.UploadFileOut$outboundSchema.parse(uploadFileOut));
    }
    function uploadFileOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadFileOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadFileOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/validationerror.js
var require_validationerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/validationerror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError$ = exports.ValidationError$outboundSchema = exports.ValidationError$inboundSchema = exports.Loc$ = exports.Loc$outboundSchema = exports.Loc$inboundSchema = void 0;
    exports.locToJSON = locToJSON;
    exports.locFromJSON = locFromJSON;
    exports.validationErrorToJSON = validationErrorToJSON;
    exports.validationErrorFromJSON = validationErrorFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.Loc$inboundSchema = z.union([z.string(), z.number().int()]);
    exports.Loc$outboundSchema = z.union([z.string(), z.number().int()]);
    var Loc$;
    (function(Loc$2) {
      Loc$2.inboundSchema = exports.Loc$inboundSchema;
      Loc$2.outboundSchema = exports.Loc$outboundSchema;
    })(Loc$ || (exports.Loc$ = Loc$ = {}));
    function locToJSON(loc) {
      return JSON.stringify(exports.Loc$outboundSchema.parse(loc));
    }
    function locFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Loc$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Loc' from JSON`);
    }
    exports.ValidationError$inboundSchema = z.object({
      loc: z.array(z.union([z.string(), z.number().int()])),
      msg: z.string(),
      type: z.string()
    });
    exports.ValidationError$outboundSchema = z.object({
      loc: z.array(z.union([z.string(), z.number().int()])),
      msg: z.string(),
      type: z.string()
    });
    var ValidationError$;
    (function(ValidationError$2) {
      ValidationError$2.inboundSchema = exports.ValidationError$inboundSchema;
      ValidationError$2.outboundSchema = exports.ValidationError$outboundSchema;
    })(ValidationError$ || (exports.ValidationError$ = ValidationError$ = {}));
    function validationErrorToJSON(validationError) {
      return JSON.stringify(exports.ValidationError$outboundSchema.parse(validationError));
    }
    function validationErrorFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ValidationError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ValidationError' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/index.js
var require_components = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_agentscompletionrequest(), exports);
    __exportStar(require_agentscompletionstreamrequest(), exports);
    __exportStar(require_apiendpoint(), exports);
    __exportStar(require_archiveftmodelout(), exports);
    __exportStar(require_assistantmessage(), exports);
    __exportStar(require_basemodelcard(), exports);
    __exportStar(require_batcherror(), exports);
    __exportStar(require_batchjobin(), exports);
    __exportStar(require_batchjobout(), exports);
    __exportStar(require_batchjobsout(), exports);
    __exportStar(require_batchjobstatus(), exports);
    __exportStar(require_chatclassificationrequest(), exports);
    __exportStar(require_chatcompletionchoice(), exports);
    __exportStar(require_chatcompletionrequest(), exports);
    __exportStar(require_chatcompletionresponse(), exports);
    __exportStar(require_chatcompletionstreamrequest(), exports);
    __exportStar(require_checkpointout(), exports);
    __exportStar(require_classificationobject(), exports);
    __exportStar(require_classificationrequest(), exports);
    __exportStar(require_classificationresponse(), exports);
    __exportStar(require_completionchunk(), exports);
    __exportStar(require_completionevent(), exports);
    __exportStar(require_completionresponsestreamchoice(), exports);
    __exportStar(require_contentchunk(), exports);
    __exportStar(require_deletefileout(), exports);
    __exportStar(require_deletemodelout(), exports);
    __exportStar(require_deltamessage(), exports);
    __exportStar(require_detailedjobout(), exports);
    __exportStar(require_embeddingrequest(), exports);
    __exportStar(require_embeddingresponse(), exports);
    __exportStar(require_embeddingresponsedata(), exports);
    __exportStar(require_eventout(), exports);
    __exportStar(require_filepurpose(), exports);
    __exportStar(require_fileschema(), exports);
    __exportStar(require_filesignedurl(), exports);
    __exportStar(require_fimcompletionrequest(), exports);
    __exportStar(require_fimcompletionresponse(), exports);
    __exportStar(require_fimcompletionstreamrequest(), exports);
    __exportStar(require_ftmodelcapabilitiesout(), exports);
    __exportStar(require_ftmodelcard(), exports);
    __exportStar(require_ftmodelout(), exports);
    __exportStar(require_function(), exports);
    __exportStar(require_functioncall(), exports);
    __exportStar(require_functionname(), exports);
    __exportStar(require_githubrepositoryin(), exports);
    __exportStar(require_githubrepositoryout(), exports);
    __exportStar(require_imageurl(), exports);
    __exportStar(require_imageurlchunk(), exports);
    __exportStar(require_jobin(), exports);
    __exportStar(require_jobmetadataout(), exports);
    __exportStar(require_jobout(), exports);
    __exportStar(require_jobsout(), exports);
    __exportStar(require_legacyjobmetadataout(), exports);
    __exportStar(require_listfilesout(), exports);
    __exportStar(require_metricout(), exports);
    __exportStar(require_modelcapabilities(), exports);
    __exportStar(require_modellist(), exports);
    __exportStar(require_referencechunk(), exports);
    __exportStar(require_responseformat(), exports);
    __exportStar(require_responseformats(), exports);
    __exportStar(require_retrievefileout(), exports);
    __exportStar(require_sampletype(), exports);
    __exportStar(require_security2(), exports);
    __exportStar(require_source(), exports);
    __exportStar(require_systemmessage(), exports);
    __exportStar(require_textchunk(), exports);
    __exportStar(require_tool(), exports);
    __exportStar(require_toolcall(), exports);
    __exportStar(require_toolchoice(), exports);
    __exportStar(require_toolchoiceenum(), exports);
    __exportStar(require_toolmessage(), exports);
    __exportStar(require_tooltypes(), exports);
    __exportStar(require_trainingfile(), exports);
    __exportStar(require_trainingparameters(), exports);
    __exportStar(require_trainingparametersin(), exports);
    __exportStar(require_unarchiveftmodelout(), exports);
    __exportStar(require_updateftmodelin(), exports);
    __exportStar(require_uploadfileout(), exports);
    __exportStar(require_usageinfo(), exports);
    __exportStar(require_usermessage(), exports);
    __exportStar(require_validationerror(), exports);
    __exportStar(require_wandbintegration(), exports);
    __exportStar(require_wandbintegrationout(), exports);
  }
});

// node_modules/@mistralai/mistralai/models/errors/httpvalidationerror.js
var require_httpvalidationerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/httpvalidationerror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTTPValidationError$ = exports.HTTPValidationError$outboundSchema = exports.HTTPValidationError$inboundSchema = exports.HTTPValidationError = void 0;
    var z = __importStar(require_lib());
    var components = __importStar(require_components());
    var HTTPValidationError = class extends Error {
      constructor(err) {
        const message = "message" in err && typeof err.message === "string" ? err.message : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        if (err.detail != null)
          this.detail = err.detail;
        this.name = "HTTPValidationError";
      }
    };
    exports.HTTPValidationError = HTTPValidationError;
    exports.HTTPValidationError$inboundSchema = z.object({
      detail: z.array(components.ValidationError$inboundSchema).optional()
    }).transform((v) => {
      return new HTTPValidationError(v);
    });
    exports.HTTPValidationError$outboundSchema = z.instanceof(HTTPValidationError).transform((v) => v.data$).pipe(z.object({
      detail: z.array(components.ValidationError$outboundSchema).optional()
    }));
    var HTTPValidationError$;
    (function(HTTPValidationError$2) {
      HTTPValidationError$2.inboundSchema = exports.HTTPValidationError$inboundSchema;
      HTTPValidationError$2.outboundSchema = exports.HTTPValidationError$outboundSchema;
    })(HTTPValidationError$ || (exports.HTTPValidationError$ = HTTPValidationError$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/errors/index.js
var require_errors2 = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_httpclienterrors(), exports);
    __exportStar(require_httpvalidationerror(), exports);
    __exportStar(require_sdkerror(), exports);
    __exportStar(require_sdkvalidationerror(), exports);
  }
});

// node_modules/@mistralai/mistralai/funcs/agentsComplete.js
var require_agentsComplete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/agentsComplete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.agentsComplete = agentsComplete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function agentsComplete(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.AgentsCompletionRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/agents/completions")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "agents_completion_v1_agents_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ChatCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/agentsStream.js
var require_agentsStream = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/agentsStream.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.agentsStream = agentsStream;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var event_streams_js_1 = require_event_streams();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function agentsStream(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.AgentsCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/agents/completions#stream")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "stream_agents",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream) => {
        return new event_streams_js_1.EventStream({
          stream,
          decoder(rawEvent) {
            const schema = components.CompletionEvent$inboundSchema;
            return schema.parse(rawEvent);
          }
        });
      }), { sseSentinel: "[DONE]" }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/agents.js
var require_agents = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/agents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Agents = void 0;
    var agentsComplete_js_1 = require_agentsComplete();
    var agentsStream_js_1 = require_agentsStream();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Agents = class extends sdks_js_1.ClientSDK {
      /**
       * Agents Completion
       */
      async complete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, agentsComplete_js_1.agentsComplete)(this, request, options));
      }
      /**
       * Stream Agents completion
       *
       * @remarks
       * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
       */
      async stream(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, agentsStream_js_1.agentsStream)(this, request, options));
      }
    };
    exports.Agents = Agents;
  }
});

// node_modules/@mistralai/mistralai/models/operations/deletemodelv1modelsmodeliddelete.js
var require_deletemodelv1modelsmodeliddelete = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/deletemodelv1modelsmodeliddelete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteModelV1ModelsModelIdDeleteRequest$ = exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema = exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema = void 0;
    exports.deleteModelV1ModelsModelIdDeleteRequestToJSON = deleteModelV1ModelsModelIdDeleteRequestToJSON;
    exports.deleteModelV1ModelsModelIdDeleteRequestFromJSON = deleteModelV1ModelsModelIdDeleteRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var DeleteModelV1ModelsModelIdDeleteRequest$;
    (function(DeleteModelV1ModelsModelIdDeleteRequest$2) {
      DeleteModelV1ModelsModelIdDeleteRequest$2.inboundSchema = exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema;
      DeleteModelV1ModelsModelIdDeleteRequest$2.outboundSchema = exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema;
    })(DeleteModelV1ModelsModelIdDeleteRequest$ || (exports.DeleteModelV1ModelsModelIdDeleteRequest$ = DeleteModelV1ModelsModelIdDeleteRequest$ = {}));
    function deleteModelV1ModelsModelIdDeleteRequestToJSON(deleteModelV1ModelsModelIdDeleteRequest) {
      return JSON.stringify(exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema.parse(deleteModelV1ModelsModelIdDeleteRequest));
    }
    function deleteModelV1ModelsModelIdDeleteRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteModelV1ModelsModelIdDeleteRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesdeletefile.js
var require_filesapiroutesdeletefile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesdeletefile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesDeleteFileRequest$ = exports.FilesApiRoutesDeleteFileRequest$outboundSchema = exports.FilesApiRoutesDeleteFileRequest$inboundSchema = void 0;
    exports.filesApiRoutesDeleteFileRequestToJSON = filesApiRoutesDeleteFileRequestToJSON;
    exports.filesApiRoutesDeleteFileRequestFromJSON = filesApiRoutesDeleteFileRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesDeleteFileRequest$inboundSchema = z.object({
      file_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesDeleteFileRequest$outboundSchema = z.object({
      fileId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesDeleteFileRequest$;
    (function(FilesApiRoutesDeleteFileRequest$2) {
      FilesApiRoutesDeleteFileRequest$2.inboundSchema = exports.FilesApiRoutesDeleteFileRequest$inboundSchema;
      FilesApiRoutesDeleteFileRequest$2.outboundSchema = exports.FilesApiRoutesDeleteFileRequest$outboundSchema;
    })(FilesApiRoutesDeleteFileRequest$ || (exports.FilesApiRoutesDeleteFileRequest$ = FilesApiRoutesDeleteFileRequest$ = {}));
    function filesApiRoutesDeleteFileRequestToJSON(filesApiRoutesDeleteFileRequest) {
      return JSON.stringify(exports.FilesApiRoutesDeleteFileRequest$outboundSchema.parse(filesApiRoutesDeleteFileRequest));
    }
    function filesApiRoutesDeleteFileRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesDeleteFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesDeleteFileRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesdownloadfile.js
var require_filesapiroutesdownloadfile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesdownloadfile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesDownloadFileRequest$ = exports.FilesApiRoutesDownloadFileRequest$outboundSchema = exports.FilesApiRoutesDownloadFileRequest$inboundSchema = void 0;
    exports.filesApiRoutesDownloadFileRequestToJSON = filesApiRoutesDownloadFileRequestToJSON;
    exports.filesApiRoutesDownloadFileRequestFromJSON = filesApiRoutesDownloadFileRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesDownloadFileRequest$inboundSchema = z.object({
      file_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesDownloadFileRequest$outboundSchema = z.object({
      fileId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesDownloadFileRequest$;
    (function(FilesApiRoutesDownloadFileRequest$2) {
      FilesApiRoutesDownloadFileRequest$2.inboundSchema = exports.FilesApiRoutesDownloadFileRequest$inboundSchema;
      FilesApiRoutesDownloadFileRequest$2.outboundSchema = exports.FilesApiRoutesDownloadFileRequest$outboundSchema;
    })(FilesApiRoutesDownloadFileRequest$ || (exports.FilesApiRoutesDownloadFileRequest$ = FilesApiRoutesDownloadFileRequest$ = {}));
    function filesApiRoutesDownloadFileRequestToJSON(filesApiRoutesDownloadFileRequest) {
      return JSON.stringify(exports.FilesApiRoutesDownloadFileRequest$outboundSchema.parse(filesApiRoutesDownloadFileRequest));
    }
    function filesApiRoutesDownloadFileRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesDownloadFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesDownloadFileRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesgetsignedurl.js
var require_filesapiroutesgetsignedurl = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesgetsignedurl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesGetSignedUrlRequest$ = exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema = exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema = void 0;
    exports.filesApiRoutesGetSignedUrlRequestToJSON = filesApiRoutesGetSignedUrlRequestToJSON;
    exports.filesApiRoutesGetSignedUrlRequestFromJSON = filesApiRoutesGetSignedUrlRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema = z.object({
      file_id: z.string(),
      expiry: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema = z.object({
      fileId: z.string(),
      expiry: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesGetSignedUrlRequest$;
    (function(FilesApiRoutesGetSignedUrlRequest$2) {
      FilesApiRoutesGetSignedUrlRequest$2.inboundSchema = exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema;
      FilesApiRoutesGetSignedUrlRequest$2.outboundSchema = exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema;
    })(FilesApiRoutesGetSignedUrlRequest$ || (exports.FilesApiRoutesGetSignedUrlRequest$ = FilesApiRoutesGetSignedUrlRequest$ = {}));
    function filesApiRoutesGetSignedUrlRequestToJSON(filesApiRoutesGetSignedUrlRequest) {
      return JSON.stringify(exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema.parse(filesApiRoutesGetSignedUrlRequest));
    }
    function filesApiRoutesGetSignedUrlRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesGetSignedUrlRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapirouteslistfiles.js
var require_filesapirouteslistfiles = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapirouteslistfiles.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesListFilesRequest$ = exports.FilesApiRoutesListFilesRequest$outboundSchema = exports.FilesApiRoutesListFilesRequest$inboundSchema = void 0;
    exports.filesApiRoutesListFilesRequestToJSON = filesApiRoutesListFilesRequestToJSON;
    exports.filesApiRoutesListFilesRequestFromJSON = filesApiRoutesListFilesRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.FilesApiRoutesListFilesRequest$inboundSchema = z.object({
      page: z.number().int().default(0),
      page_size: z.number().int().default(100),
      sample_type: z.nullable(z.array(components.SampleType$inboundSchema)).optional(),
      source: z.nullable(z.array(components.Source$inboundSchema)).optional(),
      search: z.nullable(z.string()).optional(),
      purpose: z.nullable(components.FilePurpose$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "page_size": "pageSize",
        "sample_type": "sampleType"
      });
    });
    exports.FilesApiRoutesListFilesRequest$outboundSchema = z.object({
      page: z.number().int().default(0),
      pageSize: z.number().int().default(100),
      sampleType: z.nullable(z.array(components.SampleType$outboundSchema)).optional(),
      source: z.nullable(z.array(components.Source$outboundSchema)).optional(),
      search: z.nullable(z.string()).optional(),
      purpose: z.nullable(components.FilePurpose$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pageSize: "page_size",
        sampleType: "sample_type"
      });
    });
    var FilesApiRoutesListFilesRequest$;
    (function(FilesApiRoutesListFilesRequest$2) {
      FilesApiRoutesListFilesRequest$2.inboundSchema = exports.FilesApiRoutesListFilesRequest$inboundSchema;
      FilesApiRoutesListFilesRequest$2.outboundSchema = exports.FilesApiRoutesListFilesRequest$outboundSchema;
    })(FilesApiRoutesListFilesRequest$ || (exports.FilesApiRoutesListFilesRequest$ = FilesApiRoutesListFilesRequest$ = {}));
    function filesApiRoutesListFilesRequestToJSON(filesApiRoutesListFilesRequest) {
      return JSON.stringify(exports.FilesApiRoutesListFilesRequest$outboundSchema.parse(filesApiRoutesListFilesRequest));
    }
    function filesApiRoutesListFilesRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesListFilesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesListFilesRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesretrievefile.js
var require_filesapiroutesretrievefile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesretrievefile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesRetrieveFileRequest$ = exports.FilesApiRoutesRetrieveFileRequest$outboundSchema = exports.FilesApiRoutesRetrieveFileRequest$inboundSchema = void 0;
    exports.filesApiRoutesRetrieveFileRequestToJSON = filesApiRoutesRetrieveFileRequestToJSON;
    exports.filesApiRoutesRetrieveFileRequestFromJSON = filesApiRoutesRetrieveFileRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesRetrieveFileRequest$inboundSchema = z.object({
      file_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesRetrieveFileRequest$outboundSchema = z.object({
      fileId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesRetrieveFileRequest$;
    (function(FilesApiRoutesRetrieveFileRequest$2) {
      FilesApiRoutesRetrieveFileRequest$2.inboundSchema = exports.FilesApiRoutesRetrieveFileRequest$inboundSchema;
      FilesApiRoutesRetrieveFileRequest$2.outboundSchema = exports.FilesApiRoutesRetrieveFileRequest$outboundSchema;
    })(FilesApiRoutesRetrieveFileRequest$ || (exports.FilesApiRoutesRetrieveFileRequest$ = FilesApiRoutesRetrieveFileRequest$ = {}));
    function filesApiRoutesRetrieveFileRequestToJSON(filesApiRoutesRetrieveFileRequest) {
      return JSON.stringify(exports.FilesApiRoutesRetrieveFileRequest$outboundSchema.parse(filesApiRoutesRetrieveFileRequest));
    }
    function filesApiRoutesRetrieveFileRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesRetrieveFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesRetrieveFileRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/types/blobs.js
var require_blobs = __commonJS({
  "node_modules/@mistralai/mistralai/types/blobs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.blobLikeSchema = void 0;
    exports.isBlobLike = isBlobLike;
    var z = __importStar(require_lib());
    exports.blobLikeSchema = z.custom(isBlobLike, {
      message: "expected a Blob, File or Blob-like object",
      fatal: true
    });
    function isBlobLike(val) {
      if (val instanceof Blob) {
        return true;
      }
      if (typeof val !== "object" || val == null || !(Symbol.toStringTag in val)) {
        return false;
      }
      const name = val[Symbol.toStringTag];
      if (typeof name !== "string") {
        return false;
      }
      if (name !== "Blob" && name !== "File") {
        return false;
      }
      return "stream" in val && typeof val.stream === "function";
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesuploadfile.js
var require_filesapiroutesuploadfile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesuploadfile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesUploadFileMultiPartBodyParams$ = exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema = exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema = exports.FileT$ = exports.FileT$outboundSchema = exports.FileT$inboundSchema = void 0;
    exports.fileToJSON = fileToJSON;
    exports.fileFromJSON = fileFromJSON;
    exports.filesApiRoutesUploadFileMultiPartBodyParamsToJSON = filesApiRoutesUploadFileMultiPartBodyParamsToJSON;
    exports.filesApiRoutesUploadFileMultiPartBodyParamsFromJSON = filesApiRoutesUploadFileMultiPartBodyParamsFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var blobs_js_1 = require_blobs();
    var components = __importStar(require_components());
    exports.FileT$inboundSchema = z.object({
      fileName: z.string(),
      content: z.union([
        z.instanceof(ReadableStream),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array)
      ])
    });
    exports.FileT$outboundSchema = z.object({
      fileName: z.string(),
      content: z.union([
        z.instanceof(ReadableStream),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array)
      ])
    });
    var FileT$;
    (function(FileT$2) {
      FileT$2.inboundSchema = exports.FileT$inboundSchema;
      FileT$2.outboundSchema = exports.FileT$outboundSchema;
    })(FileT$ || (exports.FileT$ = FileT$ = {}));
    function fileToJSON(fileT) {
      return JSON.stringify(exports.FileT$outboundSchema.parse(fileT));
    }
    function fileFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FileT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileT' from JSON`);
    }
    exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema = z.object({
      file: z.lazy(() => exports.FileT$inboundSchema),
      purpose: components.FilePurpose$inboundSchema.optional()
    });
    exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema = z.object({
      file: z.lazy(() => exports.FileT$outboundSchema).or(blobs_js_1.blobLikeSchema),
      purpose: components.FilePurpose$outboundSchema.optional()
    });
    var FilesApiRoutesUploadFileMultiPartBodyParams$;
    (function(FilesApiRoutesUploadFileMultiPartBodyParams$2) {
      FilesApiRoutesUploadFileMultiPartBodyParams$2.inboundSchema = exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema;
      FilesApiRoutesUploadFileMultiPartBodyParams$2.outboundSchema = exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema;
    })(FilesApiRoutesUploadFileMultiPartBodyParams$ || (exports.FilesApiRoutesUploadFileMultiPartBodyParams$ = FilesApiRoutesUploadFileMultiPartBodyParams$ = {}));
    function filesApiRoutesUploadFileMultiPartBodyParamsToJSON(filesApiRoutesUploadFileMultiPartBodyParams) {
      return JSON.stringify(exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema.parse(filesApiRoutesUploadFileMultiPartBodyParams));
    }
    function filesApiRoutesUploadFileMultiPartBodyParamsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesUploadFileMultiPartBodyParams' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchcancelbatchjob.js
var require_jobsapiroutesbatchcancelbatchjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchcancelbatchjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesBatchCancelBatchJobRequest$ = exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema = exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesBatchCancelBatchJobRequestToJSON = jobsApiRoutesBatchCancelBatchJobRequestToJSON;
    exports.jobsApiRoutesBatchCancelBatchJobRequestFromJSON = jobsApiRoutesBatchCancelBatchJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesBatchCancelBatchJobRequest$;
    (function(JobsApiRoutesBatchCancelBatchJobRequest$2) {
      JobsApiRoutesBatchCancelBatchJobRequest$2.inboundSchema = exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema;
      JobsApiRoutesBatchCancelBatchJobRequest$2.outboundSchema = exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema;
    })(JobsApiRoutesBatchCancelBatchJobRequest$ || (exports.JobsApiRoutesBatchCancelBatchJobRequest$ = JobsApiRoutesBatchCancelBatchJobRequest$ = {}));
    function jobsApiRoutesBatchCancelBatchJobRequestToJSON(jobsApiRoutesBatchCancelBatchJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema.parse(jobsApiRoutesBatchCancelBatchJobRequest));
    }
    function jobsApiRoutesBatchCancelBatchJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesBatchCancelBatchJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjob.js
var require_jobsapiroutesbatchgetbatchjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesBatchGetBatchJobRequest$ = exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema = exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesBatchGetBatchJobRequestToJSON = jobsApiRoutesBatchGetBatchJobRequestToJSON;
    exports.jobsApiRoutesBatchGetBatchJobRequestFromJSON = jobsApiRoutesBatchGetBatchJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesBatchGetBatchJobRequest$;
    (function(JobsApiRoutesBatchGetBatchJobRequest$2) {
      JobsApiRoutesBatchGetBatchJobRequest$2.inboundSchema = exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema;
      JobsApiRoutesBatchGetBatchJobRequest$2.outboundSchema = exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema;
    })(JobsApiRoutesBatchGetBatchJobRequest$ || (exports.JobsApiRoutesBatchGetBatchJobRequest$ = JobsApiRoutesBatchGetBatchJobRequest$ = {}));
    function jobsApiRoutesBatchGetBatchJobRequestToJSON(jobsApiRoutesBatchGetBatchJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema.parse(jobsApiRoutesBatchGetBatchJobRequest));
    }
    function jobsApiRoutesBatchGetBatchJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesBatchGetBatchJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjobs.js
var require_jobsapiroutesbatchgetbatchjobs = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjobs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesBatchGetBatchJobsRequest$ = exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema = exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema = void 0;
    exports.jobsApiRoutesBatchGetBatchJobsRequestToJSON = jobsApiRoutesBatchGetBatchJobsRequestToJSON;
    exports.jobsApiRoutesBatchGetBatchJobsRequestFromJSON = jobsApiRoutesBatchGetBatchJobsRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema = z.object({
      page: z.number().int().default(0),
      page_size: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      metadata: z.nullable(z.record(z.any())).optional(),
      created_after: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      created_by_me: z.boolean().default(false),
      status: z.nullable(components.BatchJobStatus$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "page_size": "pageSize",
        "created_after": "createdAfter",
        "created_by_me": "createdByMe"
      });
    });
    exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema = z.object({
      page: z.number().int().default(0),
      pageSize: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      metadata: z.nullable(z.record(z.any())).optional(),
      createdAfter: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      createdByMe: z.boolean().default(false),
      status: z.nullable(components.BatchJobStatus$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pageSize: "page_size",
        createdAfter: "created_after",
        createdByMe: "created_by_me"
      });
    });
    var JobsApiRoutesBatchGetBatchJobsRequest$;
    (function(JobsApiRoutesBatchGetBatchJobsRequest$2) {
      JobsApiRoutesBatchGetBatchJobsRequest$2.inboundSchema = exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema;
      JobsApiRoutesBatchGetBatchJobsRequest$2.outboundSchema = exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema;
    })(JobsApiRoutesBatchGetBatchJobsRequest$ || (exports.JobsApiRoutesBatchGetBatchJobsRequest$ = JobsApiRoutesBatchGetBatchJobsRequest$ = {}));
    function jobsApiRoutesBatchGetBatchJobsRequestToJSON(jobsApiRoutesBatchGetBatchJobsRequest) {
      return JSON.stringify(exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema.parse(jobsApiRoutesBatchGetBatchJobsRequest));
    }
    function jobsApiRoutesBatchGetBatchJobsRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesBatchGetBatchJobsRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningarchivefinetunedmodel.js
var require_jobsapiroutesfinetuningarchivefinetunedmodel = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningarchivefinetunedmodel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningArchiveFineTunedModelRequestToJSON = jobsApiRoutesFineTuningArchiveFineTunedModelRequestToJSON;
    exports.jobsApiRoutesFineTuningArchiveFineTunedModelRequestFromJSON = jobsApiRoutesFineTuningArchiveFineTunedModelRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var JobsApiRoutesFineTuningArchiveFineTunedModelRequest$;
    (function(JobsApiRoutesFineTuningArchiveFineTunedModelRequest$2) {
      JobsApiRoutesFineTuningArchiveFineTunedModelRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema;
      JobsApiRoutesFineTuningArchiveFineTunedModelRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema;
    })(JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ || (exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ = JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ = {}));
    function jobsApiRoutesFineTuningArchiveFineTunedModelRequestToJSON(jobsApiRoutesFineTuningArchiveFineTunedModelRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema.parse(jobsApiRoutesFineTuningArchiveFineTunedModelRequest));
    }
    function jobsApiRoutesFineTuningArchiveFineTunedModelRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningArchiveFineTunedModelRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcancelfinetuningjob.js
var require_jobsapiroutesfinetuningcancelfinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcancelfinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$ = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningCancelFineTuningJobRequestToJSON = jobsApiRoutesFineTuningCancelFineTuningJobRequestToJSON;
    exports.jobsApiRoutesFineTuningCancelFineTuningJobRequestFromJSON = jobsApiRoutesFineTuningCancelFineTuningJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesFineTuningCancelFineTuningJobRequest$;
    (function(JobsApiRoutesFineTuningCancelFineTuningJobRequest$2) {
      JobsApiRoutesFineTuningCancelFineTuningJobRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema;
      JobsApiRoutesFineTuningCancelFineTuningJobRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema;
    })(JobsApiRoutesFineTuningCancelFineTuningJobRequest$ || (exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$ = JobsApiRoutesFineTuningCancelFineTuningJobRequest$ = {}));
    function jobsApiRoutesFineTuningCancelFineTuningJobRequestToJSON(jobsApiRoutesFineTuningCancelFineTuningJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema.parse(jobsApiRoutesFineTuningCancelFineTuningJobRequest));
    }
    function jobsApiRoutesFineTuningCancelFineTuningJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningCancelFineTuningJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcreatefinetuningjob.js
var require_jobsapiroutesfinetuningcreatefinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcreatefinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$ = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningCreateFineTuningJobResponseToJSON = jobsApiRoutesFineTuningCreateFineTuningJobResponseToJSON;
    exports.jobsApiRoutesFineTuningCreateFineTuningJobResponseFromJSON = jobsApiRoutesFineTuningCreateFineTuningJobResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema = z.union([
      components.LegacyJobMetadataOut$inboundSchema,
      components.JobOut$inboundSchema
    ]);
    exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema = z.union([
      components.LegacyJobMetadataOut$outboundSchema,
      components.JobOut$outboundSchema
    ]);
    var JobsApiRoutesFineTuningCreateFineTuningJobResponse$;
    (function(JobsApiRoutesFineTuningCreateFineTuningJobResponse$2) {
      JobsApiRoutesFineTuningCreateFineTuningJobResponse$2.inboundSchema = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema;
      JobsApiRoutesFineTuningCreateFineTuningJobResponse$2.outboundSchema = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema;
    })(JobsApiRoutesFineTuningCreateFineTuningJobResponse$ || (exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$ = JobsApiRoutesFineTuningCreateFineTuningJobResponse$ = {}));
    function jobsApiRoutesFineTuningCreateFineTuningJobResponseToJSON(jobsApiRoutesFineTuningCreateFineTuningJobResponse) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema.parse(jobsApiRoutesFineTuningCreateFineTuningJobResponse));
    }
    function jobsApiRoutesFineTuningCreateFineTuningJobResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningCreateFineTuningJobResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjob.js
var require_jobsapiroutesfinetuninggetfinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$ = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningGetFineTuningJobRequestToJSON = jobsApiRoutesFineTuningGetFineTuningJobRequestToJSON;
    exports.jobsApiRoutesFineTuningGetFineTuningJobRequestFromJSON = jobsApiRoutesFineTuningGetFineTuningJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesFineTuningGetFineTuningJobRequest$;
    (function(JobsApiRoutesFineTuningGetFineTuningJobRequest$2) {
      JobsApiRoutesFineTuningGetFineTuningJobRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema;
      JobsApiRoutesFineTuningGetFineTuningJobRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema;
    })(JobsApiRoutesFineTuningGetFineTuningJobRequest$ || (exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$ = JobsApiRoutesFineTuningGetFineTuningJobRequest$ = {}));
    function jobsApiRoutesFineTuningGetFineTuningJobRequestToJSON(jobsApiRoutesFineTuningGetFineTuningJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema.parse(jobsApiRoutesFineTuningGetFineTuningJobRequest));
    }
    function jobsApiRoutesFineTuningGetFineTuningJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningGetFineTuningJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjobs.js
var require_jobsapiroutesfinetuninggetfinetuningjobs = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjobs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$ = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.Status = void 0;
    exports.jobsApiRoutesFineTuningGetFineTuningJobsRequestToJSON = jobsApiRoutesFineTuningGetFineTuningJobsRequestToJSON;
    exports.jobsApiRoutesFineTuningGetFineTuningJobsRequestFromJSON = jobsApiRoutesFineTuningGetFineTuningJobsRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.Status = {
      Queued: "QUEUED",
      Started: "STARTED",
      Validating: "VALIDATING",
      Validated: "VALIDATED",
      Running: "RUNNING",
      FailedValidation: "FAILED_VALIDATION",
      Failed: "FAILED",
      Success: "SUCCESS",
      Cancelled: "CANCELLED",
      CancellationRequested: "CANCELLATION_REQUESTED"
    };
    exports.Status$inboundSchema = z.nativeEnum(exports.Status);
    exports.Status$outboundSchema = exports.Status$inboundSchema;
    var Status$;
    (function(Status$2) {
      Status$2.inboundSchema = exports.Status$inboundSchema;
      Status$2.outboundSchema = exports.Status$outboundSchema;
    })(Status$ || (exports.Status$ = Status$ = {}));
    exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema = z.object({
      page: z.number().int().default(0),
      page_size: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      created_after: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      created_by_me: z.boolean().default(false),
      status: z.nullable(exports.Status$inboundSchema).optional(),
      wandb_project: z.nullable(z.string()).optional(),
      wandb_name: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "page_size": "pageSize",
        "created_after": "createdAfter",
        "created_by_me": "createdByMe",
        "wandb_project": "wandbProject",
        "wandb_name": "wandbName"
      });
    });
    exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema = z.object({
      page: z.number().int().default(0),
      pageSize: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      createdAfter: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      createdByMe: z.boolean().default(false),
      status: z.nullable(exports.Status$outboundSchema).optional(),
      wandbProject: z.nullable(z.string()).optional(),
      wandbName: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pageSize: "page_size",
        createdAfter: "created_after",
        createdByMe: "created_by_me",
        wandbProject: "wandb_project",
        wandbName: "wandb_name"
      });
    });
    var JobsApiRoutesFineTuningGetFineTuningJobsRequest$;
    (function(JobsApiRoutesFineTuningGetFineTuningJobsRequest$2) {
      JobsApiRoutesFineTuningGetFineTuningJobsRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema;
      JobsApiRoutesFineTuningGetFineTuningJobsRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema;
    })(JobsApiRoutesFineTuningGetFineTuningJobsRequest$ || (exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$ = JobsApiRoutesFineTuningGetFineTuningJobsRequest$ = {}));
    function jobsApiRoutesFineTuningGetFineTuningJobsRequestToJSON(jobsApiRoutesFineTuningGetFineTuningJobsRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema.parse(jobsApiRoutesFineTuningGetFineTuningJobsRequest));
    }
    function jobsApiRoutesFineTuningGetFineTuningJobsRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningGetFineTuningJobsRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningstartfinetuningjob.js
var require_jobsapiroutesfinetuningstartfinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningstartfinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$ = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningStartFineTuningJobRequestToJSON = jobsApiRoutesFineTuningStartFineTuningJobRequestToJSON;
    exports.jobsApiRoutesFineTuningStartFineTuningJobRequestFromJSON = jobsApiRoutesFineTuningStartFineTuningJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesFineTuningStartFineTuningJobRequest$;
    (function(JobsApiRoutesFineTuningStartFineTuningJobRequest$2) {
      JobsApiRoutesFineTuningStartFineTuningJobRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema;
      JobsApiRoutesFineTuningStartFineTuningJobRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema;
    })(JobsApiRoutesFineTuningStartFineTuningJobRequest$ || (exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$ = JobsApiRoutesFineTuningStartFineTuningJobRequest$ = {}));
    function jobsApiRoutesFineTuningStartFineTuningJobRequestToJSON(jobsApiRoutesFineTuningStartFineTuningJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema.parse(jobsApiRoutesFineTuningStartFineTuningJobRequest));
    }
    function jobsApiRoutesFineTuningStartFineTuningJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningStartFineTuningJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningunarchivefinetunedmodel.js
var require_jobsapiroutesfinetuningunarchivefinetunedmodel = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningunarchivefinetunedmodel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestToJSON = jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestToJSON;
    exports.jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestFromJSON = jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$;
    (function(JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$2) {
      JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema;
      JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema;
    })(JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ || (exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ = JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ = {}));
    function jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestToJSON(jobsApiRoutesFineTuningUnarchiveFineTunedModelRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema.parse(jobsApiRoutesFineTuningUnarchiveFineTunedModelRequest));
    }
    function jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningupdatefinetunedmodel.js
var require_jobsapiroutesfinetuningupdatefinetunedmodel = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningupdatefinetunedmodel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningUpdateFineTunedModelRequestToJSON = jobsApiRoutesFineTuningUpdateFineTunedModelRequestToJSON;
    exports.jobsApiRoutesFineTuningUpdateFineTunedModelRequestFromJSON = jobsApiRoutesFineTuningUpdateFineTunedModelRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema = z.object({
      model_id: z.string(),
      UpdateFTModelIn: components.UpdateFTModelIn$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "UpdateFTModelIn": "updateFTModelIn"
      });
    });
    exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema = z.object({
      modelId: z.string(),
      updateFTModelIn: components.UpdateFTModelIn$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        updateFTModelIn: "UpdateFTModelIn"
      });
    });
    var JobsApiRoutesFineTuningUpdateFineTunedModelRequest$;
    (function(JobsApiRoutesFineTuningUpdateFineTunedModelRequest$2) {
      JobsApiRoutesFineTuningUpdateFineTunedModelRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema;
      JobsApiRoutesFineTuningUpdateFineTunedModelRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema;
    })(JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ || (exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ = JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ = {}));
    function jobsApiRoutesFineTuningUpdateFineTunedModelRequestToJSON(jobsApiRoutesFineTuningUpdateFineTunedModelRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema.parse(jobsApiRoutesFineTuningUpdateFineTunedModelRequest));
    }
    function jobsApiRoutesFineTuningUpdateFineTunedModelRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningUpdateFineTunedModelRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/retrievemodelv1modelsmodelidget.js
var require_retrievemodelv1modelsmodelidget = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/retrievemodelv1modelsmodelidget.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$ = exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema = void 0;
    exports.retrieveModelV1ModelsModelIdGetRequestToJSON = retrieveModelV1ModelsModelIdGetRequestToJSON;
    exports.retrieveModelV1ModelsModelIdGetRequestFromJSON = retrieveModelV1ModelsModelIdGetRequestFromJSON;
    exports.retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetToJSON = retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetToJSON;
    exports.retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetFromJSON = retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var RetrieveModelV1ModelsModelIdGetRequest$;
    (function(RetrieveModelV1ModelsModelIdGetRequest$2) {
      RetrieveModelV1ModelsModelIdGetRequest$2.inboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema;
      RetrieveModelV1ModelsModelIdGetRequest$2.outboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema;
    })(RetrieveModelV1ModelsModelIdGetRequest$ || (exports.RetrieveModelV1ModelsModelIdGetRequest$ = RetrieveModelV1ModelsModelIdGetRequest$ = {}));
    function retrieveModelV1ModelsModelIdGetRequestToJSON(retrieveModelV1ModelsModelIdGetRequest) {
      return JSON.stringify(exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema.parse(retrieveModelV1ModelsModelIdGetRequest));
    }
    function retrieveModelV1ModelsModelIdGetRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveModelV1ModelsModelIdGetRequest' from JSON`);
    }
    exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema = z.union([
      components.BaseModelCard$inboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      components.FTModelCard$inboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema = z.union([
      components.BaseModelCard$outboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      components.FTModelCard$outboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    var RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$;
    (function(RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$2) {
      RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$2.inboundSchema = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema;
      RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$2.outboundSchema = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema;
    })(RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ || (exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ = RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ = {}));
    function retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetToJSON(retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet) {
      return JSON.stringify(exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema.parse(retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet));
    }
    function retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/index.js
var require_operations = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_deletemodelv1modelsmodeliddelete(), exports);
    __exportStar(require_filesapiroutesdeletefile(), exports);
    __exportStar(require_filesapiroutesdownloadfile(), exports);
    __exportStar(require_filesapiroutesgetsignedurl(), exports);
    __exportStar(require_filesapirouteslistfiles(), exports);
    __exportStar(require_filesapiroutesretrievefile(), exports);
    __exportStar(require_filesapiroutesuploadfile(), exports);
    __exportStar(require_jobsapiroutesbatchcancelbatchjob(), exports);
    __exportStar(require_jobsapiroutesbatchgetbatchjob(), exports);
    __exportStar(require_jobsapiroutesbatchgetbatchjobs(), exports);
    __exportStar(require_jobsapiroutesfinetuningarchivefinetunedmodel(), exports);
    __exportStar(require_jobsapiroutesfinetuningcancelfinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuningcreatefinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuninggetfinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuninggetfinetuningjobs(), exports);
    __exportStar(require_jobsapiroutesfinetuningstartfinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuningunarchivefinetunedmodel(), exports);
    __exportStar(require_jobsapiroutesfinetuningupdatefinetunedmodel(), exports);
    __exportStar(require_retrievemodelv1modelsmodelidget(), exports);
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsCancel.js
var require_batchJobsCancel = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsCancel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsCancel = batchJobsCancel;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function batchJobsCancel(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs/{job_id}/cancel")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_batch_cancel_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsCreate.js
var require_batchJobsCreate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsCreate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsCreate = batchJobsCreate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    async function batchJobsCreate(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.BatchJobIn$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_batch_create_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsGet.js
var require_batchJobsGet = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsGet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsGet = batchJobsGet;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function batchJobsGet(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs/{job_id}")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_batch_get_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsList.js
var require_batchJobsList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsList = batchJobsList;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function batchJobsList(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema.optional().parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs")();
      const query = (0, encodings_js_1.encodeFormQuery)({
        "created_after": payload === null || payload === void 0 ? void 0 : payload.created_after,
        "created_by_me": payload === null || payload === void 0 ? void 0 : payload.created_by_me,
        "metadata": payload === null || payload === void 0 ? void 0 : payload.metadata,
        "model": payload === null || payload === void 0 ? void 0 : payload.model,
        "page": payload === null || payload === void 0 ? void 0 : payload.page,
        "page_size": payload === null || payload === void 0 ? void 0 : payload.page_size,
        "status": payload === null || payload === void 0 ? void 0 : payload.status
      });
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_batch_get_batch_jobs",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        query,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobsOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/mistraljobs.js
var require_mistraljobs = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/mistraljobs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MistralJobs = void 0;
    var batchJobsCancel_js_1 = require_batchJobsCancel();
    var batchJobsCreate_js_1 = require_batchJobsCreate();
    var batchJobsGet_js_1 = require_batchJobsGet();
    var batchJobsList_js_1 = require_batchJobsList();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var MistralJobs = class extends sdks_js_1.ClientSDK {
      /**
       * Get Batch Jobs
       *
       * @remarks
       * Get a list of batch jobs for your organization and user.
       */
      async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsList_js_1.batchJobsList)(this, request, options));
      }
      /**
       * Create Batch Job
       *
       * @remarks
       * Create a new batch job, it will be queued for processing.
       */
      async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsCreate_js_1.batchJobsCreate)(this, request, options));
      }
      /**
       * Get Batch Job
       *
       * @remarks
       * Get a batch job details by its UUID.
       */
      async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsGet_js_1.batchJobsGet)(this, request, options));
      }
      /**
       * Cancel Batch Job
       *
       * @remarks
       * Request the cancellation of a batch job.
       */
      async cancel(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsCancel_js_1.batchJobsCancel)(this, request, options));
      }
    };
    exports.MistralJobs = MistralJobs;
  }
});

// node_modules/@mistralai/mistralai/sdk/batch.js
var require_batch = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/batch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Batch = void 0;
    var sdks_js_1 = require_sdks();
    var mistraljobs_js_1 = require_mistraljobs();
    var Batch = class extends sdks_js_1.ClientSDK {
      get jobs() {
        var _a;
        return (_a = this._jobs) !== null && _a !== void 0 ? _a : this._jobs = new mistraljobs_js_1.MistralJobs(this._options);
      }
    };
    exports.Batch = Batch;
  }
});

// node_modules/@mistralai/mistralai/funcs/chatComplete.js
var require_chatComplete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/chatComplete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chatComplete = chatComplete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function chatComplete(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ChatCompletionRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/chat/completions")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "chat_completion_v1_chat_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ChatCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/chatStream.js
var require_chatStream = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/chatStream.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chatStream = chatStream;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var event_streams_js_1 = require_event_streams();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function chatStream(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ChatCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/chat/completions#stream")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "stream_chat",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream) => {
        return new event_streams_js_1.EventStream({
          stream,
          decoder(rawEvent) {
            const schema = components.CompletionEvent$inboundSchema;
            return schema.parse(rawEvent);
          }
        });
      }), { sseSentinel: "[DONE]" }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/chat.js
var require_chat = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/chat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Chat = void 0;
    var chatComplete_js_1 = require_chatComplete();
    var chatStream_js_1 = require_chatStream();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Chat = class extends sdks_js_1.ClientSDK {
      /**
       * Chat Completion
       */
      async complete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, chatComplete_js_1.chatComplete)(this, request, options));
      }
      /**
       * Stream chat completion
       *
       * @remarks
       * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
       */
      async stream(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, chatStream_js_1.chatStream)(this, request, options));
      }
    };
    exports.Chat = Chat;
  }
});

// node_modules/@mistralai/mistralai/funcs/classifiersModerate.js
var require_classifiersModerate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/classifiersModerate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.classifiersModerate = classifiersModerate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function classifiersModerate(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ClassificationRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/moderations")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "moderations_v1_moderations_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ClassificationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/classifiersModerateChat.js
var require_classifiersModerateChat = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/classifiersModerateChat.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.classifiersModerateChat = classifiersModerateChat;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function classifiersModerateChat(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ChatClassificationRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/chat/moderations")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "moderations_chat_v1_chat_moderations_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ClassificationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/classifiers.js
var require_classifiers = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/classifiers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Classifiers = void 0;
    var classifiersModerate_js_1 = require_classifiersModerate();
    var classifiersModerateChat_js_1 = require_classifiersModerateChat();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Classifiers = class extends sdks_js_1.ClientSDK {
      /**
       * Moderations
       */
      async moderate(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, classifiersModerate_js_1.classifiersModerate)(this, request, options));
      }
      /**
       * Moderations Chat
       */
      async moderateChat(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, classifiersModerateChat_js_1.classifiersModerateChat)(this, request, options));
      }
    };
    exports.Classifiers = Classifiers;
  }
});

// node_modules/@mistralai/mistralai/funcs/embeddingsCreate.js
var require_embeddingsCreate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/embeddingsCreate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.embeddingsCreate = embeddingsCreate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function embeddingsCreate(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.EmbeddingRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/embeddings")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "embeddings_v1_embeddings_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.EmbeddingResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/embeddings.js
var require_embeddings = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/embeddings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Embeddings = void 0;
    var embeddingsCreate_js_1 = require_embeddingsCreate();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Embeddings = class extends sdks_js_1.ClientSDK {
      /**
       * Embeddings
       *
       * @remarks
       * Embeddings
       */
      async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, embeddingsCreate_js_1.embeddingsCreate)(this, request, options));
      }
    };
    exports.Embeddings = Embeddings;
  }
});

// node_modules/@mistralai/mistralai/funcs/filesDelete.js
var require_filesDelete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesDelete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesDelete = filesDelete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function filesDelete(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesDeleteFileRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "files_api_routes_delete_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DeleteFileOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesDownload.js
var require_filesDownload = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesDownload.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesDownload = filesDownload;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var operations = __importStar(require_operations());
    async function filesDownload(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesDownloadFileRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}/content")(pathParams);
      const headers = new Headers({
        Accept: "application/octet-stream"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "files_api_routes_download_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.stream(200, z.instanceof(ReadableStream)), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesGetSignedUrl.js
var require_filesGetSignedUrl = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesGetSignedUrl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesGetSignedUrl = filesGetSignedUrl;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function filesGetSignedUrl(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesGetSignedUrlRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}/url")(pathParams);
      const query = (0, encodings_js_1.encodeFormQuery)({
        "expiry": payload.expiry
      });
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "files_api_routes_get_signed_url",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        query,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.FileSignedURL$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesList.js
var require_filesList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesList = filesList;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function filesList(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesListFilesRequest$outboundSchema.optional().parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const path = (0, url_js_1.pathToFunc)("/v1/files")();
      const query = (0, encodings_js_1.encodeFormQuery)({
        "page": payload === null || payload === void 0 ? void 0 : payload.page,
        "page_size": payload === null || payload === void 0 ? void 0 : payload.page_size,
        "purpose": payload === null || payload === void 0 ? void 0 : payload.purpose,
        "sample_type": payload === null || payload === void 0 ? void 0 : payload.sample_type,
        "search": payload === null || payload === void 0 ? void 0 : payload.search,
        "source": payload === null || payload === void 0 ? void 0 : payload.source
      });
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "files_api_routes_list_files",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        query,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.ListFilesOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesRetrieve.js
var require_filesRetrieve = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesRetrieve.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesRetrieve = filesRetrieve;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function filesRetrieve(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesRetrieveFileRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "files_api_routes_retrieve_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.RetrieveFileOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/types/streams.js
var require_streams = __commonJS({
  "node_modules/@mistralai/mistralai/types/streams.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReadableStream = isReadableStream;
    function isReadableStream(val) {
      if (typeof val !== "object" || val === null) {
        return false;
      }
      const stream = val;
      return typeof stream.getReader === "function" && typeof stream.cancel === "function" && typeof stream.tee === "function";
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesUpload.js
var require_filesUpload = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesUpload.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesUpload = filesUpload;
    var files_js_1 = require_files();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var blobs_js_1 = require_blobs();
    var streams_js_1 = require_streams();
    async function filesUpload(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = new FormData();
      if ((0, blobs_js_1.isBlobLike)(payload.file)) {
        body.append("file", payload.file);
      } else if ((0, streams_js_1.isReadableStream)(payload.file.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.file.content);
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        body.append("file", blob);
      } else {
        body.append("file", new Blob([payload.file.content], { type: "application/octet-stream" }), payload.file.fileName);
      }
      if (payload.purpose !== void 0) {
        body.append("purpose", payload.purpose);
      }
      const path = (0, url_js_1.pathToFunc)("/v1/files")();
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "files_api_routes_upload_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.UploadFileOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/files.js
var require_files2 = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/files.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Files = void 0;
    var filesDelete_js_1 = require_filesDelete();
    var filesDownload_js_1 = require_filesDownload();
    var filesGetSignedUrl_js_1 = require_filesGetSignedUrl();
    var filesList_js_1 = require_filesList();
    var filesRetrieve_js_1 = require_filesRetrieve();
    var filesUpload_js_1 = require_filesUpload();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Files = class extends sdks_js_1.ClientSDK {
      /**
       * Upload File
       *
       * @remarks
       * Upload a file that can be used across various endpoints.
       *
       * The size of individual files can be a maximum of 512 MB. The Fine-tuning API only supports .jsonl files.
       *
       * Please contact us if you need to increase these storage limits.
       */
      async upload(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesUpload_js_1.filesUpload)(this, request, options));
      }
      /**
       * List Files
       *
       * @remarks
       * Returns a list of files that belong to the user's organization.
       */
      async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesList_js_1.filesList)(this, request, options));
      }
      /**
       * Retrieve File
       *
       * @remarks
       * Returns information about a specific file.
       */
      async retrieve(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesRetrieve_js_1.filesRetrieve)(this, request, options));
      }
      /**
       * Delete File
       *
       * @remarks
       * Delete a file.
       */
      async delete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesDelete_js_1.filesDelete)(this, request, options));
      }
      /**
       * Download File
       *
       * @remarks
       * Download a file
       */
      async download(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesDownload_js_1.filesDownload)(this, request, options));
      }
      /**
       * Get Signed Url
       */
      async getSignedUrl(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesGetSignedUrl_js_1.filesGetSignedUrl)(this, request, options));
      }
    };
    exports.Files = Files;
  }
});

// node_modules/@mistralai/mistralai/funcs/fimComplete.js
var require_fimComplete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fimComplete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fimComplete = fimComplete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function fimComplete(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.FIMCompletionRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/fim/completions")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "fim_completion_v1_fim_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.FIMCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fimStream.js
var require_fimStream = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fimStream.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fimStream = fimStream;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var event_streams_js_1 = require_event_streams();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function fimStream(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.FIMCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/fim/completions#stream")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "stream_fim",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream) => {
        return new event_streams_js_1.EventStream({
          stream,
          decoder(rawEvent) {
            const schema = components.CompletionEvent$inboundSchema;
            return schema.parse(rawEvent);
          }
        });
      }), { sseSentinel: "[DONE]" }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/fim.js
var require_fim = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/fim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fim = void 0;
    var fimComplete_js_1 = require_fimComplete();
    var fimStream_js_1 = require_fimStream();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Fim = class extends sdks_js_1.ClientSDK {
      /**
       * Fim Completion
       *
       * @remarks
       * FIM completion.
       */
      async complete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fimComplete_js_1.fimComplete)(this, request, options));
      }
      /**
       * Stream fim completion
       *
       * @remarks
       * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
       */
      async stream(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fimStream_js_1.fimStream)(this, request, options));
      }
    };
    exports.Fim = Fim;
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsCancel.js
var require_fineTuningJobsCancel = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsCancel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsCancel = fineTuningJobsCancel;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function fineTuningJobsCancel(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}/cancel")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_cancel_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DetailedJobOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsCreate.js
var require_fineTuningJobsCreate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsCreate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsCreate = fineTuningJobsCreate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function fineTuningJobsCreate(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.JobIn$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs")();
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_create_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsGet.js
var require_fineTuningJobsGet = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsGet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsGet = fineTuningJobsGet;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function fineTuningJobsGet(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_get_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DetailedJobOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsList.js
var require_fineTuningJobsList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsList = fineTuningJobsList;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function fineTuningJobsList(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema.optional().parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs")();
      const query = (0, encodings_js_1.encodeFormQuery)({
        "created_after": payload === null || payload === void 0 ? void 0 : payload.created_after,
        "created_by_me": payload === null || payload === void 0 ? void 0 : payload.created_by_me,
        "model": payload === null || payload === void 0 ? void 0 : payload.model,
        "page": payload === null || payload === void 0 ? void 0 : payload.page,
        "page_size": payload === null || payload === void 0 ? void 0 : payload.page_size,
        "status": payload === null || payload === void 0 ? void 0 : payload.status,
        "suffix": payload === null || payload === void 0 ? void 0 : payload.suffix,
        "wandb_name": payload === null || payload === void 0 ? void 0 : payload.wandb_name,
        "wandb_project": payload === null || payload === void 0 ? void 0 : payload.wandb_project
      });
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_get_fine_tuning_jobs",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        query,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.JobsOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsStart.js
var require_fineTuningJobsStart = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsStart.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsStart = fineTuningJobsStart;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function fineTuningJobsStart(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}/start")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_start_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DetailedJobOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/jobs.js
var require_jobs = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/jobs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Jobs = void 0;
    var fineTuningJobsCancel_js_1 = require_fineTuningJobsCancel();
    var fineTuningJobsCreate_js_1 = require_fineTuningJobsCreate();
    var fineTuningJobsGet_js_1 = require_fineTuningJobsGet();
    var fineTuningJobsList_js_1 = require_fineTuningJobsList();
    var fineTuningJobsStart_js_1 = require_fineTuningJobsStart();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Jobs = class extends sdks_js_1.ClientSDK {
      /**
       * Get Fine Tuning Jobs
       *
       * @remarks
       * Get a list of fine-tuning jobs for your organization and user.
       */
      async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsList_js_1.fineTuningJobsList)(this, request, options));
      }
      /**
       * Create Fine Tuning Job
       *
       * @remarks
       * Create a new fine-tuning job, it will be queued for processing.
       */
      async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsCreate_js_1.fineTuningJobsCreate)(this, request, options));
      }
      /**
       * Get Fine Tuning Job
       *
       * @remarks
       * Get a fine-tuned job details by its UUID.
       */
      async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsGet_js_1.fineTuningJobsGet)(this, request, options));
      }
      /**
       * Cancel Fine Tuning Job
       *
       * @remarks
       * Request the cancellation of a fine tuning job.
       */
      async cancel(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsCancel_js_1.fineTuningJobsCancel)(this, request, options));
      }
      /**
       * Start Fine Tuning Job
       *
       * @remarks
       * Request the start of a validated fine tuning job.
       */
      async start(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsStart_js_1.fineTuningJobsStart)(this, request, options));
      }
    };
    exports.Jobs = Jobs;
  }
});

// node_modules/@mistralai/mistralai/sdk/finetuning.js
var require_finetuning = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/finetuning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FineTuning = void 0;
    var sdks_js_1 = require_sdks();
    var jobs_js_1 = require_jobs();
    var FineTuning = class extends sdks_js_1.ClientSDK {
      get jobs() {
        var _a;
        return (_a = this._jobs) !== null && _a !== void 0 ? _a : this._jobs = new jobs_js_1.Jobs(this._options);
      }
    };
    exports.FineTuning = FineTuning;
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsArchive.js
var require_modelsArchive = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsArchive.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsArchive = modelsArchive;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function modelsArchive(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}/archive")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_archive_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.ArchiveFTModelOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsDelete.js
var require_modelsDelete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsDelete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsDelete = modelsDelete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var operations = __importStar(require_operations());
    async function modelsDelete(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/models/{model_id}")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "delete_model_v1_models__model_id__delete",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.DeleteModelOut$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsList.js
var require_modelsList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsList = modelsList;
    var M = __importStar(require_matchers());
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    async function modelsList(client, options) {
      const path = (0, url_js_1.pathToFunc)("/v1/models")();
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "list_models_v1_models_get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ModelList$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsRetrieve.js
var require_modelsRetrieve = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsRetrieve.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsRetrieve = modelsRetrieve;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var errors = __importStar(require_errors2());
    var operations = __importStar(require_operations());
    async function modelsRetrieve(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/models/{model_id}")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "retrieve_model_v1_models__model_id__get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, operations.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsUnarchive.js
var require_modelsUnarchive = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsUnarchive.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsUnarchive = modelsUnarchive;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function modelsUnarchive(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}/archive")(pathParams);
      const headers = new Headers({
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_unarchive_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.UnarchiveFTModelOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsUpdate.js
var require_modelsUpdate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsUpdate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsUpdate = modelsUpdate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    async function modelsUpdate(client, request, options) {
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return parsed;
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload.UpdateFTModelIn, { explode: true });
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}")(pathParams);
      const headers = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json"
      });
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        operationID: "jobs_api_routes_fine_tuning_update_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "PATCH",
        path,
        headers,
        body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return requestRes;
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return doResult;
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.FTModelOut$inboundSchema), M.fail(["4XX", "5XX"]))(response);
      if (!result.ok) {
        return result;
      }
      return result;
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/models.js
var require_models = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Models = void 0;
    var modelsArchive_js_1 = require_modelsArchive();
    var modelsDelete_js_1 = require_modelsDelete();
    var modelsList_js_1 = require_modelsList();
    var modelsRetrieve_js_1 = require_modelsRetrieve();
    var modelsUnarchive_js_1 = require_modelsUnarchive();
    var modelsUpdate_js_1 = require_modelsUpdate();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Models = class extends sdks_js_1.ClientSDK {
      /**
       * List Models
       *
       * @remarks
       * List all models available to the user.
       */
      async list(options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsList_js_1.modelsList)(this, options));
      }
      /**
       * Retrieve Model
       *
       * @remarks
       * Retrieve a model information.
       */
      async retrieve(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsRetrieve_js_1.modelsRetrieve)(this, request, options));
      }
      /**
       * Delete Model
       *
       * @remarks
       * Delete a fine-tuned model.
       */
      async delete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsDelete_js_1.modelsDelete)(this, request, options));
      }
      /**
       * Update Fine Tuned Model
       *
       * @remarks
       * Update a model name or description.
       */
      async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsUpdate_js_1.modelsUpdate)(this, request, options));
      }
      /**
       * Archive Fine Tuned Model
       *
       * @remarks
       * Archive a fine-tuned model.
       */
      async archive(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsArchive_js_1.modelsArchive)(this, request, options));
      }
      /**
       * Unarchive Fine Tuned Model
       *
       * @remarks
       * Un-archive a fine-tuned model.
       */
      async unarchive(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsUnarchive_js_1.modelsUnarchive)(this, request, options));
      }
    };
    exports.Models = Models;
  }
});

// node_modules/@mistralai/mistralai/sdk/sdk.js
var require_sdk = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/sdk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mistral = void 0;
    var sdks_js_1 = require_sdks();
    var agents_js_1 = require_agents();
    var batch_js_1 = require_batch();
    var chat_js_1 = require_chat();
    var classifiers_js_1 = require_classifiers();
    var embeddings_js_1 = require_embeddings();
    var files_js_1 = require_files2();
    var fim_js_1 = require_fim();
    var finetuning_js_1 = require_finetuning();
    var models_js_1 = require_models();
    var Mistral2 = class extends sdks_js_1.ClientSDK {
      get models() {
        var _a;
        return (_a = this._models) !== null && _a !== void 0 ? _a : this._models = new models_js_1.Models(this._options);
      }
      get files() {
        var _a;
        return (_a = this._files) !== null && _a !== void 0 ? _a : this._files = new files_js_1.Files(this._options);
      }
      get fineTuning() {
        var _a;
        return (_a = this._fineTuning) !== null && _a !== void 0 ? _a : this._fineTuning = new finetuning_js_1.FineTuning(this._options);
      }
      get batch() {
        var _a;
        return (_a = this._batch) !== null && _a !== void 0 ? _a : this._batch = new batch_js_1.Batch(this._options);
      }
      get chat() {
        var _a;
        return (_a = this._chat) !== null && _a !== void 0 ? _a : this._chat = new chat_js_1.Chat(this._options);
      }
      get fim() {
        var _a;
        return (_a = this._fim) !== null && _a !== void 0 ? _a : this._fim = new fim_js_1.Fim(this._options);
      }
      get agents() {
        var _a;
        return (_a = this._agents) !== null && _a !== void 0 ? _a : this._agents = new agents_js_1.Agents(this._options);
      }
      get embeddings() {
        var _a;
        return (_a = this._embeddings) !== null && _a !== void 0 ? _a : this._embeddings = new embeddings_js_1.Embeddings(this._options);
      }
      get classifiers() {
        var _a;
        return (_a = this._classifiers) !== null && _a !== void 0 ? _a : this._classifiers = new classifiers_js_1.Classifiers(this._options);
      }
    };
    exports.Mistral = Mistral2;
  }
});

// node_modules/@mistralai/mistralai/index.js
var require_mistralai = __commonJS({
  "node_modules/@mistralai/mistralai/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.files = void 0;
    __exportStar(require_config(), exports);
    exports.files = __importStar(require_files());
    __exportStar(require_sdk(), exports);
  }
});

// app/components/ChatInterface.tsx
var import_react3 = __toESM(require_react(), 1);

// app/components/ui/button.tsx
var React3 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-slot/dist/index.mjs
var React2 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-compose-refs/dist/index.mjs
var React = __toESM(require_react(), 1);
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => refs.forEach((ref) => setRef(ref, node));
}

// node_modules/@radix-ui/react-slot/dist/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var Slot = React2.forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = React2.Children.toArray(children);
  const slottable = childrenArray.find(isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (React2.Children.count(newElement) > 1)
          return React2.Children.only(null);
        return React2.isValidElement(newElement) ? newElement.props.children : null;
      } else {
        return child;
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children: React2.isValidElement(newElement) ? React2.cloneElement(newElement, void 0, newChildren) : null });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children });
});
Slot.displayName = "Slot";
var SlotClone = React2.forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (React2.isValidElement(children)) {
    const childrenRef = getElementRef(children);
    return React2.cloneElement(children, {
      ...mergeProps(slotProps, children.props),
      // @ts-ignore
      ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef
    });
  }
  return React2.Children.count(children) > 1 ? React2.Children.only(null) : null;
});
SlotClone.displayName = "SlotClone";
var Slottable = ({ children }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
};
function isSlottable(child) {
  return React2.isValidElement(child) && child.type === Slottable;
}
function mergeProps(slotProps, childProps) {
  const overrideProps = { ...childProps };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) {
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      } else if (slotPropValue) {
        overrideProps[propName] = slotPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
function getElementRef(element) {
  let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}

// node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}

// node_modules/class-variance-authority/dist/index.mjs
var falsyToString = (value) => typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
var cx = clsx;
var cva = (base, config) => (props) => {
  var _config_compoundVariants;
  if ((config === null || config === void 0 ? void 0 : config.variants) == null)
    return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  const { variants, defaultVariants } = config;
  const getVariantClassNames = Object.keys(variants).map((variant) => {
    const variantProp = props === null || props === void 0 ? void 0 : props[variant];
    const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
    if (variantProp === null)
      return null;
    const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
    return variants[variant][variantKey];
  });
  const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
    let [key, value] = param;
    if (value === void 0) {
      return acc;
    }
    acc[key] = value;
    return acc;
  }, {});
  const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {
    let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;
    return Object.entries(compoundVariantOptions).every((param2) => {
      let [key, value] = param2;
      return Array.isArray(value) ? value.includes({
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key]) : {
        ...defaultVariants,
        ...propsWithoutUndefined
      }[key] === value;
    }) ? [
      ...acc,
      cvClass,
      cvClassName
    ] : acc;
  }, []);
  return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
};

// node_modules/tailwind-merge/dist/bundle-mjs.mjs
var CLASS_PART_SEPARATOR = "-";
var createClassGroupUtils = (config) => {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  const getClassGroupId = (className) => {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  };
  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  };
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
};
var getGroupRecursive = (classParts, classPartObject) => {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return classPartObject.validators.find(({
    validator
  }) => validator(classRest))?.classGroupId;
};
var arbitraryPropertyRegex = /^\[(.+)\]$/;
var getGroupIdForArbitraryProperty = (className) => {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
};
var createClassMap = (config) => {
  const {
    theme,
    prefix
  } = config;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
};
var processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
};
var getPart = (classPartObject, path) => {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
};
var isThemeGetter = (func) => func.isThemeGetter;
var getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map((classDefinition) => {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
};
var createLruCache = (maxCacheSize) => {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  const update = (key, value) => {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  };
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
};
var IMPORTANT_MODIFIER = "!";
var createParseClassName = (config) => {
  const {
    separator,
    experimentalParseClassName
  } = config;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  const parseClassName = (className) => {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index2 = 0; index2 < className.length; index2++) {
      let currentCharacter = className[index2];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index2, index2 + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index2));
          modifierStart = index2 + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index2;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
  if (experimentalParseClassName) {
    return (className) => experimentalParseClassName({
      className,
      parseClassName
    });
  }
  return parseClassName;
};
var sortModifiers = (modifiers) => {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach((modifier) => {
    const isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
};
var createConfigUtils = (config) => ({
  cache: createLruCache(config.cacheSize),
  parseClassName: createParseClassName(config),
  ...createClassGroupUtils(config)
});
var SPLIT_CLASSES_REGEX = /\s+/;
var mergeClassList = (classList, configUtils) => {
  const {
    parseClassName,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  const classGroupsInConflict = [];
  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
  let result = "";
  for (let index2 = classNames.length - 1; index2 >= 0; index2 -= 1) {
    const originalClassName = classNames[index2];
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = parseClassName(originalClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    if (!classGroupId) {
      if (!hasPostfixModifier) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.includes(classId)) {
      continue;
    }
    classGroupsInConflict.push(classId);
    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
    for (let i = 0; i < conflictGroups.length; ++i) {
      const group = conflictGroups[i];
      classGroupsInConflict.push(modifierId + group);
    }
    result = originalClassName + (result.length > 0 ? " " + result : result);
  }
  return result;
};
function twJoin() {
  let index2 = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index2 < arguments.length) {
    if (argument = arguments[index2++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
var toValue = (mix) => {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue(mix[k])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
var fromTheme = (key) => {
  const themeGetter = (theme) => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
};
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
var shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
var isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
var isArbitraryLength = (value) => getIsArbitraryValue(value, "length", isLengthOnly);
var isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));
var isArbitraryNumber = (value) => getIsArbitraryValue(value, "number", isNumber);
var isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));
var isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
var isArbitraryValue = (value) => arbitraryValueRegex.test(value);
var isTshirtSize = (value) => tshirtUnitRegex.test(value);
var sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
var isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);
var isArbitraryPosition = (value) => getIsArbitraryValue(value, "position", isNever);
var imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
var isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);
var isArbitraryShadow = (value) => getIsArbitraryValue(value, "", isShadow);
var isAny = () => true;
var getIsArbitraryValue = (value, label, testValue) => {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === "string" ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
};
var isLengthOnly = (value) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
);
var isNever = () => false;
var isShadow = (value) => shadowRegex.test(value);
var isImage = (value) => imageRegex.test(value);
var getDefaultConfig = () => {
  const colors = fromTheme("colors");
  const spacing = fromTheme("spacing");
  const blur = fromTheme("blur");
  const brightness = fromTheme("brightness");
  const borderColor = fromTheme("borderColor");
  const borderRadius = fromTheme("borderRadius");
  const borderSpacing = fromTheme("borderSpacing");
  const borderWidth = fromTheme("borderWidth");
  const contrast = fromTheme("contrast");
  const grayscale = fromTheme("grayscale");
  const hueRotate = fromTheme("hueRotate");
  const invert = fromTheme("invert");
  const gap = fromTheme("gap");
  const gradientColorStops = fromTheme("gradientColorStops");
  const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  const inset = fromTheme("inset");
  const margin = fromTheme("margin");
  const opacity = fromTheme("opacity");
  const padding = fromTheme("padding");
  const saturate = fromTheme("saturate");
  const scale = fromTheme("scale");
  const sepia = fromTheme("sepia");
  const skew = fromTheme("skew");
  const space = fromTheme("space");
  const translate = fromTheme("translate");
  const getOverscroll = () => ["auto", "contain", "none"];
  const getOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const getSpacingWithAutoAndArbitrary = () => ["auto", isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ["", isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ["auto", isNumber, isArbitraryValue];
  const getPositions = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  const getLineStyles = () => ["solid", "dashed", "dotted", "double", "none"];
  const getBlendModes = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  const getAlign = () => ["start", "end", "center", "between", "around", "evenly", "stretch"];
  const getZeroAndEmpty = () => ["", "0", isArbitraryValue];
  const getBreaks = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumberAndArbitrary(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumberAndArbitrary(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumberAndArbitrary(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumberAndArbitrary(),
      scale: getNumberAndArbitrary(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...getAlign(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...getAlign(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...getLineStyles(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...getLineStyles(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [{
        "border-s": [borderColor]
      }],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [{
        "border-e": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
};
var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);

// app/lib/utils.ts
if (import.meta) {
  import.meta.hot = createHotContext(
    //@ts-expect-error
    "app/lib/utils.ts"
  );
  import.meta.hot.lastModified = "1733945469382.845";
}
function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// app/components/ui/button.tsx
var import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
if (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {
  console.warn("remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.");
} else {
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    window.$RefreshRuntime$.register(type, '"app/components/ui/button.tsx"' + id);
  };
  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;
}
var prevRefreshReg;
var prevRefreshSig;
if (import.meta) {
  import.meta.hot = createHotContext(
    //@ts-expect-error
    "app/components/ui/button.tsx"
  );
  import.meta.hot.lastModified = "1733945473695.4082";
}
var buttonVariants = cva("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0", {
  variants: {
    variant: {
      default: "bg-primary text-primary-foreground hover:bg-primary/90",
      destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
      outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
      secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
      ghost: "hover:bg-accent hover:text-accent-foreground",
      link: "text-primary underline-offset-4 hover:underline"
    },
    size: {
      default: "h-10 px-4 py-2",
      sm: "h-9 rounded-md px-3",
      lg: "h-11 rounded-md px-8",
      icon: "h-10 w-10"
    }
  },
  defaultVariants: {
    variant: "default",
    size: "default"
  }
});
var Button = React3.forwardRef(_c = ({
  className,
  variant,
  size,
  asChild = false,
  ...props
}, ref) => {
  const Comp = asChild ? Slot : "button";
  return /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(Comp, { className: cn(buttonVariants({
    variant,
    size,
    className
  })), ref, ...props }, void 0, false, {
    fileName: "app/components/ui/button.tsx",
    lineNumber: 55,
    columnNumber: 10
  }, this);
});
_c2 = Button;
Button.displayName = "Button";
var _c;
var _c2;
$RefreshReg$(_c, "Button$React.forwardRef");
$RefreshReg$(_c2, "Button");
window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

// node_modules/lucide-react/dist/esm/createLucideIcon.js
var import_react2 = __toESM(require_react());

// node_modules/lucide-react/dist/esm/shared/src/utils.js
var toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
var mergeClasses = (...classes) => classes.filter((className, index2, array) => {
  return Boolean(className) && className.trim() !== "" && array.indexOf(className) === index2;
}).join(" ").trim();

// node_modules/lucide-react/dist/esm/Icon.js
var import_react = __toESM(require_react());

// node_modules/lucide-react/dist/esm/defaultAttributes.js
var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};

// node_modules/lucide-react/dist/esm/Icon.js
var Icon = (0, import_react.forwardRef)(
  ({
    color = "currentColor",
    size = 24,
    strokeWidth = 2,
    absoluteStrokeWidth,
    className = "",
    children,
    iconNode,
    ...rest
  }, ref) => {
    return (0, import_react.createElement)(
      "svg",
      {
        ref,
        ...defaultAttributes,
        width: size,
        height: size,
        stroke: color,
        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
        className: mergeClasses("lucide", className),
        ...rest
      },
      [
        ...iconNode.map(([tag, attrs]) => (0, import_react.createElement)(tag, attrs)),
        ...Array.isArray(children) ? children : [children]
      ]
    );
  }
);

// node_modules/lucide-react/dist/esm/createLucideIcon.js
var createLucideIcon = (iconName, iconNode) => {
  const Component = (0, import_react2.forwardRef)(
    ({ className, ...props }, ref) => (0, import_react2.createElement)(Icon, {
      ref,
      iconNode,
      className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className),
      ...props
    })
  );
  Component.displayName = `${iconName}`;
  return Component;
};

// node_modules/lucide-react/dist/esm/icons/menu.js
var Menu = createLucideIcon("Menu", [
  ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }],
  ["line", { x1: "4", x2: "20", y1: "6", y2: "6", key: "1owob3" }],
  ["line", { x1: "4", x2: "20", y1: "18", y2: "18", key: "yk5zj1" }]
]);

// node_modules/lucide-react/dist/esm/icons/send.js
var Send = createLucideIcon("Send", [
  [
    "path",
    {
      d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
      key: "1ffxy3"
    }
  ],
  ["path", { d: "m21.854 2.147-10.94 10.939", key: "12cjpa" }]
]);

// node_modules/lucide-react/dist/esm/icons/trash.js
var Trash = createLucideIcon("Trash", [
  ["path", { d: "M3 6h18", key: "d0wm0j" }],
  ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
  ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }]
]);

// node_modules/lucide-react/dist/esm/icons/x.js
var X = createLucideIcon("X", [
  ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
  ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
]);

// app/components/ChatInterface.tsx
var import_node = __toESM(require_node(), 1);

// node_modules/@supabase/functions-js/dist/module/helper.js
var resolveFetch = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => import("/build/_shared/browser-SXFQTG6F.js").then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};

// node_modules/@supabase/functions-js/dist/module/types.js
var FunctionsError = class extends Error {
  constructor(message, name = "FunctionsError", context) {
    super(message);
    this.name = name;
    this.context = context;
  }
};
var FunctionsFetchError = class extends FunctionsError {
  constructor(context) {
    super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
  }
};
var FunctionsRelayError = class extends FunctionsError {
  constructor(context) {
    super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
  }
};
var FunctionsHttpError = class extends FunctionsError {
  constructor(context) {
    super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
  }
};
var FunctionRegion;
(function(FunctionRegion2) {
  FunctionRegion2["Any"] = "any";
  FunctionRegion2["ApNortheast1"] = "ap-northeast-1";
  FunctionRegion2["ApNortheast2"] = "ap-northeast-2";
  FunctionRegion2["ApSouth1"] = "ap-south-1";
  FunctionRegion2["ApSoutheast1"] = "ap-southeast-1";
  FunctionRegion2["ApSoutheast2"] = "ap-southeast-2";
  FunctionRegion2["CaCentral1"] = "ca-central-1";
  FunctionRegion2["EuCentral1"] = "eu-central-1";
  FunctionRegion2["EuWest1"] = "eu-west-1";
  FunctionRegion2["EuWest2"] = "eu-west-2";
  FunctionRegion2["EuWest3"] = "eu-west-3";
  FunctionRegion2["SaEast1"] = "sa-east-1";
  FunctionRegion2["UsEast1"] = "us-east-1";
  FunctionRegion2["UsWest1"] = "us-west-1";
  FunctionRegion2["UsWest2"] = "us-west-2";
})(FunctionRegion || (FunctionRegion = {}));

// node_modules/@supabase/functions-js/dist/module/FunctionsClient.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var FunctionsClient = class {
  constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any } = {}) {
    this.url = url;
    this.headers = headers;
    this.region = region;
    this.fetch = resolveFetch(customFetch);
  }
  /**
   * Updates the authorization header
   * @param token - the new jwt token sent in the authorisation header
   */
  setAuth(token) {
    this.headers.Authorization = `Bearer ${token}`;
  }
  /**
   * Invokes a function
   * @param functionName - The name of the Function to invoke.
   * @param options - Options for invoking the Function.
   */
  invoke(functionName, options = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      try {
        const { headers, method, body: functionArgs } = options;
        let _headers = {};
        let { region } = options;
        if (!region) {
          region = this.region;
        }
        if (region && region !== "any") {
          _headers["x-region"] = region;
        }
        let body;
        if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
          if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
            _headers["Content-Type"] = "application/octet-stream";
            body = functionArgs;
          } else if (typeof functionArgs === "string") {
            _headers["Content-Type"] = "text/plain";
            body = functionArgs;
          } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
            body = functionArgs;
          } else {
            _headers["Content-Type"] = "application/json";
            body = JSON.stringify(functionArgs);
          }
        }
        const response = yield this.fetch(`${this.url}/${functionName}`, {
          method: method || "POST",
          // headers priority is (high to low):
          // 1. invoke-level headers
          // 2. client-level headers
          // 3. default Content-Type header
          headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
          body
        }).catch((fetchError) => {
          throw new FunctionsFetchError(fetchError);
        });
        const isRelayError = response.headers.get("x-relay-error");
        if (isRelayError && isRelayError === "true") {
          throw new FunctionsRelayError(response);
        }
        if (!response.ok) {
          throw new FunctionsHttpError(response);
        }
        let responseType = ((_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "text/plain").split(";")[0].trim();
        let data;
        if (responseType === "application/json") {
          data = yield response.json();
        } else if (responseType === "application/octet-stream") {
          data = yield response.blob();
        } else if (responseType === "text/event-stream") {
          data = response;
        } else if (responseType === "multipart/form-data") {
          data = yield response.formData();
        } else {
          data = yield response.text();
        }
        return { data, error: null };
      } catch (error) {
        return { data: null, error };
      }
    });
  }
};

// node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs
var import_cjs = __toESM(require_cjs(), 1);
var {
  PostgrestClient,
  PostgrestQueryBuilder,
  PostgrestFilterBuilder,
  PostgrestTransformBuilder,
  PostgrestBuilder
} = import_cjs.default;

// node_modules/@supabase/realtime-js/dist/module/lib/version.js
var version = "2.11.2";

// node_modules/@supabase/realtime-js/dist/module/lib/constants.js
var DEFAULT_HEADERS = { "X-Client-Info": `realtime-js/${version}` };
var VSN = "1.0.0";
var DEFAULT_TIMEOUT = 1e4;
var WS_CLOSE_NORMAL = 1e3;
var SOCKET_STATES;
(function(SOCKET_STATES2) {
  SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
  SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
  SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
  SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
})(SOCKET_STATES || (SOCKET_STATES = {}));
var CHANNEL_STATES;
(function(CHANNEL_STATES2) {
  CHANNEL_STATES2["closed"] = "closed";
  CHANNEL_STATES2["errored"] = "errored";
  CHANNEL_STATES2["joined"] = "joined";
  CHANNEL_STATES2["joining"] = "joining";
  CHANNEL_STATES2["leaving"] = "leaving";
})(CHANNEL_STATES || (CHANNEL_STATES = {}));
var CHANNEL_EVENTS;
(function(CHANNEL_EVENTS2) {
  CHANNEL_EVENTS2["close"] = "phx_close";
  CHANNEL_EVENTS2["error"] = "phx_error";
  CHANNEL_EVENTS2["join"] = "phx_join";
  CHANNEL_EVENTS2["reply"] = "phx_reply";
  CHANNEL_EVENTS2["leave"] = "phx_leave";
  CHANNEL_EVENTS2["access_token"] = "access_token";
})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
var TRANSPORTS;
(function(TRANSPORTS2) {
  TRANSPORTS2["websocket"] = "websocket";
})(TRANSPORTS || (TRANSPORTS = {}));
var CONNECTION_STATE;
(function(CONNECTION_STATE2) {
  CONNECTION_STATE2["Connecting"] = "connecting";
  CONNECTION_STATE2["Open"] = "open";
  CONNECTION_STATE2["Closing"] = "closing";
  CONNECTION_STATE2["Closed"] = "closed";
})(CONNECTION_STATE || (CONNECTION_STATE = {}));

// node_modules/@supabase/realtime-js/dist/module/lib/serializer.js
var Serializer = class {
  constructor() {
    this.HEADER_LENGTH = 1;
  }
  decode(rawPayload, callback) {
    if (rawPayload.constructor === ArrayBuffer) {
      return callback(this._binaryDecode(rawPayload));
    }
    if (typeof rawPayload === "string") {
      return callback(JSON.parse(rawPayload));
    }
    return callback({});
  }
  _binaryDecode(buffer) {
    const view = new DataView(buffer);
    const decoder = new TextDecoder();
    return this._decodeBroadcast(buffer, view, decoder);
  }
  _decodeBroadcast(buffer, view, decoder) {
    const topicSize = view.getUint8(1);
    const eventSize = view.getUint8(2);
    let offset = this.HEADER_LENGTH + 2;
    const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
    offset = offset + topicSize;
    const event = decoder.decode(buffer.slice(offset, offset + eventSize));
    offset = offset + eventSize;
    const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
    return { ref: null, topic, event, payload: data };
  }
};

// node_modules/@supabase/realtime-js/dist/module/lib/timer.js
var Timer = class {
  constructor(callback, timerCalc) {
    this.callback = callback;
    this.timerCalc = timerCalc;
    this.timer = void 0;
    this.tries = 0;
    this.callback = callback;
    this.timerCalc = timerCalc;
  }
  reset() {
    this.tries = 0;
    clearTimeout(this.timer);
  }
  // Cancels any previous scheduleTimeout and schedules callback
  scheduleTimeout() {
    clearTimeout(this.timer);
    this.timer = setTimeout(() => {
      this.tries = this.tries + 1;
      this.callback();
    }, this.timerCalc(this.tries + 1));
  }
};

// node_modules/@supabase/realtime-js/dist/module/lib/transformers.js
var PostgresTypes;
(function(PostgresTypes2) {
  PostgresTypes2["abstime"] = "abstime";
  PostgresTypes2["bool"] = "bool";
  PostgresTypes2["date"] = "date";
  PostgresTypes2["daterange"] = "daterange";
  PostgresTypes2["float4"] = "float4";
  PostgresTypes2["float8"] = "float8";
  PostgresTypes2["int2"] = "int2";
  PostgresTypes2["int4"] = "int4";
  PostgresTypes2["int4range"] = "int4range";
  PostgresTypes2["int8"] = "int8";
  PostgresTypes2["int8range"] = "int8range";
  PostgresTypes2["json"] = "json";
  PostgresTypes2["jsonb"] = "jsonb";
  PostgresTypes2["money"] = "money";
  PostgresTypes2["numeric"] = "numeric";
  PostgresTypes2["oid"] = "oid";
  PostgresTypes2["reltime"] = "reltime";
  PostgresTypes2["text"] = "text";
  PostgresTypes2["time"] = "time";
  PostgresTypes2["timestamp"] = "timestamp";
  PostgresTypes2["timestamptz"] = "timestamptz";
  PostgresTypes2["timetz"] = "timetz";
  PostgresTypes2["tsrange"] = "tsrange";
  PostgresTypes2["tstzrange"] = "tstzrange";
})(PostgresTypes || (PostgresTypes = {}));
var convertChangeData = (columns, record, options = {}) => {
  var _a;
  const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];
  return Object.keys(record).reduce((acc, rec_key) => {
    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
    return acc;
  }, {});
};
var convertColumn = (columnName, columns, record, skipTypes) => {
  const column = columns.find((x) => x.name === columnName);
  const colType = column === null || column === void 0 ? void 0 : column.type;
  const value = record[columnName];
  if (colType && !skipTypes.includes(colType)) {
    return convertCell(colType, value);
  }
  return noop(value);
};
var convertCell = (type, value) => {
  if (type.charAt(0) === "_") {
    const dataType = type.slice(1, type.length);
    return toArray(value, dataType);
  }
  switch (type) {
    case PostgresTypes.bool:
      return toBoolean(value);
    case PostgresTypes.float4:
    case PostgresTypes.float8:
    case PostgresTypes.int2:
    case PostgresTypes.int4:
    case PostgresTypes.int8:
    case PostgresTypes.numeric:
    case PostgresTypes.oid:
      return toNumber(value);
    case PostgresTypes.json:
    case PostgresTypes.jsonb:
      return toJson(value);
    case PostgresTypes.timestamp:
      return toTimestampString(value);
    case PostgresTypes.abstime:
    case PostgresTypes.date:
    case PostgresTypes.daterange:
    case PostgresTypes.int4range:
    case PostgresTypes.int8range:
    case PostgresTypes.money:
    case PostgresTypes.reltime:
    case PostgresTypes.text:
    case PostgresTypes.time:
    case PostgresTypes.timestamptz:
    case PostgresTypes.timetz:
    case PostgresTypes.tsrange:
    case PostgresTypes.tstzrange:
      return noop(value);
    default:
      return noop(value);
  }
};
var noop = (value) => {
  return value;
};
var toBoolean = (value) => {
  switch (value) {
    case "t":
      return true;
    case "f":
      return false;
    default:
      return value;
  }
};
var toNumber = (value) => {
  if (typeof value === "string") {
    const parsedValue = parseFloat(value);
    if (!Number.isNaN(parsedValue)) {
      return parsedValue;
    }
  }
  return value;
};
var toJson = (value) => {
  if (typeof value === "string") {
    try {
      return JSON.parse(value);
    } catch (error) {
      console.log(`JSON parse error: ${error}`);
      return value;
    }
  }
  return value;
};
var toArray = (value, type) => {
  if (typeof value !== "string") {
    return value;
  }
  const lastIdx = value.length - 1;
  const closeBrace = value[lastIdx];
  const openBrace = value[0];
  if (openBrace === "{" && closeBrace === "}") {
    let arr;
    const valTrim = value.slice(1, lastIdx);
    try {
      arr = JSON.parse("[" + valTrim + "]");
    } catch (_) {
      arr = valTrim ? valTrim.split(",") : [];
    }
    return arr.map((val) => convertCell(type, val));
  }
  return value;
};
var toTimestampString = (value) => {
  if (typeof value === "string") {
    return value.replace(" ", "T");
  }
  return value;
};
var httpEndpointURL = (socketUrl) => {
  let url = socketUrl;
  url = url.replace(/^ws/i, "http");
  url = url.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, "");
  return url.replace(/\/+$/, "");
};

// node_modules/@supabase/realtime-js/dist/module/lib/push.js
var Push = class {
  /**
   * Initializes the Push
   *
   * @param channel The Channel
   * @param event The event, for example `"phx_join"`
   * @param payload The payload, for example `{user_id: 123}`
   * @param timeout The push timeout in milliseconds
   */
  constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {
    this.channel = channel;
    this.event = event;
    this.payload = payload;
    this.timeout = timeout;
    this.sent = false;
    this.timeoutTimer = void 0;
    this.ref = "";
    this.receivedResp = null;
    this.recHooks = [];
    this.refEvent = null;
  }
  resend(timeout) {
    this.timeout = timeout;
    this._cancelRefEvent();
    this.ref = "";
    this.refEvent = null;
    this.receivedResp = null;
    this.sent = false;
    this.send();
  }
  send() {
    if (this._hasReceived("timeout")) {
      return;
    }
    this.startTimeout();
    this.sent = true;
    this.channel.socket.push({
      topic: this.channel.topic,
      event: this.event,
      payload: this.payload,
      ref: this.ref,
      join_ref: this.channel._joinRef()
    });
  }
  updatePayload(payload) {
    this.payload = Object.assign(Object.assign({}, this.payload), payload);
  }
  receive(status, callback) {
    var _a;
    if (this._hasReceived(status)) {
      callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);
    }
    this.recHooks.push({ status, callback });
    return this;
  }
  startTimeout() {
    if (this.timeoutTimer) {
      return;
    }
    this.ref = this.channel.socket._makeRef();
    this.refEvent = this.channel._replyEventName(this.ref);
    const callback = (payload) => {
      this._cancelRefEvent();
      this._cancelTimeout();
      this.receivedResp = payload;
      this._matchReceive(payload);
    };
    this.channel._on(this.refEvent, {}, callback);
    this.timeoutTimer = setTimeout(() => {
      this.trigger("timeout", {});
    }, this.timeout);
  }
  trigger(status, response) {
    if (this.refEvent)
      this.channel._trigger(this.refEvent, { status, response });
  }
  destroy() {
    this._cancelRefEvent();
    this._cancelTimeout();
  }
  _cancelRefEvent() {
    if (!this.refEvent) {
      return;
    }
    this.channel._off(this.refEvent, {});
  }
  _cancelTimeout() {
    clearTimeout(this.timeoutTimer);
    this.timeoutTimer = void 0;
  }
  _matchReceive({ status, response }) {
    this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
  }
  _hasReceived(status) {
    return this.receivedResp && this.receivedResp.status === status;
  }
};

// node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js
var REALTIME_PRESENCE_LISTEN_EVENTS;
(function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
  REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
  REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
  REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
var RealtimePresence = class {
  /**
   * Initializes the Presence.
   *
   * @param channel - The RealtimeChannel
   * @param opts - The options,
   *        for example `{events: {state: 'state', diff: 'diff'}}`
   */
  constructor(channel, opts) {
    this.channel = channel;
    this.state = {};
    this.pendingDiffs = [];
    this.joinRef = null;
    this.caller = {
      onJoin: () => {
      },
      onLeave: () => {
      },
      onSync: () => {
      }
    };
    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {
      state: "presence_state",
      diff: "presence_diff"
    };
    this.channel._on(events.state, {}, (newState) => {
      const { onJoin, onLeave, onSync } = this.caller;
      this.joinRef = this.channel._joinRef();
      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
      this.pendingDiffs.forEach((diff) => {
        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
      });
      this.pendingDiffs = [];
      onSync();
    });
    this.channel._on(events.diff, {}, (diff) => {
      const { onJoin, onLeave, onSync } = this.caller;
      if (this.inPendingSyncState()) {
        this.pendingDiffs.push(diff);
      } else {
        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
        onSync();
      }
    });
    this.onJoin((key, currentPresences, newPresences) => {
      this.channel._trigger("presence", {
        event: "join",
        key,
        currentPresences,
        newPresences
      });
    });
    this.onLeave((key, currentPresences, leftPresences) => {
      this.channel._trigger("presence", {
        event: "leave",
        key,
        currentPresences,
        leftPresences
      });
    });
    this.onSync(() => {
      this.channel._trigger("presence", { event: "sync" });
    });
  }
  /**
   * Used to sync the list of presences on the server with the
   * client's state.
   *
   * An optional `onJoin` and `onLeave` callback can be provided to
   * react to changes in the client's local presences across
   * disconnects and reconnects with the server.
   *
   * @internal
   */
  static syncState(currentState, newState, onJoin, onLeave) {
    const state = this.cloneDeep(currentState);
    const transformedState = this.transformState(newState);
    const joins = {};
    const leaves = {};
    this.map(state, (key, presences) => {
      if (!transformedState[key]) {
        leaves[key] = presences;
      }
    });
    this.map(transformedState, (key, newPresences) => {
      const currentPresences = state[key];
      if (currentPresences) {
        const newPresenceRefs = newPresences.map((m) => m.presence_ref);
        const curPresenceRefs = currentPresences.map((m) => m.presence_ref);
        const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);
        const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);
        if (joinedPresences.length > 0) {
          joins[key] = joinedPresences;
        }
        if (leftPresences.length > 0) {
          leaves[key] = leftPresences;
        }
      } else {
        joins[key] = newPresences;
      }
    });
    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);
  }
  /**
   * Used to sync a diff of presence join and leave events from the
   * server, as they happen.
   *
   * Like `syncState`, `syncDiff` accepts optional `onJoin` and
   * `onLeave` callbacks to react to a user joining or leaving from a
   * device.
   *
   * @internal
   */
  static syncDiff(state, diff, onJoin, onLeave) {
    const { joins, leaves } = {
      joins: this.transformState(diff.joins),
      leaves: this.transformState(diff.leaves)
    };
    if (!onJoin) {
      onJoin = () => {
      };
    }
    if (!onLeave) {
      onLeave = () => {
      };
    }
    this.map(joins, (key, newPresences) => {
      var _a;
      const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];
      state[key] = this.cloneDeep(newPresences);
      if (currentPresences.length > 0) {
        const joinedPresenceRefs = state[key].map((m) => m.presence_ref);
        const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);
        state[key].unshift(...curPresences);
      }
      onJoin(key, currentPresences, newPresences);
    });
    this.map(leaves, (key, leftPresences) => {
      let currentPresences = state[key];
      if (!currentPresences)
        return;
      const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);
      currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);
      state[key] = currentPresences;
      onLeave(key, currentPresences, leftPresences);
      if (currentPresences.length === 0)
        delete state[key];
    });
    return state;
  }
  /** @internal */
  static map(obj, func) {
    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));
  }
  /**
   * Remove 'metas' key
   * Change 'phx_ref' to 'presence_ref'
   * Remove 'phx_ref' and 'phx_ref_prev'
   *
   * @example
   * // returns {
   *  abc123: [
   *    { presence_ref: '2', user_id: 1 },
   *    { presence_ref: '3', user_id: 2 }
   *  ]
   * }
   * RealtimePresence.transformState({
   *  abc123: {
   *    metas: [
   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
   *      { phx_ref: '3', user_id: 2 }
   *    ]
   *  }
   * })
   *
   * @internal
   */
  static transformState(state) {
    state = this.cloneDeep(state);
    return Object.getOwnPropertyNames(state).reduce((newState, key) => {
      const presences = state[key];
      if ("metas" in presences) {
        newState[key] = presences.metas.map((presence) => {
          presence["presence_ref"] = presence["phx_ref"];
          delete presence["phx_ref"];
          delete presence["phx_ref_prev"];
          return presence;
        });
      } else {
        newState[key] = presences;
      }
      return newState;
    }, {});
  }
  /** @internal */
  static cloneDeep(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  /** @internal */
  onJoin(callback) {
    this.caller.onJoin = callback;
  }
  /** @internal */
  onLeave(callback) {
    this.caller.onLeave = callback;
  }
  /** @internal */
  onSync(callback) {
    this.caller.onSync = callback;
  }
  /** @internal */
  inPendingSyncState() {
    return !this.joinRef || this.joinRef !== this.channel._joinRef();
  }
};

// node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js
var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
(function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
var REALTIME_LISTEN_TYPES;
(function(REALTIME_LISTEN_TYPES2) {
  REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
  REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
  REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
  REALTIME_LISTEN_TYPES2["SYSTEM"] = "system";
})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
var REALTIME_SUBSCRIBE_STATES;
(function(REALTIME_SUBSCRIBE_STATES2) {
  REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
  REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
  REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
  REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
var RealtimeChannel = class {
  constructor(topic, params = { config: {} }, socket) {
    this.topic = topic;
    this.params = params;
    this.socket = socket;
    this.bindings = {};
    this.state = CHANNEL_STATES.closed;
    this.joinedOnce = false;
    this.pushBuffer = [];
    this.subTopic = topic.replace(/^realtime:/i, "");
    this.params.config = Object.assign({
      broadcast: { ack: false, self: false },
      presence: { key: "" },
      private: false
    }, params.config);
    this.timeout = this.socket.timeout;
    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
    this.joinPush.receive("ok", () => {
      this.state = CHANNEL_STATES.joined;
      this.rejoinTimer.reset();
      this.pushBuffer.forEach((pushEvent) => pushEvent.send());
      this.pushBuffer = [];
    });
    this._onClose(() => {
      this.rejoinTimer.reset();
      this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
      this.state = CHANNEL_STATES.closed;
      this.socket._remove(this);
    });
    this._onError((reason) => {
      if (this._isLeaving() || this._isClosed()) {
        return;
      }
      this.socket.log("channel", `error ${this.topic}`, reason);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this.joinPush.receive("timeout", () => {
      if (!this._isJoining()) {
        return;
      }
      this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
      this.state = CHANNEL_STATES.errored;
      this.rejoinTimer.scheduleTimeout();
    });
    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
      this._trigger(this._replyEventName(ref), payload);
    });
    this.presence = new RealtimePresence(this);
    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint) + "/api/broadcast";
    this.private = this.params.config.private || false;
  }
  /** Subscribe registers your client with the server */
  subscribe(callback, timeout = this.timeout) {
    var _a, _b;
    if (!this.socket.isConnected()) {
      this.socket.connect();
    }
    if (this.joinedOnce) {
      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;
    } else {
      const { config: { broadcast, presence, private: isPrivate } } = this.params;
      this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));
      this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));
      const accessTokenPayload = {};
      const config = {
        broadcast,
        presence,
        postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r2) => r2.filter)) !== null && _b !== void 0 ? _b : [],
        private: isPrivate
      };
      if (this.socket.accessTokenValue) {
        accessTokenPayload.access_token = this.socket.accessTokenValue;
      }
      this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));
      this.joinedOnce = true;
      this._rejoin(timeout);
      this.joinPush.receive("ok", async ({ postgres_changes }) => {
        var _a2;
        this.socket.setAuth();
        if (postgres_changes === void 0) {
          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
          return;
        } else {
          const clientPostgresBindings = this.bindings.postgres_changes;
          const bindingsLen = (_a2 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a2 !== void 0 ? _a2 : 0;
          const newPostgresBindings = [];
          for (let i = 0; i < bindingsLen; i++) {
            const clientPostgresBinding = clientPostgresBindings[i];
            const { filter: { event, schema, table, filter } } = clientPostgresBinding;
            const serverPostgresFilter = postgres_changes && postgres_changes[i];
            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {
              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
            } else {
              this.unsubscribe();
              callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error("mismatch between server and client bindings for postgres changes"));
              return;
            }
          }
          this.bindings.postgres_changes = newPostgresBindings;
          callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
          return;
        }
      }).receive("error", (error) => {
        callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(", ") || "error")));
        return;
      }).receive("timeout", () => {
        callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);
        return;
      });
    }
    return this;
  }
  presenceState() {
    return this.presence.state;
  }
  async track(payload, opts = {}) {
    return await this.send({
      type: "presence",
      event: "track",
      payload
    }, opts.timeout || this.timeout);
  }
  async untrack(opts = {}) {
    return await this.send({
      type: "presence",
      event: "untrack"
    }, opts);
  }
  on(type, filter, callback) {
    return this._on(type, filter, callback);
  }
  /**
   * Sends a message into the channel.
   *
   * @param args Arguments to send to channel
   * @param args.type The type of event to send
   * @param args.event The name of the event being sent
   * @param args.payload Payload to be sent
   * @param opts Options to be used during the send process
   */
  async send(args, opts = {}) {
    var _a, _b;
    if (!this._canPush() && args.type === "broadcast") {
      const { event, payload: endpoint_payload } = args;
      const authorization = this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : "";
      const options = {
        method: "POST",
        headers: {
          Authorization: authorization,
          apikey: this.socket.apiKey ? this.socket.apiKey : "",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          messages: [
            {
              topic: this.subTopic,
              event,
              payload: endpoint_payload,
              private: this.private
            }
          ]
        })
      };
      try {
        const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);
        await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());
        return response.ok ? "ok" : "error";
      } catch (error) {
        if (error.name === "AbortError") {
          return "timed out";
        } else {
          return "error";
        }
      }
    } else {
      return new Promise((resolve) => {
        var _a2, _b2, _c5;
        const push = this._push(args.type, args, opts.timeout || this.timeout);
        if (args.type === "broadcast" && !((_c5 = (_b2 = (_a2 = this.params) === null || _a2 === void 0 ? void 0 : _a2.config) === null || _b2 === void 0 ? void 0 : _b2.broadcast) === null || _c5 === void 0 ? void 0 : _c5.ack)) {
          resolve("ok");
        }
        push.receive("ok", () => resolve("ok"));
        push.receive("error", () => resolve("error"));
        push.receive("timeout", () => resolve("timed out"));
      });
    }
  }
  updateJoinPayload(payload) {
    this.joinPush.updatePayload(payload);
  }
  /**
   * Leaves the channel.
   *
   * Unsubscribes from server events, and instructs channel to terminate on server.
   * Triggers onClose() hooks.
   *
   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
   * channel.unsubscribe().receive("ok", () => alert("left!") )
   */
  unsubscribe(timeout = this.timeout) {
    this.state = CHANNEL_STATES.leaving;
    const onClose = () => {
      this.socket.log("channel", `leave ${this.topic}`);
      this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
    };
    this.rejoinTimer.reset();
    this.joinPush.destroy();
    return new Promise((resolve) => {
      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);
      leavePush.receive("ok", () => {
        onClose();
        resolve("ok");
      }).receive("timeout", () => {
        onClose();
        resolve("timed out");
      }).receive("error", () => {
        resolve("error");
      });
      leavePush.send();
      if (!this._canPush()) {
        leavePush.trigger("ok", {});
      }
    });
  }
  /** @internal */
  async _fetchWithTimeout(url, options, timeout) {
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);
    const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));
    clearTimeout(id);
    return response;
  }
  /** @internal */
  _push(event, payload, timeout = this.timeout) {
    if (!this.joinedOnce) {
      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
    }
    let pushEvent = new Push(this, event, payload, timeout);
    if (this._canPush()) {
      pushEvent.send();
    } else {
      pushEvent.startTimeout();
      this.pushBuffer.push(pushEvent);
    }
    return pushEvent;
  }
  /**
   * Overridable message hook
   *
   * Receives all events for specialized message handling before dispatching to the channel callbacks.
   * Must return the payload, modified or unmodified.
   *
   * @internal
   */
  _onMessage(_event, payload, _ref) {
    return payload;
  }
  /** @internal */
  _isMember(topic) {
    return this.topic === topic;
  }
  /** @internal */
  _joinRef() {
    return this.joinPush.ref;
  }
  /** @internal */
  _trigger(type, payload, ref) {
    var _a, _b;
    const typeLower = type.toLocaleLowerCase();
    const { close, error, leave, join } = CHANNEL_EVENTS;
    const events = [close, error, leave, join];
    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
      return;
    }
    let handledPayload = this._onMessage(typeLower, payload, ref);
    if (payload && !handledPayload) {
      throw "channel onMessage callbacks must return the payload, modified or unmodified";
    }
    if (["insert", "update", "delete"].includes(typeLower)) {
      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {
        var _a2, _b2, _c5;
        return ((_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event) === "*" || ((_c5 = (_b2 = bind.filter) === null || _b2 === void 0 ? void 0 : _b2.event) === null || _c5 === void 0 ? void 0 : _c5.toLocaleLowerCase()) === typeLower;
      }).map((bind) => bind.callback(handledPayload, ref));
    } else {
      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {
        var _a2, _b2, _c5, _d, _e, _f;
        if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
          if ("id" in bind) {
            const bindId = bind.id;
            const bindEvent = (_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event;
            return bindId && ((_b2 = payload.ids) === null || _b2 === void 0 ? void 0 : _b2.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c5 = payload.data) === null || _c5 === void 0 ? void 0 : _c5.type.toLocaleLowerCase()));
          } else {
            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();
            return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
          }
        } else {
          return bind.type.toLocaleLowerCase() === typeLower;
        }
      }).map((bind) => {
        if (typeof handledPayload === "object" && "ids" in handledPayload) {
          const postgresChanges = handledPayload.data;
          const { schema, table, commit_timestamp, type: type2, errors } = postgresChanges;
          const enrichedPayload = {
            schema,
            table,
            commit_timestamp,
            eventType: type2,
            new: {},
            old: {},
            errors
          };
          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
        }
        bind.callback(handledPayload, ref);
      });
    }
  }
  /** @internal */
  _isClosed() {
    return this.state === CHANNEL_STATES.closed;
  }
  /** @internal */
  _isJoined() {
    return this.state === CHANNEL_STATES.joined;
  }
  /** @internal */
  _isJoining() {
    return this.state === CHANNEL_STATES.joining;
  }
  /** @internal */
  _isLeaving() {
    return this.state === CHANNEL_STATES.leaving;
  }
  /** @internal */
  _replyEventName(ref) {
    return `chan_reply_${ref}`;
  }
  /** @internal */
  _on(type, filter, callback) {
    const typeLower = type.toLocaleLowerCase();
    const binding = {
      type: typeLower,
      filter,
      callback
    };
    if (this.bindings[typeLower]) {
      this.bindings[typeLower].push(binding);
    } else {
      this.bindings[typeLower] = [binding];
    }
    return this;
  }
  /** @internal */
  _off(type, filter) {
    const typeLower = type.toLocaleLowerCase();
    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
      var _a;
      return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));
    });
    return this;
  }
  /** @internal */
  static isEqual(obj1, obj2) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length) {
      return false;
    }
    for (const k in obj1) {
      if (obj1[k] !== obj2[k]) {
        return false;
      }
    }
    return true;
  }
  /** @internal */
  _rejoinUntilConnected() {
    this.rejoinTimer.scheduleTimeout();
    if (this.socket.isConnected()) {
      this._rejoin();
    }
  }
  /**
   * Registers a callback that will be executed when the channel closes.
   *
   * @internal
   */
  _onClose(callback) {
    this._on(CHANNEL_EVENTS.close, {}, callback);
  }
  /**
   * Registers a callback that will be executed when the channel encounteres an error.
   *
   * @internal
   */
  _onError(callback) {
    this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));
  }
  /**
   * Returns `true` if the socket is connected and the channel has been joined.
   *
   * @internal
   */
  _canPush() {
    return this.socket.isConnected() && this._isJoined();
  }
  /** @internal */
  _rejoin(timeout = this.timeout) {
    if (this._isLeaving()) {
      return;
    }
    this.socket._leaveOpenTopic(this.topic);
    this.state = CHANNEL_STATES.joining;
    this.joinPush.resend(timeout);
  }
  /** @internal */
  _getPayloadRecords(payload) {
    const records = {
      new: {},
      old: {}
    };
    if (payload.type === "INSERT" || payload.type === "UPDATE") {
      records.new = convertChangeData(payload.columns, payload.record);
    }
    if (payload.type === "UPDATE" || payload.type === "DELETE") {
      records.old = convertChangeData(payload.columns, payload.old_record);
    }
    return records;
  }
};

// node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js
var noop2 = () => {
};
var NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== "undefined";
var WORKER_SCRIPT = `
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
var RealtimeClient = class {
  /**
   * Initializes the Socket.
   *
   * @param endPoint The string WebSocket endpoint, ie, "ws://example.com/socket", "wss://example.com", "/socket" (inherited host & protocol)
   * @param httpEndpoint The string HTTP endpoint, ie, "https://example.com", "/" (inherited host & protocol)
   * @param options.transport The Websocket Transport, for example WebSocket.
   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.
   * @param options.params The optional params to pass when connecting.
   * @param options.headers The optional headers to pass when connecting.
   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.
   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))
   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.
   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.
   * @param options.worker Use Web Worker to set a side flow. Defaults to false.
   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.
   */
  constructor(endPoint, options) {
    var _a;
    this.accessTokenValue = null;
    this.apiKey = null;
    this.channels = [];
    this.endPoint = "";
    this.httpEndpoint = "";
    this.headers = DEFAULT_HEADERS;
    this.params = {};
    this.timeout = DEFAULT_TIMEOUT;
    this.heartbeatIntervalMs = 3e4;
    this.heartbeatTimer = void 0;
    this.pendingHeartbeatRef = null;
    this.ref = 0;
    this.logger = noop2;
    this.conn = null;
    this.sendBuffer = [];
    this.serializer = new Serializer();
    this.stateChangeCallbacks = {
      open: [],
      close: [],
      error: [],
      message: []
    };
    this.accessToken = null;
    this._resolveFetch = (customFetch) => {
      let _fetch;
      if (customFetch) {
        _fetch = customFetch;
      } else if (typeof fetch === "undefined") {
        _fetch = (...args) => import("/build/_shared/browser-SXFQTG6F.js").then(({ default: fetch2 }) => fetch2(...args));
      } else {
        _fetch = fetch;
      }
      return (...args) => _fetch(...args);
    };
    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
    this.httpEndpoint = httpEndpointURL(endPoint);
    if (options === null || options === void 0 ? void 0 : options.transport) {
      this.transport = options.transport;
    } else {
      this.transport = null;
    }
    if (options === null || options === void 0 ? void 0 : options.params)
      this.params = options.params;
    if (options === null || options === void 0 ? void 0 : options.headers)
      this.headers = Object.assign(Object.assign({}, this.headers), options.headers);
    if (options === null || options === void 0 ? void 0 : options.timeout)
      this.timeout = options.timeout;
    if (options === null || options === void 0 ? void 0 : options.logger)
      this.logger = options.logger;
    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)
      this.heartbeatIntervalMs = options.heartbeatIntervalMs;
    const accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;
    if (accessTokenValue) {
      this.accessTokenValue = accessTokenValue;
      this.apiKey = accessTokenValue;
    }
    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : (tries) => {
      return [1e3, 2e3, 5e3, 1e4][tries - 1] || 1e4;
    };
    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {
      return callback(JSON.stringify(payload));
    };
    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);
    this.reconnectTimer = new Timer(async () => {
      this.disconnect();
      this.connect();
    }, this.reconnectAfterMs);
    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);
    if (options === null || options === void 0 ? void 0 : options.worker) {
      if (typeof window !== "undefined" && !window.Worker) {
        throw new Error("Web Worker is not supported");
      }
      this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;
      this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;
    }
    this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;
  }
  /**
   * Connects the socket, unless already connected.
   */
  connect() {
    if (this.conn) {
      return;
    }
    if (this.transport) {
      this.conn = new this.transport(this.endpointURL(), void 0, {
        headers: this.headers
      });
      return;
    }
    if (NATIVE_WEBSOCKET_AVAILABLE) {
      this.conn = new WebSocket(this.endpointURL());
      this.setupConnection();
      return;
    }
    this.conn = new WSWebSocketDummy(this.endpointURL(), void 0, {
      close: () => {
        this.conn = null;
      }
    });
    import("/build/_shared/browser-43RDCSG3.js").then(({ default: WS }) => {
      this.conn = new WS(this.endpointURL(), void 0, {
        headers: this.headers
      });
      this.setupConnection();
    });
  }
  /**
   * Returns the URL of the websocket.
   * @returns string The URL of the websocket.
   */
  endpointURL() {
    return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
  }
  /**
   * Disconnects the socket.
   *
   * @param code A numeric status code to send on disconnect.
   * @param reason A custom reason for the disconnect.
   */
  disconnect(code, reason) {
    if (this.conn) {
      this.conn.onclose = function() {
      };
      if (code) {
        this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
      } else {
        this.conn.close();
      }
      this.conn = null;
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.reconnectTimer.reset();
    }
  }
  /**
   * Returns all created channels
   */
  getChannels() {
    return this.channels;
  }
  /**
   * Unsubscribes and removes a single channel
   * @param channel A RealtimeChannel instance
   */
  async removeChannel(channel) {
    const status = await channel.unsubscribe();
    if (this.channels.length === 0) {
      this.disconnect();
    }
    return status;
  }
  /**
   * Unsubscribes and removes all channels
   */
  async removeAllChannels() {
    const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));
    this.disconnect();
    return values_1;
  }
  /**
   * Logs the message.
   *
   * For customized logging, `this.logger` can be overridden.
   */
  log(kind, msg, data) {
    this.logger(kind, msg, data);
  }
  /**
   * Returns the current state of the socket.
   */
  connectionState() {
    switch (this.conn && this.conn.readyState) {
      case SOCKET_STATES.connecting:
        return CONNECTION_STATE.Connecting;
      case SOCKET_STATES.open:
        return CONNECTION_STATE.Open;
      case SOCKET_STATES.closing:
        return CONNECTION_STATE.Closing;
      default:
        return CONNECTION_STATE.Closed;
    }
  }
  /**
   * Returns `true` is the connection is open.
   */
  isConnected() {
    return this.connectionState() === CONNECTION_STATE.Open;
  }
  channel(topic, params = { config: {} }) {
    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
    this.channels.push(chan);
    return chan;
  }
  /**
   * Push out a message if the socket is connected.
   *
   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.
   */
  push(data) {
    const { topic, event, payload, ref } = data;
    const callback = () => {
      this.encode(data, (result) => {
        var _a;
        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);
      });
    };
    this.log("push", `${topic} ${event} (${ref})`, payload);
    if (this.isConnected()) {
      callback();
    } else {
      this.sendBuffer.push(callback);
    }
  }
  /**
   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.
   *
   * If param is null it will use the `accessToken` callback function or the token set on the client.
   *
   * On callback used, it will set the value of the token internal to the client.
   *
   * @param token A JWT string to override the token set on the client.
   */
  async setAuth(token = null) {
    let tokenToSend = token || this.accessToken && await this.accessToken() || this.accessTokenValue;
    if (tokenToSend) {
      let parsed = null;
      try {
        parsed = JSON.parse(atob(tokenToSend.split(".")[1]));
      } catch (_error) {
      }
      if (parsed && parsed.exp) {
        let now = Math.floor(Date.now() / 1e3);
        let valid = now - parsed.exp < 0;
        if (!valid) {
          this.log("auth", `InvalidJWTToken: Invalid value for JWT claim "exp" with value ${parsed.exp}`);
          return Promise.reject(`InvalidJWTToken: Invalid value for JWT claim "exp" with value ${parsed.exp}`);
        }
      }
      this.accessTokenValue = tokenToSend;
      this.channels.forEach((channel) => {
        tokenToSend && channel.updateJoinPayload({ access_token: tokenToSend });
        if (channel.joinedOnce && channel._isJoined()) {
          channel._push(CHANNEL_EVENTS.access_token, {
            access_token: tokenToSend
          });
        }
      });
    }
  }
  /**
   * Sends a heartbeat message if the socket is connected.
   */
  async sendHeartbeat() {
    var _a;
    if (!this.isConnected()) {
      return;
    }
    if (this.pendingHeartbeatRef) {
      this.pendingHeartbeatRef = null;
      this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, "hearbeat timeout");
      return;
    }
    this.pendingHeartbeatRef = this._makeRef();
    this.push({
      topic: "phoenix",
      event: "heartbeat",
      payload: {},
      ref: this.pendingHeartbeatRef
    });
    this.setAuth();
  }
  /**
   * Flushes send buffer
   */
  flushSendBuffer() {
    if (this.isConnected() && this.sendBuffer.length > 0) {
      this.sendBuffer.forEach((callback) => callback());
      this.sendBuffer = [];
    }
  }
  /**
   * Return the next message ref, accounting for overflows
   *
   * @internal
   */
  _makeRef() {
    let newRef = this.ref + 1;
    if (newRef === this.ref) {
      this.ref = 0;
    } else {
      this.ref = newRef;
    }
    return this.ref.toString();
  }
  /**
   * Unsubscribe from channels with the specified topic.
   *
   * @internal
   */
  _leaveOpenTopic(topic) {
    let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));
    if (dupChannel) {
      this.log("transport", `leaving duplicate topic "${topic}"`);
      dupChannel.unsubscribe();
    }
  }
  /**
   * Removes a subscription from the socket.
   *
   * @param channel An open subscription.
   *
   * @internal
   */
  _remove(channel) {
    this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());
  }
  /**
   * Sets up connection handlers.
   *
   * @internal
   */
  setupConnection() {
    if (this.conn) {
      this.conn.binaryType = "arraybuffer";
      this.conn.onopen = () => this._onConnOpen();
      this.conn.onerror = (error) => this._onConnError(error);
      this.conn.onmessage = (event) => this._onConnMessage(event);
      this.conn.onclose = (event) => this._onConnClose(event);
    }
  }
  /** @internal */
  _onConnMessage(rawMessage) {
    this.decode(rawMessage.data, (msg) => {
      let { topic, event, payload, ref } = msg;
      if (ref && ref === this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
      }
      this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
      this.channels.filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
      this.stateChangeCallbacks.message.forEach((callback) => callback(msg));
    });
  }
  /** @internal */
  async _onConnOpen() {
    this.log("transport", `connected to ${this.endpointURL()}`);
    this.flushSendBuffer();
    this.reconnectTimer.reset();
    if (!this.worker) {
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    } else {
      if (this.workerUrl) {
        this.log("worker", `starting worker for from ${this.workerUrl}`);
      } else {
        this.log("worker", `starting default worker`);
      }
      const objectUrl = this._workerObjectUrl(this.workerUrl);
      this.workerRef = new Worker(objectUrl);
      this.workerRef.onerror = (error) => {
        this.log("worker", "worker error", error.message);
        this.workerRef.terminate();
      };
      this.workerRef.onmessage = (event) => {
        if (event.data.event === "keepAlive") {
          this.sendHeartbeat();
        }
      };
      this.workerRef.postMessage({
        event: "start",
        interval: this.heartbeatIntervalMs
      });
    }
    this.stateChangeCallbacks.open.forEach((callback) => callback());
  }
  /** @internal */
  _onConnClose(event) {
    this.log("transport", "close", event);
    this._triggerChanError();
    this.heartbeatTimer && clearInterval(this.heartbeatTimer);
    this.reconnectTimer.scheduleTimeout();
    this.stateChangeCallbacks.close.forEach((callback) => callback(event));
  }
  /** @internal */
  _onConnError(error) {
    this.log("transport", error.message);
    this._triggerChanError();
    this.stateChangeCallbacks.error.forEach((callback) => callback(error));
  }
  /** @internal */
  _triggerChanError() {
    this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
  }
  /** @internal */
  _appendParams(url, params) {
    if (Object.keys(params).length === 0) {
      return url;
    }
    const prefix = url.match(/\?/) ? "&" : "?";
    const query = new URLSearchParams(params);
    return `${url}${prefix}${query}`;
  }
  _workerObjectUrl(url) {
    let result_url;
    if (url) {
      result_url = url;
    } else {
      const blob = new Blob([WORKER_SCRIPT], { type: "application/javascript" });
      result_url = URL.createObjectURL(blob);
    }
    return result_url;
  }
};
var WSWebSocketDummy = class {
  constructor(address, _protocols, options) {
    this.binaryType = "arraybuffer";
    this.onclose = () => {
    };
    this.onerror = () => {
    };
    this.onmessage = () => {
    };
    this.onopen = () => {
    };
    this.readyState = SOCKET_STATES.connecting;
    this.send = () => {
    };
    this.url = null;
    this.url = address;
    this.close = options.close;
  }
};

// node_modules/@supabase/storage-js/dist/module/lib/errors.js
var StorageError = class extends Error {
  constructor(message) {
    super(message);
    this.__isStorageError = true;
    this.name = "StorageError";
  }
};
function isStorageError(error) {
  return typeof error === "object" && error !== null && "__isStorageError" in error;
}
var StorageApiError = class extends StorageError {
  constructor(message, status) {
    super(message);
    this.name = "StorageApiError";
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
};
var StorageUnknownError = class extends StorageError {
  constructor(message, originalError) {
    super(message);
    this.name = "StorageUnknownError";
    this.originalError = originalError;
  }
};

// node_modules/@supabase/storage-js/dist/module/lib/helpers.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var resolveFetch2 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => import("/build/_shared/browser-SXFQTG6F.js").then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var resolveResponse = () => __awaiter2(void 0, void 0, void 0, function* () {
  if (typeof Response === "undefined") {
    return (yield import("/build/_shared/browser-SXFQTG6F.js")).Response;
  }
  return Response;
});
var recursiveToCamel = (item) => {
  if (Array.isArray(item)) {
    return item.map((el) => recursiveToCamel(el));
  } else if (typeof item === "function" || item !== Object(item)) {
    return item;
  }
  const result = {};
  Object.entries(item).forEach(([key, value]) => {
    const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ""));
    result[newKey] = recursiveToCamel(value);
  });
  return result;
};

// node_modules/@supabase/storage-js/dist/module/lib/fetch.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
var handleError = (error, reject, options) => __awaiter3(void 0, void 0, void 0, function* () {
  const Res = yield resolveResponse();
  if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {
    error.json().then((err) => {
      reject(new StorageApiError(_getErrorMessage(err), error.status || 500));
    }).catch((err) => {
      reject(new StorageUnknownError(_getErrorMessage(err), err));
    });
  } else {
    reject(new StorageUnknownError(_getErrorMessage(error), error));
  }
});
var _getRequestParams = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers);
  if (body) {
    params.body = JSON.stringify(body);
  }
  return Object.assign(Object.assign({}, params), parameters);
};
function _handleRequest(fetcher, method, url, options, parameters, body) {
  return __awaiter3(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      fetcher(url, _getRequestParams(method, options, parameters, body)).then((result) => {
        if (!result.ok)
          throw result;
        if (options === null || options === void 0 ? void 0 : options.noResolveJson)
          return result;
        return result.json();
      }).then((data) => resolve(data)).catch((error) => handleError(error, reject, options));
    });
  });
}
function get(fetcher, url, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "GET", url, options, parameters);
  });
}
function post(fetcher, url, body, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "POST", url, options, parameters, body);
  });
}
function put(fetcher, url, body, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "PUT", url, options, parameters, body);
  });
}
function head(fetcher, url, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "HEAD", url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);
  });
}
function remove(fetcher, url, body, options, parameters) {
  return __awaiter3(this, void 0, void 0, function* () {
    return _handleRequest(fetcher, "DELETE", url, options, parameters, body);
  });
}

// node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var DEFAULT_SEARCH_OPTIONS = {
  limit: 100,
  offset: 0,
  sortBy: {
    column: "name",
    order: "asc"
  }
};
var DEFAULT_FILE_OPTIONS = {
  cacheControl: "3600",
  contentType: "text/plain;charset=UTF-8",
  upsert: false
};
var StorageFileApi = class {
  constructor(url, headers = {}, bucketId, fetch2) {
    this.url = url;
    this.headers = headers;
    this.bucketId = bucketId;
    this.fetch = resolveFetch2(fetch2);
  }
  /**
   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.
   *
   * @param method HTTP method.
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadOrUpdate(method, path, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        let body;
        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
        let headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options.upsert) });
        const metadata = options.metadata;
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          if (metadata) {
            body.append("metadata", this.encodeMetadata(metadata));
          }
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
          if (metadata) {
            body.append("metadata", this.encodeMetadata(metadata));
          }
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
          if (metadata) {
            headers["x-metadata"] = this.toBase64(this.encodeMetadata(metadata));
          }
        }
        if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {
          headers = Object.assign(Object.assign({}, headers), fileOptions.headers);
        }
        const cleanPath = this._removeEmptyFolders(path);
        const _path = this._getFinalPath(cleanPath);
        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body, headers }, (options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {}));
        const data = yield res.json();
        if (res.ok) {
          return {
            data: { path: cleanPath, id: data.Id, fullPath: data.Key },
            error: null
          };
        } else {
          const error = data;
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Uploads a file to an existing bucket.
   *
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  upload(path, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("POST", path, fileBody, fileOptions);
    });
  }
  /**
   * Upload a file with a token generated from `createSignedUploadUrl`.
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param token The token generated from `createSignedUploadUrl`
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadToSignedUrl(path, token, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      const cleanPath = this._removeEmptyFolders(path);
      const _path = this._getFinalPath(cleanPath);
      const url = new URL(this.url + `/object/upload/sign/${_path}`);
      url.searchParams.set("token", token);
      try {
        let body;
        const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);
        const headers = Object.assign(Object.assign({}, this.headers), { "x-upsert": String(options.upsert) });
        if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
          body = new FormData();
          body.append("cacheControl", options.cacheControl);
          body.append("", fileBody);
        } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
          body = fileBody;
          body.append("cacheControl", options.cacheControl);
        } else {
          body = fileBody;
          headers["cache-control"] = `max-age=${options.cacheControl}`;
          headers["content-type"] = options.contentType;
        }
        const res = yield this.fetch(url.toString(), {
          method: "PUT",
          body,
          headers
        });
        const data = yield res.json();
        if (res.ok) {
          return {
            data: { path: cleanPath, fullPath: data.Key },
            error: null
          };
        } else {
          const error = data;
          return { data: null, error };
        }
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a signed upload URL.
   * Signed upload URLs can be used to upload files to the bucket without further authentication.
   * They are valid for 2 hours.
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.
   */
  createSignedUploadUrl(path, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        const headers = Object.assign({}, this.headers);
        if (options === null || options === void 0 ? void 0 : options.upsert) {
          headers["x-upsert"] = "true";
        }
        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });
        const url = new URL(this.url + data.url);
        const token = url.searchParams.get("token");
        if (!token) {
          throw new StorageError("No token returned by API");
        }
        return { data: { signedUrl: url.toString(), path, token }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Replaces an existing file at the specified path with a new one.
   *
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  update(path, fileBody, fileOptions) {
    return __awaiter4(this, void 0, void 0, function* () {
      return this.uploadOrUpdate("PUT", path, fileBody, fileOptions);
    });
  }
  /**
   * Moves an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.
   * @param options The destination options.
   */
  move(fromPath, toPath, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/move`, {
          bucketId: this.bucketId,
          sourceKey: fromPath,
          destinationKey: toPath,
          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Copies an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.
   * @param options The destination options.
   */
  copy(fromPath, toPath, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/copy`, {
          bucketId: this.bucketId,
          sourceKey: fromPath,
          destinationKey: toPath,
          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
        }, { headers: this.headers });
        return { data: { path: data.Key }, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  createSignedUrl(path, expiresIn, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        let _path = this._getFinalPath(path);
        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {}), { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);
        data = { signedUrl };
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.
   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   */
  createSignedUrls(paths, expiresIn, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
        return {
          data: data.map((datum) => Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null })),
          error: null
        };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.
   *
   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.
   * @param options.transform Transform the asset before serving it to the client.
   */
  download(path, options) {
    return __awaiter4(this, void 0, void 0, function* () {
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      const queryString = transformationQuery ? `?${transformationQuery}` : "";
      try {
        const _path = this._getFinalPath(path);
        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
          headers: this.headers,
          noResolveJson: true
        });
        const data = yield res.blob();
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Retrieves the details of an existing file.
   * @param path
   */
  info(path) {
    return __awaiter4(this, void 0, void 0, function* () {
      const _path = this._getFinalPath(path);
      try {
        const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {
          headers: this.headers
        });
        return { data: recursiveToCamel(data), error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Checks the existence of a file.
   * @param path
   */
  exists(path) {
    return __awaiter4(this, void 0, void 0, function* () {
      const _path = this._getFinalPath(path);
      try {
        yield head(this.fetch, `${this.url}/object/${_path}`, {
          headers: this.headers
        });
        return { data: true, error: null };
      } catch (error) {
        if (isStorageError(error) && error instanceof StorageUnknownError) {
          const originalError = error.originalError;
          if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {
            return { data: false, error };
          }
        }
        throw error;
      }
    });
  }
  /**
   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.
   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.
   *
   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.
   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  getPublicUrl(path, options) {
    const _path = this._getFinalPath(path);
    const _queryString = [];
    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? "" : options.download}` : "";
    if (downloadQueryParam !== "") {
      _queryString.push(downloadQueryParam);
    }
    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
    const renderPath = wantsTransformation ? "render/image" : "object";
    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
    if (transformationQuery !== "") {
      _queryString.push(transformationQuery);
    }
    let queryString = _queryString.join("&");
    if (queryString !== "") {
      queryString = `?${queryString}`;
    }
    return {
      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
    };
  }
  /**
   * Deletes files within the same bucket
   *
   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].
   */
  remove(paths) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Get file metadata
   * @param id the file id to retrieve metadata
   */
  // async getMetadata(
  //   id: string
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Update file metadata
   * @param id the file id to update metadata
   * @param meta the new file metadata
   */
  // async updateMetadata(
  //   id: string,
  //   meta: Metadata
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await post(
  //       this.fetch,
  //       `${this.url}/metadata/${id}`,
  //       { ...meta },
  //       { headers: this.headers }
  //     )
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Lists all the files within a bucket.
   * @param path The folder path.
   */
  list(path, options, parameters) {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || "" });
        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  encodeMetadata(metadata) {
    return JSON.stringify(metadata);
  }
  toBase64(data) {
    if (typeof Buffer !== "undefined") {
      return Buffer.from(data).toString("base64");
    }
    return btoa(data);
  }
  _getFinalPath(path) {
    return `${this.bucketId}/${path}`;
  }
  _removeEmptyFolders(path) {
    return path.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
  }
  transformOptsToQueryString(transform) {
    const params = [];
    if (transform.width) {
      params.push(`width=${transform.width}`);
    }
    if (transform.height) {
      params.push(`height=${transform.height}`);
    }
    if (transform.resize) {
      params.push(`resize=${transform.resize}`);
    }
    if (transform.format) {
      params.push(`format=${transform.format}`);
    }
    if (transform.quality) {
      params.push(`quality=${transform.quality}`);
    }
    return params.join("&");
  }
};

// node_modules/@supabase/storage-js/dist/module/lib/version.js
var version2 = "2.7.1";

// node_modules/@supabase/storage-js/dist/module/lib/constants.js
var DEFAULT_HEADERS2 = { "X-Client-Info": `storage-js/${version2}` };

// node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var StorageBucketApi = class {
  constructor(url, headers = {}, fetch2) {
    this.url = url;
    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS2), headers);
    this.fetch = resolveFetch2(fetch2);
  }
  /**
   * Retrieves the details of all Storage buckets within an existing project.
   */
  listBuckets() {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Retrieves the details of an existing Storage bucket.
   *
   * @param id The unique identifier of the bucket you would like to retrieve.
   */
  getBucket(id) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Creates a new Storage bucket
   *
   * @param id A unique identifier for the bucket you are creating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   * @returns newly created bucket id
   */
  createBucket(id, options = {
    public: false
  }) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/bucket`, {
          id,
          name: id,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Updates a Storage bucket
   *
   * @param id A unique identifier for the bucket you are updating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   */
  updateBucket(id, options) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {
          id,
          name: id,
          public: options.public,
          file_size_limit: options.fileSizeLimit,
          allowed_mime_types: options.allowedMimeTypes
        }, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Removes all objects inside a single bucket.
   *
   * @param id The unique identifier of the bucket you would like to empty.
   */
  emptyBucket(id) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.
   * You must first `empty()` the bucket.
   *
   * @param id The unique identifier of the bucket you would like to delete.
   */
  deleteBucket(id) {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });
        return { data, error: null };
      } catch (error) {
        if (isStorageError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
};

// node_modules/@supabase/storage-js/dist/module/StorageClient.js
var StorageClient = class extends StorageBucketApi {
  constructor(url, headers = {}, fetch2) {
    super(url, headers, fetch2);
  }
  /**
   * Perform file operation in a bucket.
   *
   * @param id The bucket id to operate on.
   */
  from(id) {
    return new StorageFileApi(this.url, this.headers, id, this.fetch);
  }
};

// node_modules/@supabase/supabase-js/dist/module/lib/version.js
var version3 = "2.47.5";

// node_modules/@supabase/supabase-js/dist/module/lib/constants.js
var JS_ENV = "";
if (typeof Deno !== "undefined") {
  JS_ENV = "deno";
} else if (typeof document !== "undefined") {
  JS_ENV = "web";
} else if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
  JS_ENV = "react-native";
} else {
  JS_ENV = "node";
}
var DEFAULT_HEADERS3 = { "X-Client-Info": `supabase-js-${JS_ENV}/${version3}` };
var DEFAULT_GLOBAL_OPTIONS = {
  headers: DEFAULT_HEADERS3
};
var DEFAULT_DB_OPTIONS = {
  schema: "public"
};
var DEFAULT_AUTH_OPTIONS = {
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  flowType: "implicit"
};
var DEFAULT_REALTIME_OPTIONS = {};

// node_modules/@supabase/supabase-js/dist/module/lib/fetch.js
init_browser();
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var resolveFetch3 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = browser_default;
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var resolveHeadersConstructor = () => {
  if (typeof Headers === "undefined") {
    return Headers2;
  }
  return Headers;
};
var fetchWithAuth = (supabaseKey2, getAccessToken, customFetch) => {
  const fetch2 = resolveFetch3(customFetch);
  const HeadersConstructor = resolveHeadersConstructor();
  return (input, init) => __awaiter6(void 0, void 0, void 0, function* () {
    var _a;
    const accessToken = (_a = yield getAccessToken()) !== null && _a !== void 0 ? _a : supabaseKey2;
    let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
    if (!headers.has("apikey")) {
      headers.set("apikey", supabaseKey2);
    }
    if (!headers.has("Authorization")) {
      headers.set("Authorization", `Bearer ${accessToken}`);
    }
    return fetch2(input, Object.assign(Object.assign({}, init), { headers }));
  });
};

// node_modules/@supabase/supabase-js/dist/module/lib/helpers.js
var __awaiter7 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function stripTrailingSlash(url) {
  return url.replace(/\/$/, "");
}
function applySettingDefaults(options, defaults) {
  const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options;
  const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults;
  const result = {
    db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
    auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
    realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
    global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions),
    accessToken: () => __awaiter7(this, void 0, void 0, function* () {
      return "";
    })
  };
  if (options.accessToken) {
    result.accessToken = options.accessToken;
  } else {
    delete result.accessToken;
  }
  return result;
}

// node_modules/@supabase/auth-js/dist/module/lib/version.js
var version4 = "2.66.1";

// node_modules/@supabase/auth-js/dist/module/lib/constants.js
var GOTRUE_URL = "http://localhost:9999";
var STORAGE_KEY = "supabase.auth.token";
var DEFAULT_HEADERS4 = { "X-Client-Info": `gotrue-js/${version4}` };
var EXPIRY_MARGIN = 10;
var API_VERSION_HEADER_NAME = "X-Supabase-Api-Version";
var API_VERSIONS = {
  "2024-01-01": {
    timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
    name: "2024-01-01"
  }
};

// node_modules/@supabase/auth-js/dist/module/lib/helpers.js
function expiresAt(expiresIn) {
  const timeNow = Math.round(Date.now() / 1e3);
  return timeNow + expiresIn;
}
function uuid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r2 = Math.random() * 16 | 0, v = c == "x" ? r2 : r2 & 3 | 8;
    return v.toString(16);
  });
}
var isBrowser = () => typeof document !== "undefined";
var localStorageWriteTests = {
  tested: false,
  writable: false
};
var supportsLocalStorage = () => {
  if (!isBrowser()) {
    return false;
  }
  try {
    if (typeof globalThis.localStorage !== "object") {
      return false;
    }
  } catch (e) {
    return false;
  }
  if (localStorageWriteTests.tested) {
    return localStorageWriteTests.writable;
  }
  const randomKey = `lswt-${Math.random()}${Math.random()}`;
  try {
    globalThis.localStorage.setItem(randomKey, randomKey);
    globalThis.localStorage.removeItem(randomKey);
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = true;
  } catch (e) {
    localStorageWriteTests.tested = true;
    localStorageWriteTests.writable = false;
  }
  return localStorageWriteTests.writable;
};
function parseParametersFromURL(href) {
  const result = {};
  const url = new URL(href);
  if (url.hash && url.hash[0] === "#") {
    try {
      const hashSearchParams = new URLSearchParams(url.hash.substring(1));
      hashSearchParams.forEach((value, key) => {
        result[key] = value;
      });
    } catch (e) {
    }
  }
  url.searchParams.forEach((value, key) => {
    result[key] = value;
  });
  return result;
}
var resolveFetch4 = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = (...args) => import("/build/_shared/browser-SXFQTG6F.js").then(({ default: fetch2 }) => fetch2(...args));
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var looksLikeFetchResponse = (maybeResponse) => {
  return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
};
var setItemAsync = async (storage, key, data) => {
  await storage.setItem(key, JSON.stringify(data));
};
var getItemAsync = async (storage, key) => {
  const value = await storage.getItem(key);
  if (!value) {
    return null;
  }
  try {
    return JSON.parse(value);
  } catch (_a) {
    return value;
  }
};
var removeItemAsync = async (storage, key) => {
  await storage.removeItem(key);
};
function decodeBase64URL(value) {
  const key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  let base64 = "";
  let chr1, chr2, chr3;
  let enc1, enc2, enc3, enc4;
  let i = 0;
  value = value.replace("-", "+").replace("_", "/");
  while (i < value.length) {
    enc1 = key.indexOf(value.charAt(i++));
    enc2 = key.indexOf(value.charAt(i++));
    enc3 = key.indexOf(value.charAt(i++));
    enc4 = key.indexOf(value.charAt(i++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    base64 = base64 + String.fromCharCode(chr1);
    if (enc3 != 64 && chr2 != 0) {
      base64 = base64 + String.fromCharCode(chr2);
    }
    if (enc4 != 64 && chr3 != 0) {
      base64 = base64 + String.fromCharCode(chr3);
    }
  }
  return base64;
}
var Deferred = class {
  constructor() {
    ;
    this.promise = new Deferred.promiseConstructor((res, rej) => {
      ;
      this.resolve = res;
      this.reject = rej;
    });
  }
};
Deferred.promiseConstructor = Promise;
function decodeJWTPayload(token) {
  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i;
  const parts = token.split(".");
  if (parts.length !== 3) {
    throw new Error("JWT is not valid: not a JWT structure");
  }
  if (!base64UrlRegex.test(parts[1])) {
    throw new Error("JWT is not valid: payload is not in base64url format");
  }
  const base64Url = parts[1];
  return JSON.parse(decodeBase64URL(base64Url));
}
async function sleep(time) {
  return await new Promise((accept) => {
    setTimeout(() => accept(null), time);
  });
}
function retryable(fn, isRetryable) {
  const promise = new Promise((accept, reject) => {
    ;
    (async () => {
      for (let attempt = 0; attempt < Infinity; attempt++) {
        try {
          const result = await fn(attempt);
          if (!isRetryable(attempt, null, result)) {
            accept(result);
            return;
          }
        } catch (e) {
          if (!isRetryable(attempt, e)) {
            reject(e);
            return;
          }
        }
      }
    })();
  });
  return promise;
}
function dec2hex(dec) {
  return ("0" + dec.toString(16)).substr(-2);
}
function generatePKCEVerifier() {
  const verifierLength = 56;
  const array = new Uint32Array(verifierLength);
  if (typeof crypto === "undefined") {
    const charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
    const charSetLen = charSet.length;
    let verifier = "";
    for (let i = 0; i < verifierLength; i++) {
      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));
    }
    return verifier;
  }
  crypto.getRandomValues(array);
  return Array.from(array, dec2hex).join("");
}
async function sha256(randomString) {
  const encoder = new TextEncoder();
  const encodedData = encoder.encode(randomString);
  const hash = await crypto.subtle.digest("SHA-256", encodedData);
  const bytes = new Uint8Array(hash);
  return Array.from(bytes).map((c) => String.fromCharCode(c)).join("");
}
function base64urlencode(str) {
  return btoa(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
async function generatePKCEChallenge(verifier) {
  const hasCryptoSupport = typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined" && typeof TextEncoder !== "undefined";
  if (!hasCryptoSupport) {
    console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.");
    return verifier;
  }
  const hashed = await sha256(verifier);
  return base64urlencode(hashed);
}
async function getCodeChallengeAndMethod(storage, storageKey, isPasswordRecovery = false) {
  const codeVerifier = generatePKCEVerifier();
  let storedCodeVerifier = codeVerifier;
  if (isPasswordRecovery) {
    storedCodeVerifier += "/PASSWORD_RECOVERY";
  }
  await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier);
  const codeChallenge = await generatePKCEChallenge(codeVerifier);
  const codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
  return [codeChallenge, codeChallengeMethod];
}
var API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;
function parseResponseAPIVersion(response) {
  const apiVersion = response.headers.get(API_VERSION_HEADER_NAME);
  if (!apiVersion) {
    return null;
  }
  if (!apiVersion.match(API_VERSION_REGEX)) {
    return null;
  }
  try {
    const date = /* @__PURE__ */ new Date(`${apiVersion}T00:00:00.0Z`);
    return date;
  } catch (e) {
    return null;
  }
}

// node_modules/@supabase/auth-js/dist/module/lib/errors.js
var AuthError = class extends Error {
  constructor(message, status, code) {
    super(message);
    this.__isAuthError = true;
    this.name = "AuthError";
    this.status = status;
    this.code = code;
  }
};
function isAuthError(error) {
  return typeof error === "object" && error !== null && "__isAuthError" in error;
}
var AuthApiError = class extends AuthError {
  constructor(message, status, code) {
    super(message, status, code);
    this.name = "AuthApiError";
    this.status = status;
    this.code = code;
  }
};
function isAuthApiError(error) {
  return isAuthError(error) && error.name === "AuthApiError";
}
var AuthUnknownError = class extends AuthError {
  constructor(message, originalError) {
    super(message);
    this.name = "AuthUnknownError";
    this.originalError = originalError;
  }
};
var CustomAuthError = class extends AuthError {
  constructor(message, name, status, code) {
    super(message, status, code);
    this.name = name;
    this.status = status;
  }
};
var AuthSessionMissingError = class extends CustomAuthError {
  constructor() {
    super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
  }
};
function isAuthSessionMissingError(error) {
  return isAuthError(error) && error.name === "AuthSessionMissingError";
}
var AuthInvalidTokenResponseError = class extends CustomAuthError {
  constructor() {
    super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
  }
};
var AuthInvalidCredentialsError = class extends CustomAuthError {
  constructor(message) {
    super(message, "AuthInvalidCredentialsError", 400, void 0);
  }
};
var AuthImplicitGrantRedirectError = class extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthImplicitGrantRedirectError", 500, void 0);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
};
function isAuthImplicitGrantRedirectError(error) {
  return isAuthError(error) && error.name === "AuthImplicitGrantRedirectError";
}
var AuthPKCEGrantCodeExchangeError = class extends CustomAuthError {
  constructor(message, details = null) {
    super(message, "AuthPKCEGrantCodeExchangeError", 500, void 0);
    this.details = null;
    this.details = details;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
};
var AuthRetryableFetchError = class extends CustomAuthError {
  constructor(message, status) {
    super(message, "AuthRetryableFetchError", status, void 0);
  }
};
function isAuthRetryableFetchError(error) {
  return isAuthError(error) && error.name === "AuthRetryableFetchError";
}
var AuthWeakPasswordError = class extends CustomAuthError {
  constructor(message, status, reasons) {
    super(message, "AuthWeakPasswordError", status, "weak_password");
    this.reasons = reasons;
  }
};

// node_modules/@supabase/auth-js/dist/module/lib/fetch.js
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var _getErrorMessage2 = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
var NETWORK_ERROR_CODES = [502, 503, 504];
async function handleError2(error) {
  var _a;
  if (!looksLikeFetchResponse(error)) {
    throw new AuthRetryableFetchError(_getErrorMessage2(error), 0);
  }
  if (NETWORK_ERROR_CODES.includes(error.status)) {
    throw new AuthRetryableFetchError(_getErrorMessage2(error), error.status);
  }
  let data;
  try {
    data = await error.json();
  } catch (e) {
    throw new AuthUnknownError(_getErrorMessage2(e), e);
  }
  let errorCode = void 0;
  const responseAPIVersion = parseResponseAPIVersion(error);
  if (responseAPIVersion && responseAPIVersion.getTime() >= API_VERSIONS["2024-01-01"].timestamp && typeof data === "object" && data && typeof data.code === "string") {
    errorCode = data.code;
  } else if (typeof data === "object" && data && typeof data.error_code === "string") {
    errorCode = data.error_code;
  }
  if (!errorCode) {
    if (typeof data === "object" && data && typeof data.weak_password === "object" && data.weak_password && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.reasons.reduce((a, i) => a && typeof i === "string", true)) {
      throw new AuthWeakPasswordError(_getErrorMessage2(data), error.status, data.weak_password.reasons);
    }
  } else if (errorCode === "weak_password") {
    throw new AuthWeakPasswordError(_getErrorMessage2(data), error.status, ((_a = data.weak_password) === null || _a === void 0 ? void 0 : _a.reasons) || []);
  } else if (errorCode === "session_not_found") {
    throw new AuthSessionMissingError();
  }
  throw new AuthApiError(_getErrorMessage2(data), error.status || 500, errorCode);
}
var _getRequestParams2 = (method, options, parameters, body) => {
  const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
  if (method === "GET") {
    return params;
  }
  params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options === null || options === void 0 ? void 0 : options.headers);
  params.body = JSON.stringify(body);
  return Object.assign(Object.assign({}, params), parameters);
};
async function _request(fetcher, method, url, options) {
  var _a;
  const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
  if (!headers[API_VERSION_HEADER_NAME]) {
    headers[API_VERSION_HEADER_NAME] = API_VERSIONS["2024-01-01"].name;
  }
  if (options === null || options === void 0 ? void 0 : options.jwt) {
    headers["Authorization"] = `Bearer ${options.jwt}`;
  }
  const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};
  if (options === null || options === void 0 ? void 0 : options.redirectTo) {
    qs["redirect_to"] = options.redirectTo;
  }
  const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
  const data = await _handleRequest2(fetcher, method, url + queryString, {
    headers,
    noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson
  }, {}, options === null || options === void 0 ? void 0 : options.body);
  return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };
}
async function _handleRequest2(fetcher, method, url, options, parameters, body) {
  const requestParams = _getRequestParams2(method, options, parameters, body);
  let result;
  try {
    result = await fetcher(url, Object.assign({}, requestParams));
  } catch (e) {
    console.error(e);
    throw new AuthRetryableFetchError(_getErrorMessage2(e), 0);
  }
  if (!result.ok) {
    await handleError2(result);
  }
  if (options === null || options === void 0 ? void 0 : options.noResolveJson) {
    return result;
  }
  try {
    return await result.json();
  } catch (e) {
    await handleError2(e);
  }
}
function _sessionResponse(data) {
  var _a;
  let session = null;
  if (hasSession(data)) {
    session = Object.assign({}, data);
    if (!data.expires_at) {
      session.expires_at = expiresAt(data.expires_in);
    }
  }
  const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;
  return { data: { session, user }, error: null };
}
function _sessionResponsePassword(data) {
  const response = _sessionResponse(data);
  if (!response.error && data.weak_password && typeof data.weak_password === "object" && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.message && typeof data.weak_password.message === "string" && data.weak_password.reasons.reduce((a, i) => a && typeof i === "string", true)) {
    response.data.weak_password = data.weak_password;
  }
  return response;
}
function _userResponse(data) {
  var _a;
  const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;
  return { data: { user }, error: null };
}
function _ssoResponse(data) {
  return { data, error: null };
}
function _generateLinkResponse(data) {
  const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
  const properties = {
    action_link,
    email_otp,
    hashed_token,
    redirect_to,
    verification_type
  };
  const user = Object.assign({}, rest);
  return {
    data: {
      properties,
      user
    },
    error: null
  };
}
function _noResolveJsonResponse(data) {
  return data;
}
function hasSession(data) {
  return data.access_token && data.refresh_token && data.expires_in;
}

// node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var GoTrueAdminApi = class {
  constructor({ url = "", headers = {}, fetch: fetch2 }) {
    this.url = url;
    this.headers = headers;
    this.fetch = resolveFetch4(fetch2);
    this.mfa = {
      listFactors: this._listFactors.bind(this),
      deleteFactor: this._deleteFactor.bind(this)
    };
  }
  /**
   * Removes a logged-in session.
   * @param jwt A valid, logged-in JWT.
   * @param scope The logout sope.
   */
  async signOut(jwt, scope = "global") {
    try {
      await _request(this.fetch, "POST", `${this.url}/logout?scope=${scope}`, {
        headers: this.headers,
        jwt,
        noResolveJson: true
      });
      return { data: null, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Sends an invite link to an email address.
   * @param email The email address of the user.
   * @param options Additional options to be included when inviting.
   */
  async inviteUserByEmail(email, options = {}) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/invite`, {
        body: { email, data: options.data },
        headers: this.headers,
        redirectTo: options.redirectTo,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Generates email links and OTPs to be sent via a custom email provider.
   * @param email The user's email.
   * @param options.password User password. For signup only.
   * @param options.data Optional user metadata. For signup only.
   * @param options.redirectTo The redirect url which should be appended to the generated link
   */
  async generateLink(params) {
    try {
      const { options } = params, rest = __rest2(params, ["options"]);
      const body = Object.assign(Object.assign({}, rest), options);
      if ("newEmail" in rest) {
        body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
        delete body["newEmail"];
      }
      return await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
        body,
        headers: this.headers,
        xform: _generateLinkResponse,
        redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return {
          data: {
            properties: null,
            user: null
          },
          error
        };
      }
      throw error;
    }
  }
  // User Admin API
  /**
   * Creates a new user.
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async createUser(attributes) {
    try {
      return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Get a list of users.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.
   */
  async listUsers(params) {
    var _a, _b, _c5, _d, _e, _f, _g;
    try {
      const pagination = { nextPage: null, lastPage: 0, total: 0 };
      const response = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
        headers: this.headers,
        noResolveJson: true,
        query: {
          page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
          per_page: (_d = (_c5 = params === null || params === void 0 ? void 0 : params.perPage) === null || _c5 === void 0 ? void 0 : _c5.toString()) !== null && _d !== void 0 ? _d : ""
        },
        xform: _noResolveJsonResponse
      });
      if (response.error)
        throw response.error;
      const users = await response.json();
      const total = (_e = response.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
      const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
      if (links.length > 0) {
        links.forEach((link) => {
          const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
          const rel = JSON.parse(link.split(";")[1].split("=")[1]);
          pagination[`${rel}Page`] = page;
        });
        pagination.total = parseInt(total);
      }
      return { data: Object.assign(Object.assign({}, users), pagination), error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { users: [] }, error };
      }
      throw error;
    }
  }
  /**
   * Get user by id.
   *
   * @param uid The user's unique identifier
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async getUserById(uid) {
    try {
      return await _request(this.fetch, "GET", `${this.url}/admin/users/${uid}`, {
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Updates the user data.
   *
   * @param attributes The data you want to update.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async updateUserById(uid, attributes) {
    try {
      return await _request(this.fetch, "PUT", `${this.url}/admin/users/${uid}`, {
        body: attributes,
        headers: this.headers,
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Delete a user. Requires a `service_role` key.
   *
   * @param id The user id you want to remove.
   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.
   * Defaults to false for backward compatibility.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async deleteUser(id, shouldSoftDelete = false) {
    try {
      return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${id}`, {
        headers: this.headers,
        body: {
          should_soft_delete: shouldSoftDelete
        },
        xform: _userResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  async _listFactors(params) {
    try {
      const { data, error } = await _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
        headers: this.headers,
        xform: (factors) => {
          return { data: { factors }, error: null };
        }
      });
      return { data, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _deleteFactor(params) {
    try {
      const data = await _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
        headers: this.headers
      });
      return { data, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
};

// node_modules/@supabase/auth-js/dist/module/lib/local-storage.js
var localStorageAdapter = {
  getItem: (key) => {
    if (!supportsLocalStorage()) {
      return null;
    }
    return globalThis.localStorage.getItem(key);
  },
  setItem: (key, value) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.setItem(key, value);
  },
  removeItem: (key) => {
    if (!supportsLocalStorage()) {
      return;
    }
    globalThis.localStorage.removeItem(key);
  }
};
function memoryLocalStorageAdapter(store = {}) {
  return {
    getItem: (key) => {
      return store[key] || null;
    },
    setItem: (key, value) => {
      store[key] = value;
    },
    removeItem: (key) => {
      delete store[key];
    }
  };
}

// node_modules/@supabase/auth-js/dist/module/lib/polyfills.js
function polyfillGlobalThis() {
  if (typeof globalThis === "object")
    return;
  try {
    Object.defineProperty(Object.prototype, "__magic__", {
      get: function() {
        return this;
      },
      configurable: true
    });
    __magic__.globalThis = __magic__;
    delete Object.prototype.__magic__;
  } catch (e) {
    if (typeof self !== "undefined") {
      self.globalThis = self;
    }
  }
}

// node_modules/@supabase/auth-js/dist/module/lib/locks.js
var internals = {
  /**
   * @experimental
   */
  debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
};
var LockAcquireTimeoutError = class extends Error {
  constructor(message) {
    super(message);
    this.isAcquireTimeout = true;
  }
};
var NavigatorLockAcquireTimeoutError = class extends LockAcquireTimeoutError {
};
async function navigatorLock(name, acquireTimeout, fn) {
  if (internals.debug) {
    console.log("@supabase/gotrue-js: navigatorLock: acquire lock", name, acquireTimeout);
  }
  const abortController = new globalThis.AbortController();
  if (acquireTimeout > 0) {
    setTimeout(() => {
      abortController.abort();
      if (internals.debug) {
        console.log("@supabase/gotrue-js: navigatorLock acquire timed out", name);
      }
    }, acquireTimeout);
  }
  return await globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {
    mode: "exclusive",
    ifAvailable: true
  } : {
    mode: "exclusive",
    signal: abortController.signal
  }, async (lock) => {
    if (lock) {
      if (internals.debug) {
        console.log("@supabase/gotrue-js: navigatorLock: acquired", name, lock.name);
      }
      try {
        return await fn();
      } finally {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: released", name, lock.name);
        }
      }
    } else {
      if (acquireTimeout === 0) {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: not immediately available", name);
        }
        throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock "${name}" immediately failed`);
      } else {
        if (internals.debug) {
          try {
            const result = await globalThis.navigator.locks.query();
            console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(result, null, "  "));
          } catch (e) {
            console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", e);
          }
        }
        console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request");
        return await fn();
      }
    }
  });
}

// node_modules/@supabase/auth-js/dist/module/GoTrueClient.js
polyfillGlobalThis();
var DEFAULT_OPTIONS = {
  url: GOTRUE_URL,
  storageKey: STORAGE_KEY,
  autoRefreshToken: true,
  persistSession: true,
  detectSessionInUrl: true,
  headers: DEFAULT_HEADERS4,
  flowType: "implicit",
  debug: false,
  hasCustomAuthorizationHeader: false
};
var AUTO_REFRESH_TICK_DURATION = 30 * 1e3;
var AUTO_REFRESH_TICK_THRESHOLD = 3;
async function lockNoOp(name, acquireTimeout, fn) {
  return await fn();
}
var GoTrueClient = class {
  /**
   * Create a new client for use in the browser.
   */
  constructor(options) {
    var _a, _b;
    this.memoryStorage = null;
    this.stateChangeEmitters = /* @__PURE__ */ new Map();
    this.autoRefreshTicker = null;
    this.visibilityChangedCallback = null;
    this.refreshingDeferred = null;
    this.initializePromise = null;
    this.detectSessionInUrl = true;
    this.hasCustomAuthorizationHeader = false;
    this.suppressGetSessionWarning = false;
    this.lockAcquired = false;
    this.pendingInLock = [];
    this.broadcastChannel = null;
    this.logger = console.log;
    this.instanceID = GoTrueClient.nextInstanceID;
    GoTrueClient.nextInstanceID += 1;
    if (this.instanceID > 0 && isBrowser()) {
      console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
    }
    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
    this.logDebugMessages = !!settings.debug;
    if (typeof settings.debug === "function") {
      this.logger = settings.debug;
    }
    this.persistSession = settings.persistSession;
    this.storageKey = settings.storageKey;
    this.autoRefreshToken = settings.autoRefreshToken;
    this.admin = new GoTrueAdminApi({
      url: settings.url,
      headers: settings.headers,
      fetch: settings.fetch
    });
    this.url = settings.url;
    this.headers = settings.headers;
    this.fetch = resolveFetch4(settings.fetch);
    this.lock = settings.lock || lockNoOp;
    this.detectSessionInUrl = settings.detectSessionInUrl;
    this.flowType = settings.flowType;
    this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;
    if (settings.lock) {
      this.lock = settings.lock;
    } else if (isBrowser() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {
      this.lock = navigatorLock;
    } else {
      this.lock = lockNoOp;
    }
    this.mfa = {
      verify: this._verify.bind(this),
      enroll: this._enroll.bind(this),
      unenroll: this._unenroll.bind(this),
      challenge: this._challenge.bind(this),
      listFactors: this._listFactors.bind(this),
      challengeAndVerify: this._challengeAndVerify.bind(this),
      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
    };
    if (this.persistSession) {
      if (settings.storage) {
        this.storage = settings.storage;
      } else {
        if (supportsLocalStorage()) {
          this.storage = localStorageAdapter;
        } else {
          this.memoryStorage = {};
          this.storage = memoryLocalStorageAdapter(this.memoryStorage);
        }
      }
    } else {
      this.memoryStorage = {};
      this.storage = memoryLocalStorageAdapter(this.memoryStorage);
    }
    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
      try {
        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
      } catch (e) {
        console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", e);
      }
      (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener("message", async (event) => {
        this._debug("received broadcast notification from other tab or client", event);
        await this._notifyAllSubscribers(event.data.event, event.data.session, false);
      });
    }
    this.initialize();
  }
  _debug(...args) {
    if (this.logDebugMessages) {
      this.logger(`GoTrueClient@${this.instanceID} (${version4}) ${(/* @__PURE__ */ new Date()).toISOString()}`, ...args);
    }
    return this;
  }
  /**
   * Initializes the client session either from the url or from storage.
   * This method is automatically called when instantiating the client, but should also be called
   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).
   */
  async initialize() {
    if (this.initializePromise) {
      return await this.initializePromise;
    }
    this.initializePromise = (async () => {
      return await this._acquireLock(-1, async () => {
        return await this._initialize();
      });
    })();
    return await this.initializePromise;
  }
  /**
   * IMPORTANT:
   * 1. Never throw in this method, as it is called from the constructor
   * 2. Never return a session from this method as it would be cached over
   *    the whole lifetime of the client
   */
  async _initialize() {
    var _a;
    try {
      const isPKCEFlow = isBrowser() ? await this._isPKCEFlow() : false;
      this._debug("#_initialize()", "begin", "is PKCE flow", isPKCEFlow);
      if (isPKCEFlow || this.detectSessionInUrl && this._isImplicitGrantFlow()) {
        const { data, error } = await this._getSessionFromURL(isPKCEFlow);
        if (error) {
          this._debug("#_initialize()", "error detecting session from URL", error);
          if (isAuthImplicitGrantRedirectError(error)) {
            const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;
            if (errorCode === "identity_already_exists" || errorCode === "identity_not_found" || errorCode === "single_identity_not_deletable") {
              return { error };
            }
          }
          await this._removeSession();
          return { error };
        }
        const { session, redirectType } = data;
        this._debug("#_initialize()", "detected session in URL", session, "redirect type", redirectType);
        await this._saveSession(session);
        setTimeout(async () => {
          if (redirectType === "recovery") {
            await this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
          } else {
            await this._notifyAllSubscribers("SIGNED_IN", session);
          }
        }, 0);
        return { error: null };
      }
      await this._recoverAndRefresh();
      return { error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { error };
      }
      return {
        error: new AuthUnknownError("Unexpected error during initialization", error)
      };
    } finally {
      await this._handleVisibilityChange();
      this._debug("#_initialize()", "end");
    }
  }
  /**
   * Creates a new anonymous user.
   *
   * @returns A session where the is_anonymous claim in the access token JWT set to true
   */
  async signInAnonymously(credentials) {
    var _a, _b, _c5;
    try {
      const res = await _request(this.fetch, "POST", `${this.url}/signup`, {
        headers: this.headers,
        body: {
          data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},
          gotrue_meta_security: { captcha_token: (_c5 = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c5 === void 0 ? void 0 : _c5.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data, error } = res;
      if (error || !data) {
        return { data: { user: null, session: null }, error };
      }
      const session = data.session;
      const user = data.user;
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Creates a new user.
   *
   * Be aware that if a user account exists in the system you may get back an
   * error message that attempts to hide this information from the user.
   * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.
   *
   * @returns A logged-in session if the server has "autoconfirm" ON
   * @returns A user if the server has "autoconfirm" OFF
   */
  async signUp(credentials) {
    var _a, _b, _c5;
    try {
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: {
            email,
            password,
            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          xform: _sessionResponse
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          body: {
            phone,
            password,
            data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},
            channel: (_c5 = options === null || options === void 0 ? void 0 : options.channel) !== null && _c5 !== void 0 ? _c5 : "sms",
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data, error } = res;
      if (error || !data) {
        return { data: { user: null, session: null }, error };
      }
      const session = data.session;
      const user = data.user;
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in an existing user with an email and password or phone and password.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or that the
   * email/phone and password combination is wrong or that the account can only
   * be accessed via social login.
   */
  async signInWithPassword(credentials) {
    try {
      let res;
      if ("email" in credentials) {
        const { email, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            email,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponsePassword
        });
      } else if ("phone" in credentials) {
        const { phone, password, options } = credentials;
        res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
          headers: this.headers,
          body: {
            phone,
            password,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponsePassword
        });
      } else {
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
      }
      const { data, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data || !data.session || !data.user) {
        return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return {
        data: Object.assign({ user: data.user, session: data.session }, data.weak_password ? { weakPassword: data.weak_password } : null),
        error
      };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in an existing user via a third-party provider.
   * This method supports the PKCE flow.
   */
  async signInWithOAuth(credentials) {
    var _a, _b, _c5, _d;
    return await this._handleProviderSignIn(credentials.provider, {
      redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,
      scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
      queryParams: (_c5 = credentials.options) === null || _c5 === void 0 ? void 0 : _c5.queryParams,
      skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect
    });
  }
  /**
   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.
   */
  async exchangeCodeForSession(authCode) {
    await this.initializePromise;
    return this._acquireLock(-1, async () => {
      return this._exchangeCodeForSession(authCode);
    });
  }
  async _exchangeCodeForSession(authCode) {
    const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : "").split("/");
    try {
      const { data, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
        headers: this.headers,
        body: {
          auth_code: authCode,
          code_verifier: codeVerifier
        },
        xform: _sessionResponse
      });
      await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      if (error) {
        throw error;
      }
      if (!data || !data.session || !data.user) {
        return {
          data: { user: null, session: null, redirectType: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return { data: Object.assign(Object.assign({}, data), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  /**
   * Allows signing in with an OIDC ID token. The authentication provider used
   * should be enabled and configured.
   */
  async signInWithIdToken(credentials) {
    try {
      const { options, provider, token, access_token, nonce } = credentials;
      const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
        headers: this.headers,
        body: {
          provider,
          id_token: token,
          access_token,
          nonce,
          gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
        },
        xform: _sessionResponse
      });
      const { data, error } = res;
      if (error) {
        return { data: { user: null, session: null }, error };
      } else if (!data || !data.session || !data.user) {
        return {
          data: { user: null, session: null },
          error: new AuthInvalidTokenResponseError()
        };
      }
      if (data.session) {
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("SIGNED_IN", data.session);
      }
      return { data, error };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in a user using magiclink or a one-time password (OTP).
   *
   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.
   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.
   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or, that the account
   * can only be accessed via social login.
   *
   * Do note that you will need to configure a Whatsapp sender on Twilio
   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp
   * channel is not supported on other providers
   * at this time.
   * This method supports PKCE when an email is passed.
   */
  async signInWithOtp(credentials) {
    var _a, _b, _c5, _d, _e;
    try {
      if ("email" in credentials) {
        const { email, options } = credentials;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        const { error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            email,
            data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
            create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      }
      if ("phone" in credentials) {
        const { phone, options } = credentials;
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
          headers: this.headers,
          body: {
            phone,
            data: (_c5 = options === null || options === void 0 ? void 0 : options.data) !== null && _c5 !== void 0 ? _c5 : {},
            create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
            channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : "sms"
          }
        });
        return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Log in a user given a User supplied OTP or TokenHash received through mobile or email.
   */
  async verifyOtp(params) {
    var _a, _b;
    try {
      let redirectTo = void 0;
      let captchaToken = void 0;
      if ("options" in params) {
        redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;
        captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;
      }
      const { data, error } = await _request(this.fetch, "POST", `${this.url}/verify`, {
        headers: this.headers,
        body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),
        redirectTo,
        xform: _sessionResponse
      });
      if (error) {
        throw error;
      }
      if (!data) {
        throw new Error("An error occurred on token verification.");
      }
      const session = data.session;
      const user = data.user;
      if (session === null || session === void 0 ? void 0 : session.access_token) {
        await this._saveSession(session);
        await this._notifyAllSubscribers(params.type == "recovery" ? "PASSWORD_RECOVERY" : "SIGNED_IN", session);
      }
      return { data: { user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Attempts a single-sign on using an enterprise Identity Provider. A
   * successful SSO attempt will redirect the current page to the identity
   * provider authorization page. The redirect URL is implementation and SSO
   * protocol specific.
   *
   * You can use it by providing a SSO domain. Typically you can extract this
   * domain by asking users for their email address. If this domain is
   * registered on the Auth instance the redirect will use that organization's
   * currently active SSO Identity Provider for the login.
   *
   * If you have built an organization-specific login page, you can use the
   * organization's SSO Identity Provider UUID directly instead.
   */
  async signInWithSSO(params) {
    var _a, _b, _c5;
    try {
      let codeChallenge = null;
      let codeChallengeMethod = null;
      if (this.flowType === "pkce") {
        ;
        [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
      }
      return await _request(this.fetch, "POST", `${this.url}/sso`, {
        body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : void 0 }), ((_c5 = params === null || params === void 0 ? void 0 : params.options) === null || _c5 === void 0 ? void 0 : _c5.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
        headers: this.headers,
        xform: _ssoResponse
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Sends a reauthentication OTP to the user's email or phone number.
   * Requires the user to be signed-in.
   */
  async reauthenticate() {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._reauthenticate();
    });
  }
  async _reauthenticate() {
    try {
      return await this._useSession(async (result) => {
        const { data: { session }, error: sessionError } = result;
        if (sessionError)
          throw sessionError;
        if (!session)
          throw new AuthSessionMissingError();
        const { error } = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
          headers: this.headers,
          jwt: session.access_token
        });
        return { data: { user: null, session: null }, error };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.
   */
  async resend(credentials) {
    try {
      const endpoint = `${this.url}/resend`;
      if ("email" in credentials) {
        const { email, type, options } = credentials;
        const { error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            email,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
        });
        return { data: { user: null, session: null }, error };
      } else if ("phone" in credentials) {
        const { phone, type, options } = credentials;
        const { data, error } = await _request(this.fetch, "POST", endpoint, {
          headers: this.headers,
          body: {
            phone,
            type,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          }
        });
        return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
      }
      throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type");
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Returns the session, refreshing it if necessary.
   *
   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.
   *
   * **IMPORTANT:** This method loads values directly from the storage attached
   * to the client. If that storage is based on request cookies for example,
   * the values in it may not be authentic and therefore it's strongly advised
   * against using this method and its results in such circumstances. A warning
   * will be emitted if this is detected. Use {@link #getUser()} instead.
   */
  async getSession() {
    await this.initializePromise;
    const result = await this._acquireLock(-1, async () => {
      return this._useSession(async (result2) => {
        return result2;
      });
    });
    return result;
  }
  /**
   * Acquires a global lock based on the storage key.
   */
  async _acquireLock(acquireTimeout, fn) {
    this._debug("#_acquireLock", "begin", acquireTimeout);
    try {
      if (this.lockAcquired) {
        const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();
        const result = (async () => {
          await last;
          return await fn();
        })();
        this.pendingInLock.push((async () => {
          try {
            await result;
          } catch (e) {
          }
        })());
        return result;
      }
      return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {
        this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
        try {
          this.lockAcquired = true;
          const result = fn();
          this.pendingInLock.push((async () => {
            try {
              await result;
            } catch (e) {
            }
          })());
          await result;
          while (this.pendingInLock.length) {
            const waitOn = [...this.pendingInLock];
            await Promise.all(waitOn);
            this.pendingInLock.splice(0, waitOn.length);
          }
          return await result;
        } finally {
          this._debug("#_acquireLock", "lock released for storage key", this.storageKey);
          this.lockAcquired = false;
        }
      });
    } finally {
      this._debug("#_acquireLock", "end");
    }
  }
  /**
   * Use instead of {@link #getSession} inside the library. It is
   * semantically usually what you want, as getting a session involves some
   * processing afterwards that requires only one client operating on the
   * session at once across multiple tabs or processes.
   */
  async _useSession(fn) {
    this._debug("#_useSession", "begin");
    try {
      const result = await this.__loadSession();
      return await fn(result);
    } finally {
      this._debug("#_useSession", "end");
    }
  }
  /**
   * NEVER USE DIRECTLY!
   *
   * Always use {@link #_useSession}.
   */
  async __loadSession() {
    this._debug("#__loadSession()", "begin");
    if (!this.lockAcquired) {
      this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
    }
    try {
      let currentSession = null;
      const maybeSession = await getItemAsync(this.storage, this.storageKey);
      this._debug("#getSession()", "session from storage", maybeSession);
      if (maybeSession !== null) {
        if (this._isValidSession(maybeSession)) {
          currentSession = maybeSession;
        } else {
          this._debug("#getSession()", "session from storage is not valid");
          await this._removeSession();
        }
      }
      if (!currentSession) {
        return { data: { session: null }, error: null };
      }
      const hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1e3 : false;
      this._debug("#__loadSession()", `session has${hasExpired ? "" : " not"} expired`, "expires_at", currentSession.expires_at);
      if (!hasExpired) {
        if (this.storage.isServer) {
          let suppressWarning = this.suppressGetSessionWarning;
          const proxySession = new Proxy(currentSession, {
            get: (target, prop, receiver) => {
              if (!suppressWarning && prop === "user") {
                console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.");
                suppressWarning = true;
                this.suppressGetSessionWarning = true;
              }
              return Reflect.get(target, prop, receiver);
            }
          });
          currentSession = proxySession;
        }
        return { data: { session: currentSession }, error: null };
      }
      const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
      if (error) {
        return { data: { session: null }, error };
      }
      return { data: { session }, error: null };
    } finally {
      this._debug("#__loadSession()", "end");
    }
  }
  /**
   * Gets the current user details if there is an existing session. This method
   * performs a network request to the Supabase Auth server, so the returned
   * value is authentic and can be used to base authorization rules on.
   *
   * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.
   */
  async getUser(jwt) {
    if (jwt) {
      return await this._getUser(jwt);
    }
    await this.initializePromise;
    const result = await this._acquireLock(-1, async () => {
      return await this._getUser();
    });
    return result;
  }
  async _getUser(jwt) {
    try {
      if (jwt) {
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt,
          xform: _userResponse
        });
      }
      return await this._useSession(async (result) => {
        var _a, _b, _c5;
        const { data, error } = result;
        if (error) {
          throw error;
        }
        if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {
          return { data: { user: null }, error: new AuthSessionMissingError() };
        }
        return await _request(this.fetch, "GET", `${this.url}/user`, {
          headers: this.headers,
          jwt: (_c5 = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c5 !== void 0 ? _c5 : void 0,
          xform: _userResponse
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        if (isAuthSessionMissingError(error)) {
          await this._removeSession();
          await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        }
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Updates user data for a logged in user.
   */
  async updateUser(attributes, options = {}) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._updateUser(attributes, options);
    });
  }
  async _updateUser(attributes, options = {}) {
    try {
      return await this._useSession(async (result) => {
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          throw sessionError;
        }
        if (!sessionData.session) {
          throw new AuthSessionMissingError();
        }
        const session = sessionData.session;
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce" && attributes.email != null) {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        const { data, error: userError } = await _request(this.fetch, "PUT", `${this.url}/user`, {
          headers: this.headers,
          redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
          body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
          jwt: session.access_token,
          xform: _userResponse
        });
        if (userError)
          throw userError;
        session.user = data.user;
        await this._saveSession(session);
        await this._notifyAllSubscribers("USER_UPDATED", session);
        return { data: { user: session.user }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Decodes a JWT (without performing any validation).
   */
  _decodeJWT(jwt) {
    return decodeJWTPayload(jwt);
  }
  /**
   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
   * If the refresh token or access token in the current session is invalid, an error will be thrown.
   * @param currentSession The current session that minimally contains an access token and refresh token.
   */
  async setSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._setSession(currentSession);
    });
  }
  async _setSession(currentSession) {
    try {
      if (!currentSession.access_token || !currentSession.refresh_token) {
        throw new AuthSessionMissingError();
      }
      const timeNow = Date.now() / 1e3;
      let expiresAt2 = timeNow;
      let hasExpired = true;
      let session = null;
      const payload = decodeJWTPayload(currentSession.access_token);
      if (payload.exp) {
        expiresAt2 = payload.exp;
        hasExpired = expiresAt2 <= timeNow;
      }
      if (hasExpired) {
        const { session: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!refreshedSession) {
          return { data: { user: null, session: null }, error: null };
        }
        session = refreshedSession;
      } else {
        const { data, error } = await this._getUser(currentSession.access_token);
        if (error) {
          throw error;
        }
        session = {
          access_token: currentSession.access_token,
          refresh_token: currentSession.refresh_token,
          user: data.user,
          token_type: "bearer",
          expires_in: expiresAt2 - timeNow,
          expires_at: expiresAt2
        };
        await this._saveSession(session);
        await this._notifyAllSubscribers("SIGNED_IN", session);
      }
      return { data: { user: session.user, session }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    }
  }
  /**
   * Returns a new session, regardless of expiry status.
   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
   * If the current session's refresh token is invalid, an error will be thrown.
   * @param currentSession The current session. If passed in, it must contain a refresh token.
   */
  async refreshSession(currentSession) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._refreshSession(currentSession);
    });
  }
  async _refreshSession(currentSession) {
    try {
      return await this._useSession(async (result) => {
        var _a;
        if (!currentSession) {
          const { data, error: error2 } = result;
          if (error2) {
            throw error2;
          }
          currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : void 0;
        }
        if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
          throw new AuthSessionMissingError();
        }
        const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { user: null, session: null }, error };
        }
        if (!session) {
          return { data: { user: null, session: null }, error: null };
        }
        return { data: { user: session.user, session }, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { user: null, session: null }, error };
      }
      throw error;
    }
  }
  /**
   * Gets the session data from a URL string
   */
  async _getSessionFromURL(isPKCEFlow) {
    try {
      if (!isBrowser())
        throw new AuthImplicitGrantRedirectError("No browser detected.");
      if (this.flowType === "implicit" && !this._isImplicitGrantFlow()) {
        throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
      } else if (this.flowType == "pkce" && !isPKCEFlow) {
        throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
      }
      const params = parseParametersFromURL(window.location.href);
      if (isPKCEFlow) {
        if (!params.code)
          throw new AuthPKCEGrantCodeExchangeError("No code detected.");
        const { data: data2, error: error2 } = await this._exchangeCodeForSession(params.code);
        if (error2)
          throw error2;
        const url = new URL(window.location.href);
        url.searchParams.delete("code");
        window.history.replaceState(window.history.state, "", url.toString());
        return { data: { session: data2.session, redirectType: null }, error: null };
      }
      if (params.error || params.error_description || params.error_code) {
        throw new AuthImplicitGrantRedirectError(params.error_description || "Error in URL with unspecified error_description", {
          error: params.error || "unspecified_error",
          code: params.error_code || "unspecified_code"
        });
      }
      const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type } = params;
      if (!access_token || !expires_in || !refresh_token || !token_type) {
        throw new AuthImplicitGrantRedirectError("No session defined in URL");
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresIn = parseInt(expires_in);
      let expiresAt2 = timeNow + expiresIn;
      if (expires_at) {
        expiresAt2 = parseInt(expires_at);
      }
      const actuallyExpiresIn = expiresAt2 - timeNow;
      if (actuallyExpiresIn * 1e3 <= AUTO_REFRESH_TICK_DURATION) {
        console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);
      }
      const issuedAt = expiresAt2 - expiresIn;
      if (timeNow - issuedAt >= 120) {
        console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", issuedAt, expiresAt2, timeNow);
      } else if (timeNow - issuedAt < 0) {
        console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", issuedAt, expiresAt2, timeNow);
      }
      const { data, error } = await this._getUser(access_token);
      if (error)
        throw error;
      const session = {
        provider_token,
        provider_refresh_token,
        access_token,
        expires_in: expiresIn,
        expires_at: expiresAt2,
        refresh_token,
        token_type,
        user: data.user
      };
      window.location.hash = "";
      this._debug("#_getSessionFromURL()", "clearing window.location.hash");
      return { data: { session, redirectType: params.type }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { session: null, redirectType: null }, error };
      }
      throw error;
    }
  }
  /**
   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)
   */
  _isImplicitGrantFlow() {
    const params = parseParametersFromURL(window.location.href);
    return !!(isBrowser() && (params.access_token || params.error_description));
  }
  /**
   * Checks if the current URL and backing storage contain parameters given by a PKCE flow
   */
  async _isPKCEFlow() {
    const params = parseParametersFromURL(window.location.href);
    const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
    return !!(params.code && currentStorageContent);
  }
  /**
   * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `"SIGNED_OUT"` event.
   *
   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.
   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.
   *
   * If using `others` scope, no `SIGNED_OUT` event is fired!
   */
  async signOut(options = { scope: "global" }) {
    await this.initializePromise;
    return await this._acquireLock(-1, async () => {
      return await this._signOut(options);
    });
  }
  async _signOut({ scope } = { scope: "global" }) {
    return await this._useSession(async (result) => {
      var _a;
      const { data, error: sessionError } = result;
      if (sessionError) {
        return { error: sessionError };
      }
      const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;
      if (accessToken) {
        const { error } = await this.admin.signOut(accessToken, scope);
        if (error) {
          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {
            return { error };
          }
        }
      }
      if (scope !== "others") {
        await this._removeSession();
        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      }
      return { error: null };
    });
  }
  /**
   * Receive a notification every time an auth event happens.
   * @param callback A callback function to be invoked when an auth event happens.
   */
  onAuthStateChange(callback) {
    const id = uuid();
    const subscription = {
      id,
      callback,
      unsubscribe: () => {
        this._debug("#unsubscribe()", "state change callback with id removed", id);
        this.stateChangeEmitters.delete(id);
      }
    };
    this._debug("#onAuthStateChange()", "registered callback with id", id);
    this.stateChangeEmitters.set(id, subscription);
    (async () => {
      await this.initializePromise;
      await this._acquireLock(-1, async () => {
        this._emitInitialSession(id);
      });
    })();
    return { data: { subscription } };
  }
  async _emitInitialSession(id) {
    return await this._useSession(async (result) => {
      var _a, _b;
      try {
        const { data: { session }, error } = result;
        if (error)
          throw error;
        await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback("INITIAL_SESSION", session));
        this._debug("INITIAL_SESSION", "callback id", id, "session", session);
      } catch (err) {
        await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback("INITIAL_SESSION", null));
        this._debug("INITIAL_SESSION", "callback id", id, "error", err);
        console.error(err);
      }
    });
  }
  /**
   * Sends a password reset request to an email address. This method supports the PKCE flow.
   *
   * @param email The email address of the user.
   * @param options.redirectTo The URL to send the user to after they click the password reset link.
   * @param options.captchaToken Verification token received when the user completes the captcha on the site.
   */
  async resetPasswordForEmail(email, options = {}) {
    let codeChallenge = null;
    let codeChallengeMethod = null;
    if (this.flowType === "pkce") {
      ;
      [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(
        this.storage,
        this.storageKey,
        true
        // isPasswordRecovery
      );
    }
    try {
      return await _request(this.fetch, "POST", `${this.url}/recover`, {
        body: {
          email,
          code_challenge: codeChallenge,
          code_challenge_method: codeChallengeMethod,
          gotrue_meta_security: { captcha_token: options.captchaToken }
        },
        headers: this.headers,
        redirectTo: options.redirectTo
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Gets all the identities linked to a user.
   */
  async getUserIdentities() {
    var _a;
    try {
      const { data, error } = await this.getUser();
      if (error)
        throw error;
      return { data: { identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : [] }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Links an oauth identity to an existing user.
   * This method supports the PKCE flow.
   */
  async linkIdentity(credentials) {
    var _a;
    try {
      const { data, error } = await this._useSession(async (result) => {
        var _a2, _b, _c5, _d, _e;
        const { data: data2, error: error2 } = result;
        if (error2)
          throw error2;
        const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {
          redirectTo: (_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo,
          scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
          queryParams: (_c5 = credentials.options) === null || _c5 === void 0 ? void 0 : _c5.queryParams,
          skipBrowserRedirect: true
        });
        return await _request(this.fetch, "GET", url, {
          headers: this.headers,
          jwt: (_e = (_d = data2.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : void 0
        });
      });
      if (error)
        throw error;
      if (isBrowser() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {
        window.location.assign(data === null || data === void 0 ? void 0 : data.url);
      }
      return { data: { provider: credentials.provider, url: data === null || data === void 0 ? void 0 : data.url }, error: null };
    } catch (error) {
      if (isAuthError(error)) {
        return { data: { provider: credentials.provider, url: null }, error };
      }
      throw error;
    }
  }
  /**
   * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.
   */
  async unlinkIdentity(identity) {
    try {
      return await this._useSession(async (result) => {
        var _a, _b;
        const { data, error } = result;
        if (error) {
          throw error;
        }
        return await _request(this.fetch, "DELETE", `${this.url}/user/identities/${identity.identity_id}`, {
          headers: this.headers,
          jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : void 0
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * Generates a new JWT.
   * @param refreshToken A valid refresh token that was returned on login.
   */
  async _refreshAccessToken(refreshToken) {
    const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      const startedAt = Date.now();
      return await retryable(async (attempt) => {
        if (attempt > 0) {
          await sleep(200 * Math.pow(2, attempt - 1));
        }
        this._debug(debugName, "refreshing attempt", attempt);
        return await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
          body: { refresh_token: refreshToken },
          headers: this.headers,
          xform: _sessionResponse
        });
      }, (attempt, error) => {
        const nextBackOffInterval = 200 * Math.pow(2, attempt);
        return error && isAuthRetryableFetchError(error) && // retryable only if the request can be sent before the backoff overflows the tick duration
        Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION;
      });
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        return { data: { session: null, user: null }, error };
      }
      throw error;
    } finally {
      this._debug(debugName, "end");
    }
  }
  _isValidSession(maybeSession) {
    const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
    return isValidSession;
  }
  async _handleProviderSignIn(provider, options) {
    const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {
      redirectTo: options.redirectTo,
      scopes: options.scopes,
      queryParams: options.queryParams
    });
    this._debug("#_handleProviderSignIn()", "provider", provider, "options", options, "url", url);
    if (isBrowser() && !options.skipBrowserRedirect) {
      window.location.assign(url);
    }
    return { data: { provider, url }, error: null };
  }
  /**
   * Recovers the session from LocalStorage and refreshes the token
   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.
   */
  async _recoverAndRefresh() {
    var _a;
    const debugName = "#_recoverAndRefresh()";
    this._debug(debugName, "begin");
    try {
      const currentSession = await getItemAsync(this.storage, this.storageKey);
      this._debug(debugName, "session from storage", currentSession);
      if (!this._isValidSession(currentSession)) {
        this._debug(debugName, "session is not valid");
        if (currentSession !== null) {
          await this._removeSession();
        }
        return;
      }
      const timeNow = Math.round(Date.now() / 1e3);
      const expiresWithMargin = ((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN;
      this._debug(debugName, `session has${expiresWithMargin ? "" : " not"} expired with margin of ${EXPIRY_MARGIN}s`);
      if (expiresWithMargin) {
        if (this.autoRefreshToken && currentSession.refresh_token) {
          const { error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            console.error(error);
            if (!isAuthRetryableFetchError(error)) {
              this._debug(debugName, "refresh failed with a non-retryable error, removing the session", error);
              await this._removeSession();
            }
          }
        }
      } else {
        await this._notifyAllSubscribers("SIGNED_IN", currentSession);
      }
    } catch (err) {
      this._debug(debugName, "error", err);
      console.error(err);
      return;
    } finally {
      this._debug(debugName, "end");
    }
  }
  async _callRefreshToken(refreshToken) {
    var _a, _b;
    if (!refreshToken) {
      throw new AuthSessionMissingError();
    }
    if (this.refreshingDeferred) {
      return this.refreshingDeferred.promise;
    }
    const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;
    this._debug(debugName, "begin");
    try {
      this.refreshingDeferred = new Deferred();
      const { data, error } = await this._refreshAccessToken(refreshToken);
      if (error)
        throw error;
      if (!data.session)
        throw new AuthSessionMissingError();
      await this._saveSession(data.session);
      await this._notifyAllSubscribers("TOKEN_REFRESHED", data.session);
      const result = { session: data.session, error: null };
      this.refreshingDeferred.resolve(result);
      return result;
    } catch (error) {
      this._debug(debugName, "error", error);
      if (isAuthError(error)) {
        const result = { session: null, error };
        if (!isAuthRetryableFetchError(error)) {
          await this._removeSession();
        }
        (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);
        return result;
      }
      (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);
      throw error;
    } finally {
      this.refreshingDeferred = null;
      this._debug(debugName, "end");
    }
  }
  async _notifyAllSubscribers(event, session, broadcast = true) {
    const debugName = `#_notifyAllSubscribers(${event})`;
    this._debug(debugName, "begin", session, `broadcast = ${broadcast}`);
    try {
      if (this.broadcastChannel && broadcast) {
        this.broadcastChannel.postMessage({ event, session });
      }
      const errors = [];
      const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {
        try {
          await x.callback(event, session);
        } catch (e) {
          errors.push(e);
        }
      });
      await Promise.all(promises);
      if (errors.length > 0) {
        for (let i = 0; i < errors.length; i += 1) {
          console.error(errors[i]);
        }
        throw errors[0];
      }
    } finally {
      this._debug(debugName, "end");
    }
  }
  /**
   * set currentSession and currentUser
   * process to _startAutoRefreshToken if possible
   */
  async _saveSession(session) {
    this._debug("#_saveSession()", session);
    this.suppressGetSessionWarning = true;
    await setItemAsync(this.storage, this.storageKey, session);
  }
  async _removeSession() {
    this._debug("#_removeSession()");
    await removeItemAsync(this.storage, this.storageKey);
    await this._notifyAllSubscribers("SIGNED_OUT", null);
  }
  /**
   * Removes any registered visibilitychange callback.
   *
   * {@see #startAutoRefresh}
   * {@see #stopAutoRefresh}
   */
  _removeVisibilityChangedCallback() {
    this._debug("#_removeVisibilityChangedCallback()");
    const callback = this.visibilityChangedCallback;
    this.visibilityChangedCallback = null;
    try {
      if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {
        window.removeEventListener("visibilitychange", callback);
      }
    } catch (e) {
      console.error("removing visibilitychange callback failed", e);
    }
  }
  /**
   * This is the private implementation of {@link #startAutoRefresh}. Use this
   * within the library.
   */
  async _startAutoRefresh() {
    await this._stopAutoRefresh();
    this._debug("#_startAutoRefresh()");
    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION);
    this.autoRefreshTicker = ticker;
    if (ticker && typeof ticker === "object" && typeof ticker.unref === "function") {
      ticker.unref();
    } else if (typeof Deno !== "undefined" && typeof Deno.unrefTimer === "function") {
      Deno.unrefTimer(ticker);
    }
    setTimeout(async () => {
      await this.initializePromise;
      await this._autoRefreshTokenTick();
    }, 0);
  }
  /**
   * This is the private implementation of {@link #stopAutoRefresh}. Use this
   * within the library.
   */
  async _stopAutoRefresh() {
    this._debug("#_stopAutoRefresh()");
    const ticker = this.autoRefreshTicker;
    this.autoRefreshTicker = null;
    if (ticker) {
      clearInterval(ticker);
    }
  }
  /**
   * Starts an auto-refresh process in the background. The session is checked
   * every few seconds. Close to the time of expiration a process is started to
   * refresh the session. If refreshing fails it will be retried for as long as
   * necessary.
   *
   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need
   * to call this function, it will be called for you.
   *
   * On browsers the refresh process works only when the tab/window is in the
   * foreground to conserve resources as well as prevent race conditions and
   * flooding auth with requests. If you call this method any managed
   * visibility change callback will be removed and you must manage visibility
   * changes on your own.
   *
   * On non-browser platforms the refresh process works *continuously* in the
   * background, which may not be desirable. You should hook into your
   * platform's foreground indication mechanism and call these methods
   * appropriately to conserve resources.
   *
   * {@see #stopAutoRefresh}
   */
  async startAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._startAutoRefresh();
  }
  /**
   * Stops an active auto refresh process running in the background (if any).
   *
   * If you call this method any managed visibility change callback will be
   * removed and you must manage visibility changes on your own.
   *
   * See {@link #startAutoRefresh} for more details.
   */
  async stopAutoRefresh() {
    this._removeVisibilityChangedCallback();
    await this._stopAutoRefresh();
  }
  /**
   * Runs the auto refresh token tick.
   */
  async _autoRefreshTokenTick() {
    this._debug("#_autoRefreshTokenTick()", "begin");
    try {
      await this._acquireLock(0, async () => {
        try {
          const now = Date.now();
          try {
            return await this._useSession(async (result) => {
              const { data: { session } } = result;
              if (!session || !session.refresh_token || !session.expires_at) {
                this._debug("#_autoRefreshTokenTick()", "no session");
                return;
              }
              const expiresInTicks = Math.floor((session.expires_at * 1e3 - now) / AUTO_REFRESH_TICK_DURATION);
              this._debug("#_autoRefreshTokenTick()", `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);
              if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {
                await this._callRefreshToken(session.refresh_token);
              }
            });
          } catch (e) {
            console.error("Auto refresh tick failed with error. This is likely a transient error.", e);
          }
        } finally {
          this._debug("#_autoRefreshTokenTick()", "end");
        }
      });
    } catch (e) {
      if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError) {
        this._debug("auto refresh token tick lock not available");
      } else {
        throw e;
      }
    }
  }
  /**
   * Registers callbacks on the browser / platform, which in-turn run
   * algorithms when the browser window/tab are in foreground. On non-browser
   * platforms it assumes always foreground.
   */
  async _handleVisibilityChange() {
    this._debug("#_handleVisibilityChange()");
    if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
      if (this.autoRefreshToken) {
        this.startAutoRefresh();
      }
      return false;
    }
    try {
      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);
      window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", this.visibilityChangedCallback);
      await this._onVisibilityChanged(true);
    } catch (error) {
      console.error("_handleVisibilityChange", error);
    }
  }
  /**
   * Callback registered with `window.addEventListener('visibilitychange')`.
   */
  async _onVisibilityChanged(calledFromInitialize) {
    const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;
    this._debug(methodName, "visibilityState", document.visibilityState);
    if (document.visibilityState === "visible") {
      if (this.autoRefreshToken) {
        this._startAutoRefresh();
      }
      if (!calledFromInitialize) {
        await this.initializePromise;
        await this._acquireLock(-1, async () => {
          if (document.visibilityState !== "visible") {
            this._debug(methodName, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
            return;
          }
          await this._recoverAndRefresh();
        });
      }
    } else if (document.visibilityState === "hidden") {
      if (this.autoRefreshToken) {
        this._stopAutoRefresh();
      }
    }
  }
  /**
   * Generates the relevant login URL for a third-party provider.
   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.
   * @param options.scopes A space-separated list of scopes granted to the OAuth application.
   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.
   */
  async _getUrlForProvider(url, provider, options) {
    const urlParams = [`provider=${encodeURIComponent(provider)}`];
    if (options === null || options === void 0 ? void 0 : options.redirectTo) {
      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);
    }
    if (options === null || options === void 0 ? void 0 : options.scopes) {
      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);
    }
    if (this.flowType === "pkce") {
      const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
      const flowParams = new URLSearchParams({
        code_challenge: `${encodeURIComponent(codeChallenge)}`,
        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`
      });
      urlParams.push(flowParams.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.queryParams) {
      const query = new URLSearchParams(options.queryParams);
      urlParams.push(query.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {
      urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);
    }
    return `${url}?${urlParams.join("&")}`;
  }
  async _unenroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        return await _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
          headers: this.headers,
          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
        });
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  async _enroll(params) {
    try {
      return await this._useSession(async (result) => {
        var _a, _b;
        const { data: sessionData, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, params.factorType === "phone" ? { phone: params.phone } : { issuer: params.issuer });
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors`, {
          body,
          headers: this.headers,
          jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
        });
        if (error) {
          return { data: null, error };
        }
        if (params.factorType === "totp" && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {
          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;
        }
        return { data, error: null };
      });
    } catch (error) {
      if (isAuthError(error)) {
        return { data: null, error };
      }
      throw error;
    }
  }
  /**
   * {@see GoTrueMFAApi#verify}
   */
  async _verify(params) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (result) => {
          var _a;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
            body: { code: params.code, challenge_id: params.challengeId },
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
          if (error) {
            return { data: null, error };
          }
          await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data.expires_in }, data));
          await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data);
          return { data, error };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challenge}
   */
  async _challenge(params) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (result) => {
          var _a;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          return await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
            body: { channel: params.channel },
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challengeAndVerify}
   */
  async _challengeAndVerify(params) {
    const { data: challengeData, error: challengeError } = await this._challenge({
      factorId: params.factorId
    });
    if (challengeError) {
      return { data: null, error: challengeError };
    }
    return await this._verify({
      factorId: params.factorId,
      challengeId: challengeData.id,
      code: params.code
    });
  }
  /**
   * {@see GoTrueMFAApi#listFactors}
   */
  async _listFactors() {
    const { data: { user }, error: userError } = await this.getUser();
    if (userError) {
      return { data: null, error: userError };
    }
    const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];
    const totp = factors.filter((factor) => factor.factor_type === "totp" && factor.status === "verified");
    const phone = factors.filter((factor) => factor.factor_type === "phone" && factor.status === "verified");
    return {
      data: {
        all: factors,
        totp,
        phone
      },
      error: null
    };
  }
  /**
   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}
   */
  async _getAuthenticatorAssuranceLevel() {
    return this._acquireLock(-1, async () => {
      return await this._useSession(async (result) => {
        var _a, _b;
        const { data: { session }, error: sessionError } = result;
        if (sessionError) {
          return { data: null, error: sessionError };
        }
        if (!session) {
          return {
            data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
            error: null
          };
        }
        const payload = this._decodeJWT(session.access_token);
        let currentLevel = null;
        if (payload.aal) {
          currentLevel = payload.aal;
        }
        let nextLevel = currentLevel;
        const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === "verified")) !== null && _b !== void 0 ? _b : [];
        if (verifiedFactors.length > 0) {
          nextLevel = "aal2";
        }
        const currentAuthenticationMethods = payload.amr || [];
        return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
      });
    });
  }
};
GoTrueClient.nextInstanceID = 0;

// node_modules/@supabase/auth-js/dist/module/AuthClient.js
var AuthClient = GoTrueClient;
var AuthClient_default = AuthClient;

// node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js
var SupabaseAuthClient = class extends AuthClient_default {
  constructor(options) {
    super(options);
  }
};

// node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js
var __awaiter8 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var SupabaseClient = class {
  /**
   * Create a new client for use in the browser.
   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.
   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.
   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
   * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
   * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
   * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
   * @param options.realtime Options passed along to realtime-js constructor.
   * @param options.global.fetch A custom fetch implementation.
   * @param options.global.headers Any additional headers to send with each network request.
   */
  constructor(supabaseUrl2, supabaseKey2, options) {
    var _a, _b, _c5;
    this.supabaseUrl = supabaseUrl2;
    this.supabaseKey = supabaseKey2;
    if (!supabaseUrl2)
      throw new Error("supabaseUrl is required.");
    if (!supabaseKey2)
      throw new Error("supabaseKey is required.");
    const _supabaseUrl = stripTrailingSlash(supabaseUrl2);
    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, "ws");
    this.authUrl = `${_supabaseUrl}/auth/v1`;
    this.storageUrl = `${_supabaseUrl}/storage/v1`;
    this.functionsUrl = `${_supabaseUrl}/functions/v1`;
    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split(".")[0]}-auth-token`;
    const DEFAULTS = {
      db: DEFAULT_DB_OPTIONS,
      realtime: DEFAULT_REALTIME_OPTIONS,
      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
      global: DEFAULT_GLOBAL_OPTIONS
    };
    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);
    this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : "";
    this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};
    if (!settings.accessToken) {
      this.auth = this._initSupabaseAuthClient((_c5 = settings.auth) !== null && _c5 !== void 0 ? _c5 : {}, this.headers, settings.global.fetch);
    } else {
      this.accessToken = settings.accessToken;
      this.auth = new Proxy({}, {
        get: (_, prop) => {
          throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);
        }
      });
    }
    this.fetch = fetchWithAuth(supabaseKey2, this._getAccessToken.bind(this), settings.global.fetch);
    this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));
    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {
      headers: this.headers,
      schema: settings.db.schema,
      fetch: this.fetch
    });
    if (!settings.accessToken) {
      this._listenForAuthEvents();
    }
  }
  /**
   * Supabase Functions allows you to deploy and invoke edge functions.
   */
  get functions() {
    return new FunctionsClient(this.functionsUrl, {
      headers: this.headers,
      customFetch: this.fetch
    });
  }
  /**
   * Supabase Storage allows you to manage user-generated content, such as photos or videos.
   */
  get storage() {
    return new StorageClient(this.storageUrl, this.headers, this.fetch);
  }
  /**
   * Perform a query on a table or a view.
   *
   * @param relation - The table or view name to query
   */
  from(relation) {
    return this.rest.from(relation);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.schema
  /**
   * Select a schema to query or perform an function (rpc) call.
   *
   * The schema needs to be on the list of exposed schemas inside Supabase.
   *
   * @param schema - The schema to query
   */
  schema(schema) {
    return this.rest.schema(schema);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.rpc
  /**
   * Perform a function call.
   *
   * @param fn - The function name to call
   * @param args - The arguments to pass to the function call
   * @param options - Named parameters
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   * @param options.get - When set to `true`, the function will be called with
   * read-only access mode.
   * @param options.count - Count algorithm to use to count rows returned by the
   * function. Only applicable for [set-returning
   * functions](https://www.postgresql.org/docs/current/functions-srf.html).
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  rpc(fn, args = {}, options = {}) {
    return this.rest.rpc(fn, args, options);
  }
  /**
   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.
   *
   * @param {string} name - The name of the Realtime channel.
   * @param {Object} opts - The options to pass to the Realtime channel.
   *
   */
  channel(name, opts = { config: {} }) {
    return this.realtime.channel(name, opts);
  }
  /**
   * Returns all Realtime channels.
   */
  getChannels() {
    return this.realtime.getChannels();
  }
  /**
   * Unsubscribes and removes Realtime channel from Realtime client.
   *
   * @param {RealtimeChannel} channel - The name of the Realtime channel.
   *
   */
  removeChannel(channel) {
    return this.realtime.removeChannel(channel);
  }
  /**
   * Unsubscribes and removes all Realtime channels from Realtime client.
   */
  removeAllChannels() {
    return this.realtime.removeAllChannels();
  }
  _getAccessToken() {
    var _a, _b;
    return __awaiter8(this, void 0, void 0, function* () {
      if (this.accessToken) {
        return yield this.accessToken();
      }
      const { data } = yield this.auth.getSession();
      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;
    });
  }
  _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug }, headers, fetch2) {
    var _a;
    const authHeaders = {
      Authorization: `Bearer ${this.supabaseKey}`,
      apikey: `${this.supabaseKey}`
    };
    return new SupabaseAuthClient({
      url: this.authUrl,
      headers: Object.assign(Object.assign({}, authHeaders), headers),
      storageKey,
      autoRefreshToken,
      persistSession,
      detectSessionInUrl,
      storage,
      flowType,
      lock,
      debug,
      fetch: fetch2,
      // auth checks if there is a custom authorizaiton header using this flag
      // so it knows whether to return an error when getUser is called with no session
      hasCustomAuthorizationHeader: (_a = "Authorization" in this.headers) !== null && _a !== void 0 ? _a : false
    });
  }
  _initRealtimeClient(options) {
    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));
  }
  _listenForAuthEvents() {
    let data = this.auth.onAuthStateChange((event, session) => {
      this._handleTokenChanged(event, "CLIENT", session === null || session === void 0 ? void 0 : session.access_token);
    });
    return data;
  }
  _handleTokenChanged(event, source, token) {
    if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
      this.changedAccessToken = token;
    } else if (event === "SIGNED_OUT") {
      this.realtime.setAuth();
      if (source == "STORAGE")
        this.auth.signOut();
      this.changedAccessToken = void 0;
    }
  }
};

// node_modules/@supabase/supabase-js/dist/module/index.js
var createClient = (supabaseUrl2, supabaseKey2, options) => {
  return new SupabaseClient(supabaseUrl2, supabaseKey2, options);
};

// app/lib/agent.ts
var import_mistralai = __toESM(require_mistralai(), 1);
if (import.meta) {
  import.meta.hot = createHotContext(
    //@ts-expect-error
    "app/lib/agent.ts"
  );
  import.meta.hot.lastModified = "1735299333037.8274";
}
var apiKey = "DV6vSywg34K6RY8YHN1lz7wHThUmEQaT";
var supabaseUrl = "https://anxdvsppnslhokzukahv.supabase.co";
var supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFueGR2c3BwbnNsaG9renVrYWh2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIyNzExMzcsImV4cCI6MjA0Nzg0NzEzN30.x6tt2reEn2WEfpnliWgc1DsBLtgkOzKWfL0LWFWu6AU";
var supabase = createClient(supabaseUrl, supabaseKey);
var mistralClient = new import_mistralai.Mistral({ apiKey });
async function fetchDataFromSupabase(embedding) {
  try {
    const { data, error } = await supabase.rpc("match_handbook_docs", {
      query_embedding: embedding,
      match_threshold: 0.78,
      match_count: 5
    });
    if (error) {
      throw new Error(error.message);
    }
    return data.map((chunk) => chunk.content).join(" ");
  } catch (error) {
    console.error("Error fetching data from Supabase:", error);
    return null;
  }
}
function formatResponse(response) {
  response = response.replace(/(#{1,6}\s.*?:)(\s*)/g, (header, space) => {
    return `<strong>${header}</strong>${space}`;
  });
  response = response.replace(/(\*\*.*?\*\*)(:)/g, "<strong>$1</strong>$2");
  response = response.replace(/^(\d+)\.\s(.+)$/gm, (num, content) => {
    return `<div class="pl-4"><strong>${num}.</strong> ${content}</div>`;
  });
  response = response.replace(/^-\s(.+)$/gm, '<div class="pl-4">\u2022 $1</div>');
  response = response.replace(/^(#{1,6})\s(.+)$/gm, (hashes, content) => {
    const level = hashes.length;
    return `<h${level}>${content}</h${level}>`;
  });
  return response;
}
async function agent(query) {
  try {
    const embeddingResponse = await mistralClient.embeddings.create({
      model: "mistral-embed",
      inputs: [query]
    });
    const embedding = embeddingResponse.data[0]?.embedding;
    if (!embedding) {
      throw new Error("Embedding is undefined");
    }
    const context = await fetchDataFromSupabase(embedding);
    const response = await generateChatResponse({ context, query });
    return formatResponse(typeof response === "string" ? response : "");
  } catch (error) {
    console.error("Error in agent function:", error);
    return "I'm sorry, I couldn't process your request.";
  }
}
async function generateChatResponse({
  context,
  query
}) {
  try {
    const response = await mistralClient.chat.complete({
      model: "mistral-large-latest",
      messages: [
        {
          role: "user",
          content: `Handbook context: ${context} - Question: ${query}`
        }
      ]
    });
    if (!response?.choices || response.choices.length === 0) {
      throw new Error("No choices available in the response");
    }
    return response.choices[0].message.content;
  } catch (error) {
    console.error("Error generating chat response:", error);
    return "I'm sorry, I couldn't process your request.";
  }
}

// app/components/ChatInterface.tsx
var import_jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime(), 1);
if (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {
  console.warn("remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.");
} else {
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    window.$RefreshRuntime$.register(type, '"app/components/ChatInterface.tsx"' + id);
  };
  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;
}
var prevRefreshReg;
var prevRefreshSig;
var _s = $RefreshSig$();
var _s2 = $RefreshSig$();
if (import.meta) {
  import.meta.hot = createHotContext(
    //@ts-expect-error
    "app/components/ChatInterface.tsx"
  );
  import.meta.hot.lastModified = "1735299306315.9595";
}
var LoadingDots = () => {
  _s();
  const [dots, setDots] = (0, import_react3.useState)(1);
  (0, import_react3.useEffect)(() => {
    const interval = setInterval(() => {
      setDots((prev) => prev % 3 + 1);
    }, 500);
    return () => clearInterval(interval);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: `p-3 rounded-lg bg-gray-200 text-black`, children: [
    "Thinking",
    ".".repeat(dots)
  ] }, void 0, true, {
    fileName: "app/components/ChatInterface.tsx",
    lineNumber: 92,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "app/components/ChatInterface.tsx",
    lineNumber: 91,
    columnNumber: 10
  }, this);
};
_s(LoadingDots, "vtslgnK/bEF5TxuxaF1WUjsIW7Y=");
_c3 = LoadingDots;
var ChatInterface = () => {
  _s2();
  const [messages, setMessages] = (0, import_react3.useState)([]);
  const [inputMessage, setInputMessage] = (0, import_react3.useState)("");
  const [isSidebarOpen, setSidebarOpen] = (0, import_react3.useState)(false);
  const [savedChats, setSavedChats] = (0, import_react3.useState)([]);
  const [activeChatId, setActiveChatId] = (0, import_react3.useState)(null);
  const [isLoadedFromLocalStorage, setIsLoadedFromLocalStorage] = (0, import_react3.useState)(false);
  (0, import_react3.useEffect)(() => {
    const chats = localStorage.getItem("savedChats");
    if (chats) {
      setSavedChats(JSON.parse(chats));
    }
  }, []);
  const saveCurrentChat = (updatedMessages) => {
    const firstUserMessage = updatedMessages.find((msg) => msg.sender === "user")?.content;
    const chatName = firstUserMessage ? `${firstUserMessage.slice(0, 20)}...` : "New Chat";
    if (activeChatId) {
      const updatedChats = savedChats.map((chat) => chat.id === activeChatId ? {
        ...chat,
        messages: updatedMessages
      } : chat);
      setSavedChats(updatedChats);
      localStorage.setItem("savedChats", JSON.stringify(updatedChats));
    } else {
      const newChat = {
        id: `chat-${Date.now()}`,
        name: chatName,
        messages: updatedMessages
      };
      const updatedChats = [...savedChats, newChat];
      setSavedChats(updatedChats);
      localStorage.setItem("savedChats", JSON.stringify(updatedChats));
      setActiveChatId(newChat.id);
    }
  };
  const loadChat = (id) => {
    const chat = savedChats.find((c) => c.id === id);
    if (chat) {
      setMessages(chat.messages);
      setActiveChatId(chat.id);
      setSidebarOpen(false);
      setIsLoadedFromLocalStorage(true);
    }
  };
  const deleteChat = (id) => {
    const updatedChats = savedChats.filter((c) => c.id !== id);
    setSavedChats(updatedChats);
    localStorage.setItem("savedChats", JSON.stringify(updatedChats));
    if (id === activeChatId) {
      startNewChat();
    }
  };
  const startNewChat = () => {
    setMessages([]);
    setActiveChatId(null);
    setSidebarOpen(false);
    setIsLoadedFromLocalStorage(false);
  };
  const handleSendMessage = async () => {
    if (inputMessage.trim() === "")
      return;
    const newUserMessage = {
      id: `user-${Date.now()}`,
      content: inputMessage,
      sender: "user"
    };
    setMessages((prev) => [...prev, newUserMessage]);
    setInputMessage("");
    try {
      const loadingMessage = {
        id: `loading-${Date.now()}`,
        content: "",
        sender: "loading"
      };
      setMessages((prev) => [...prev, loadingMessage]);
      const botResponse = await agent(inputMessage);
      setMessages((prev) => {
        const updatedMessages = prev.filter((msg) => msg.sender !== "loading").concat({
          id: `bot-${Date.now()}`,
          content: botResponse,
          sender: "bot"
        });
        saveCurrentChat(updatedMessages);
        return updatedMessages;
      });
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };
  (0, import_react3.useEffect)(() => {
    if (isLoadedFromLocalStorage) {
      return;
    }
    const typingInterval = setInterval(() => {
      setMessages((prevMessages) => {
        return prevMessages.map((message) => {
          if (message.sender === "bot" && message.displayContent !== message.content) {
            const nextChar = message.content.charAt(message.displayContent?.length || 0);
            return {
              ...message,
              displayContent: (message.displayContent || "") + nextChar
            };
          }
          return message;
        });
      });
    }, 20);
    return () => clearInterval(typingInterval);
  }, [messages, isLoadedFromLocalStorage]);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex h-screen bg-gray-100", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: `fixed inset-y-0 left-0 w-64 bg-white shadow-lg transform ${isSidebarOpen ? "translate-x-0" : "-translate-x-full"} transition-transform duration-300 z-10`, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex flex-col w-full", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "p-4 border-b flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("h2", { className: "font-semibold", children: "Conversations" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 229,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Button, { variant: "ghost", size: "icon", onClick: () => setSidebarOpen(false), children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(X, { className: "h-4 w-4" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 231,
          columnNumber: 15
        }, this) }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 230,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "app/components/ChatInterface.tsx",
        lineNumber: 228,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex-1 overflow-y-auto p-4", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex justify-center mb-3", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Button, { variant: "outline", onClick: startNewChat, children: "Start a new chat" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 237,
          columnNumber: 15
        }, this) }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 236,
          columnNumber: 13
        }, this),
        savedChats.map((chat) => /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex justify-between items-center p-2 border rounded-lg hover:bg-gray-200 cursor-pointer mb-3", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { role: "button", tabIndex: 0, onClick: () => loadChat(chat.id), onKeyDown: (e) => {
            if (e.key === "Enter" || e.key === " ") {
              loadChat(chat.id);
            }
          }, children: chat.name }, void 0, false, {
            fileName: "app/components/ChatInterface.tsx",
            lineNumber: 242,
            columnNumber: 17
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Button, { variant: "ghost", size: "icon", onClick: () => deleteChat(chat.id), children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Trash, { className: "h-4 w-4", color: "red" }, void 0, false, {
            fileName: "app/components/ChatInterface.tsx",
            lineNumber: 250,
            columnNumber: 19
          }, this) }, void 0, false, {
            fileName: "app/components/ChatInterface.tsx",
            lineNumber: 249,
            columnNumber: 17
          }, this)
        ] }, chat.id, true, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 241,
          columnNumber: 37
        }, this))
      ] }, void 0, true, {
        fileName: "app/components/ChatInterface.tsx",
        lineNumber: 234,
        columnNumber: 11
      }, this)
    ] }, void 0, true, {
      fileName: "app/components/ChatInterface.tsx",
      lineNumber: 227,
      columnNumber: 9
    }, this) }, void 0, false, {
      fileName: "app/components/ChatInterface.tsx",
      lineNumber: 226,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex-1 flex flex-col h-full", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "bg-white border-b p-4 flex items-center", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Button, { variant: "ghost", size: "icon", className: "mr-2", onClick: () => setSidebarOpen(true), children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Menu, { className: "h-4 w-4" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 260,
          columnNumber: 13
        }, this) }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 259,
          columnNumber: 11
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("h1", { className: "font-semibold", children: "Remix Chat" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 262,
          columnNumber: 11
        }, this)
      ] }, void 0, true, {
        fileName: "app/components/ChatInterface.tsx",
        lineNumber: 258,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex-1 overflow-y-auto p-4 space-y-4", children: messages.map((msg) => {
        if (msg.sender === "loading") {
          return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(LoadingDots, {}, msg.id, false, {
            fileName: "app/components/ChatInterface.tsx",
            lineNumber: 268,
            columnNumber: 20
          }, this);
        }
        return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: `flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`, children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: `p-3 rounded-lg max-w-[70%] ${msg.sender === "user" ? "bg-blue-500 text-white" : "bg-gray-200 text-black"}`, children: msg.sender === "user" ? msg.content : /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { dangerouslySetInnerHTML: {
          __html: msg.displayContent || msg.content
        } }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 272,
          columnNumber: 58
        }, this) }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 271,
          columnNumber: 17
        }, this) }, msg.id, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 270,
          columnNumber: 18
        }, this);
      }) }, void 0, false, {
        fileName: "app/components/ChatInterface.tsx",
        lineNumber: 265,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "border-t bg-white p-4", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("div", { className: "flex space-x-2", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("textarea", { value: inputMessage, onChange: (e) => setInputMessage(e.target.value), placeholder: "Type a message...", className: "flex-1 p-2 border rounded-lg resize-none min-h-[44px] max-h-[120px] overflow-y-auto break-words whitespace-pre-wrap bg-white scrollbar-hide focus:outline-none" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 282,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Button, { onClick: handleSendMessage, variant: "default", size: "icon", className: "mt-3", children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(Send, { className: "h-4 w-4" }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 284,
          columnNumber: 15
        }, this) }, void 0, false, {
          fileName: "app/components/ChatInterface.tsx",
          lineNumber: 283,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "app/components/ChatInterface.tsx",
        lineNumber: 281,
        columnNumber: 11
      }, this) }, void 0, false, {
        fileName: "app/components/ChatInterface.tsx",
        lineNumber: 280,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "app/components/ChatInterface.tsx",
      lineNumber: 257,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "app/components/ChatInterface.tsx",
    lineNumber: 225,
    columnNumber: 10
  }, this);
};
_s2(ChatInterface, "MPSRpQi0ZuC8XX/yxkDm00cSOQQ=");
_c22 = ChatInterface;
var ChatInterface_default = ChatInterface;
var _c3;
var _c22;
$RefreshReg$(_c3, "LoadingDots");
$RefreshReg$(_c22, "ChatInterface");
window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

// app/routes/_index.tsx
var import_jsx_dev_runtime3 = __toESM(require_jsx_dev_runtime(), 1);
if (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {
  console.warn("remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.");
} else {
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    window.$RefreshRuntime$.register(type, '"app/routes/_index.tsx"' + id);
  };
  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;
}
var prevRefreshReg;
var prevRefreshSig;
if (import.meta) {
  import.meta.hot = createHotContext(
    //@ts-expect-error
    "app/routes/_index.tsx"
  );
  import.meta.hot.lastModified = "1734008172517.014";
}
var meta = () => {
  return [{
    title: "Remix Shadcn Chat"
  }, {
    name: "description",
    content: "A simple chat application"
  }];
};
function Index() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(ChatInterface_default, {}, void 0, false, {
    fileName: "app/routes/_index.tsx",
    lineNumber: 33,
    columnNumber: 10
  }, this);
}
_c4 = Index;
var _c4;
$RefreshReg$(_c4, "Index");
window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;
export {
  Index as default,
  meta
};
/*! Bundled license information:

lucide-react/dist/esm/shared/src/utils.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/defaultAttributes.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/Icon.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/createLucideIcon.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/menu.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/send.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/trash.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/x.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/lucide-react.js:
  (**
   * @license lucide-react v0.468.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=/build/routes/_index-GLPROUSM.js.map
